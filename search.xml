<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 備份</title>
    <url>/2022/03/12/hexo-git-backup/</url>
    <content><![CDATA[<p>使用 Hexo 撰寫文章，使用 <code>hexo generate</code> 時，會將 markdown 轉換成 html<br>在 <code>hexo deploy</code> 時會把靜態資源上傳到 github ，但並不會把 .md 檔案上傳<br>這樣如果撰寫的電腦出了問題，資料就會不覆存在。</p>
<p>網路上查詢了一下大致上的作法有 2 種:</p>
<ol>
<li>blog 的 repository 另開一個分支存取資源(如 Reference. 4)</li>
<li>使用套件 hexo-git-backup</li>
</ol>
<p>我們使用方法2，接著是以下的配置工作</p>
<span id="more"></span>

<h3 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h3><ol>
<li><p>進入blog的workspace &amp; 安裝套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>根目錄的 <code>_config.yml</code> 檔新增以下設定內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># setting git backup</span><br><span class="line">backup:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: https://github.com/&#123;username&#125;/&#123;user&#x27;s repository&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>每次需要備份時，執行指令(下述兩種都可以) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo backup</span><br><span class="line"># 簡寫</span><br><span class="line">hexo b</span><br></pre></td></tr></table></figure></li>
</ol>
<p>這樣每次撰寫部落格完後多此步驟就可以將 source 的文章保留下來。</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://cheng-yi-ting.github.io/2020/02/08/2020-02-08-HexoBackup/">Hexo 備份</a></li>
<li><a href="https://github.com/coneycode/hexo-git-backup">Github: hexo-git-backup</a></li>
<li><a href="http://www.xiaoliblog.cn/page/hexobackup.html">hexo-git-backup 博客备份及恢复</a></li>
<li><a href="https://cheng-yi-ting.github.io/2020/02/08/2020-02-08-HexoBackup/">使用git分支保存hexo博客源码到github</a></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 撰寫草稿</title>
    <url>/2022/03/17/hexo-add-draft-article/</url>
    <content><![CDATA[<p>一般使用建立文章指令為 <code>hexo new [layout] &lt;title&gt;</code><br>其用處為在 <code>source\_post</code> (跟目錄的 <code>_config.yml</code> 有預設 layout: post)<br>產生且後續使用<code>hexo generate</code>轉至 <code>public</code> 資料夾並且發佈至 github<br>但如果有未完成的文章，也會被一併發佈。</p>
<p>這時候，HEXO 提供的撰寫草稿功能就很方便了，指令如下:</p>
<span id="more"></span>

<h3 id="建立草稿"><a href="#建立草稿" class="headerlink" title="建立草稿"></a>建立草稿</h3><p>HEXO 的 layout 除了預設的 post 之外，還有一種叫做 draft ，建立時會儲存在 <code>source\_drafts</code> 底下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>當撰寫完成後可以將草稿進行發佈，使用以下指令就可以將文章轉到 <code>source\_post</code> 資料夾</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用本地啟動Server測試草稿"><a href="#使用本地啟動Server測試草稿" class="headerlink" title="使用本地啟動Server測試草稿"></a>使用本地啟動Server測試草稿</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://hexo.io/zh-tw/docs/writing.html">Hexo 寫作</a></li>
<li><a href="https://novnan.github.io/Hexo/hexo-draft/">Hexo 文章保存为草稿</a></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 調整資料夾原始碼目錄結構</title>
    <url>/2022/03/13/hexo-change-page-directory/</url>
    <content><![CDATA[<p>在預設的 Hexo 設定中，會將新的文章檔案放置於 <code>_posts</code> 的資料夾底下<br>隨的時間的推移，該資料夾會變得越來越雜亂無法管理，因此找了一下網路<br>看看有沒有甚麼方法可以做個簡單區隔，因此有的以下的調整:</p>
<span id="more"></span>
<h3 id="預設設定-根目錄的-config-yml"><a href="#預設設定-根目錄的-config-yml" class="headerlink" title="預設設定(根目錄的 _config.yml)"></a>預設設定(根目錄的 _config.yml)</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into </span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<h3 id="調整後設定-根目錄的-config-yml"><a href="#調整後設定-根目錄的-config-yml" class="headerlink" title="調整後設定(根目錄的 _config.yml)"></a>調整後設定(根目錄的 _config.yml)</h3><p>產生的文章名稱使用 :year :month 依照年月的區分，就不會把所有的文章都全部擺在 <code>_post</code> 底下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:month/:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into </span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<h3 id="驗證結果"><a href="#驗證結果" class="headerlink" title="驗證結果"></a>驗證結果</h3><p>原本的 <code>_post</code> 底下長出了年分&amp;月份，依照發佈時間即可快速分類找到當時所寫的文章</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mg2gM94oI68TB6d4KRCHRGcmssTGjYIbPMsElG3Jdav9b3HE9SiSojZUNw5WnvjWEdh8OtUX-b2JStw0q_4_oUb7ZdwxZ6t5FEcIxUMrdKJlhHwsp_EVkva03IYKKA9m6gubKmSJch7Hag0VOm7h01dTGmvE-bkLm3IXhks-2dy-MJk9RwbzMGJIWvMDHiKx8?width=250&height=256&cropmode=none" alt="hexo-directory"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><ol>
<li><a href="https://carlos.mynet.tw/%E4%BD%BF%E7%94%A8%E8%B3%87%E6%96%99%E5%A4%BE%E5%88%86%E5%B1%A4%E7%AE%A1%E7%90%86hexo%E6%96%87%E7%AB%A0%E4%B8%94%E4%B8%8D%E5%BD%B1%E9%9F%BF%E6%B0%B8%E4%B9%85%E9%80%A3%E7%B5%90/">使用資料夾分層管理Hexo文章且不影響永久連結</a></li>
<li><a href="https://mouson.im/Notes/Hexo/make-hexo-post-category-by-folder/">Hexo - 使文章依文章分類為資料夾名稱置放</a></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 utterances 在 Hexo 實現留言板功能</title>
    <url>/2022/03/04/hexo-message-board-utterances/</url>
    <content><![CDATA[<p>留言版在一般的部落格中一個常見的功能，既然使用Github製作了自己的部落格<br>順勢找了一些文章來新增這個功能</p>
<p>在參閱了許多 blogger 的文章後發現，比較常用的有以下兩種:</p>
<ul>
<li>Disqus<ul>
<li>需要去 Disqus 官網註冊 - <a href="https://disqus.com/">點我前往</a></li>
</ul>
</li>
<li>utterances<ul>
<li>與 Github Issues 做連結</li>
<li>需要登入 Github 才能夠進行留言</li>
</ul>
</li>
</ul>
<p>目前是打算使用 utterances 來實作 部落格的留言版</p>
<span id="more"></span>

<h3 id="整合-utterances"><a href="#整合-utterances" class="headerlink" title="整合 utterances"></a>整合 utterances</h3><ol>
<li>Github 建立 Repository</li>
<li>安裝 utterances - <a href="https://github.com/apps/utterances">點我前往</a></li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mf3VZ_TrvLMIzOAvwD5scehh0uCIPUsahla1ouyxXnWeuuT5H3ukvDP7hV0gVb_0gnlFJTWeW9UWGP5LXPyQTBd60fbKgxDlDQK2ADWYI5nD6b0pkEd3hfZjLFwEUWurbgWomh3aeF0BWUvSalsrsnPvcz2e_eKp3TjFC4M0aqJI5wZ9FJsnf7SILGMbJzgbp?width=660&height=261&cropmode=none" alt="utterances-install.png"><br>3. 取得授權，並選擇 步驟1 的 Repository</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mB7qi6p5Kb5d77Slb0G_jLXcoBZ6yepW2pKcSxd3Ih7_gQ4SDxI9vNpA-6V9wp_RnBN59jH0ziNmpluQFQDjnM92bizO_e_2jLgYQRxeFb7ps9tjvCvauX62h5gJLcvQsa34THbIPo5P6HAZmuIwMlGX5dwFnHIl9fLbX-dITsVKucorwYtuIJ2I8kmzdq_B5?width=480&height=660&cropmode=none" alt="utterances-select-repository.png"><br>4. 填寫對應的 configuration EX: Repository , Blog Post &amp; issue Mapping , Theme …etc</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mZW8hAhicSL9Xi4l83gr-741kqXgXqCBnmEDZ5a_ZVaCNUbsZQGTl456l7dxJUszLljpSitj43aRmX3fA0OUM58mYxGTvKuc0wL0VW-9OPS6YAn1Uz9FqzK0Q8YSWOpCQBiDHVMFUb6E5olX7bVBc-vy_rP5gqLV5Kt1WPC8gXKKIKqjtSVCpSzI9LB2H49DI?width=660&height=622&cropmode=none" alt="utterances-configuration-script.png"><br>5. 在 theme 的 _config.yml 新增參數 (blog 目前是使用 next themes)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># utterances by 2022-03-04</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在主題底下 <code>themes\next\layout\_partials</code> 的 comments.swig 中 新增其 srcipt<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">新增至</span> &#123;<span class="string">%-</span> <span class="string">if</span> <span class="string">page.comments</span> <span class="string">%</span>&#125; <span class="string">後面</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">theme.utterances.enable</span> <span class="string">%</span>&#125;</span><br><span class="line">    <span class="string">&lt;div</span> <span class="string">class=&quot;comments&quot;</span> <span class="string">id=&quot;comments&gt;</span></span><br><span class="line">        <span class="string">↓</span> <span class="string">複製上面步驟4</span> <span class="string">utterances</span> <span class="string">中產生的</span> <span class="string">script</span></span><br><span class="line">        <span class="string">&lt;script</span> <span class="string">src=&quot;https://utteranc.es/client.js&quot;</span></span><br><span class="line">            <span class="string">...</span></span><br><span class="line">        <span class="string">&lt;/script&gt;</span></span><br><span class="line">    <span class="string">&lt;/div&gt;</span></span><br><span class="line">  &#123;<span class="string">%-</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>即可看到留言板出現在文章內了</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mi1owUcX16kQYG0y6amhW5TXqG8FlrfdD5PLc08FS7crQCBUFyU0TUJQbw3YSzu8UeSz_ajqZQDOWdxIo5PwIx-HUr_r2__1nn9taGWzzXCWokVufwsWZHApHEC3maMsGRKJxd5Pf3sdT0cW0qVg7dCYdt6IdQ9ie2Z2uetNM-dX_S54E9U7_qVpFRhuWp_wy?width=660&height=313&cropmode=none" alt="utterances-message-board-result.png"></p>
<h3 id="如何讓留言板不要出現"><a href="#如何讓留言板不要出現" class="headerlink" title="如何讓留言板不要出現"></a>如何讓留言板不要出現</h3><p>因為分類&#x2F;標籤等頁面通常不需要有連言功能<br>在 markdown 的 Front-matter 把 comments 關閉</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-03-01 20:10:05</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://annkuoq.github.io/blog/2020-03-09-add-utterances-comment-widget-to-hexo/">在 Hexo 安裝 utterances 留言版</a></li>
<li><a href="https://medium.com/starbugs/gatsby-%E7%94%A8-utterances-%E6%9B%BF-gatsby-%E7%9A%84-blog-%E7%B6%B2%E7%AB%99%E7%94%B3%E8%A3%9D-github-issue-%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD-e8593318e5a3">Gatsby | 用 utterances 替 Gatsby 的 Blog 網站申裝 GitHub Issue 留言功能</a></li>
<li><a href="https://blog.kyomind.tw/hexo-blog-reply/">Hexo：新增 utterances 留言板與方案選擇思路</a></li>
<li><a href="https://utteranc.es/">utterances </a></li>
<li><a href="https://kidneyweakx.com/2019/19log-1026-hexo-com.html">Hexo Next 主題增加評論系統 utterances</a></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet Filter 使用</title>
    <url>/2022/04/04/servlet-filter/</url>
    <content><![CDATA[<p>為 Servlet 中的其中一種高級特性 , 可用於 servlet 以外對於 request &amp; resposne 進行過濾, 甚至是修改其內容<br>Filter 可以同時存在很多個 , 多個 Filter 就組成了 FilterChain</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mWO6JRUFd29vWlVMojv_Zk5aHsoU-QryrWBDS6-yVashakMDUhYIlun5KMeuO18q6ljkEVtpcbWFwIWMuCwGdPp1hhqHXdQ4Vvv1LvGaB1eCkp6-NBxrwdtrlSpbRf1JTUO0x1ketfWGcd4FWnEDMMDMXeKJ9wcYGSGUqIZGbTIMJTSCXXYodmZjej2oSu2om?width=621&height=271&cropmode=none" alt="servlet-filter.png"></p>
<span id="more"></span>

<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ol>
<li>使用 Maven :  <code>pom.xml</code> 引入 servlet-api<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;!-- Servlet --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Filter-實現"><a href="#Filter-實現" class="headerlink" title="Filter 實現"></a>Filter 實現</h3><ol>
<li>Filter 需要實現 javax.servlet.Filter 介面 ( 該介面有3個方法 )</li>
</ol>
<ul>
<li>init(FilterConfig filterConfig)</li>
<li>doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</li>
<li>destory()</li>
</ul>
<p>其中 init() &amp; destory() 只會被呼叫一次 (<strong>The default implementation takes no action</strong>),<br>而 doFilter() 每次請求時都會被呼叫</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;project filter&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 撰寫處裡的邏輯</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>設定配置 ( 使用 xml or annotation )<br>(方法一) 在 <code>web.xml</code> 需要進行設定 ( Servlet 2.5 )<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://Java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>testFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.demo.filter.TestFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>testFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><code>&lt;filter&gt;</code> 跟 <code>&lt;filter-mapping&gt;</code> 的名字必須匹配</li>
<li><code>&lt;url-pattern&gt;</code> 設定 URL規則 , 可以使用 <code>*</code> (萬用字元)</li>
<li><code>&lt;dispatcher&gt;</code> 設定到達 servlet 的方式, 有4種 &#x3D;&gt; REQUEST <strong>(預設)</strong>, FORWARD, INCLUDE, ERROR ( 根據不同情境使用)</li>
<li>若有設定 <code>&lt;url-pattern&gt;</code> &amp; <code>&lt;dispatcher&gt;</code> , 它們兩者的條件要<strong>同時符合</strong>, 該 Filter 才會生效</li>
</ul>
<p>(方法二) 除了 xml 之外 , 也可以使用 @WebFilter() 的方式 ( Servlet 3.0 才有)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;project filter&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 撰寫處裡的邏輯</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Filter-執行順序"><a href="#Filter-執行順序" class="headerlink" title="Filter 執行順序"></a>Filter 執行順序</h3><ul>
<li>如果都是設定 xml 的情況下 , 由 <code>web.xml</code> 中的 <code>&lt;filter-mapping&gt;</code> 宣告順序依序執行</li>
<li>如果都是設定 <code>@WebFilter</code> 的情況下 , 由 ClassName 的順序來執行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SecondaryFilter.java</span><br><span class="line">ThirdFilter.java</span><br></pre></td></tr></table></figure></li>
<li>如果混用的情況底下 , 會先依照 <code>web.xml</code> 的宣告順序後, 再依照 ClassName 的方式</li>
</ul>
<p>基本上一個專案最好統一一種方式處理</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://openhome.cc/Gossip/ServletJSP/Filter.html">關於過濾器</a></li>
<li><a href="https://www.concretepage.com/java-ee/jsp-servlet/how-to-use-filter-in-servlet-3-with-webfilter-annotation">How to Use Filter in Servlet 3 with @WebFilter Annotation</a></li>
<li><a href="https://openhome.cc/Gossip/ServletJSP/FilterImplSetting.html">Filter 的實作與設定</a></li>
<li><a href="http://allenwu.logdown.com/posts/220574-filter-annotation-execution-order">Filter Annotation 執行順序</a></li>
<li><a href="https://www.twblogs.net/a/5b7dafda2b71773f4f185e7a">【Servlet】Filter深入講解及實例研究</a></li>
</ol>
]]></content>
      <categories>
        <category>servlet</category>
      </categories>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Annotation(標註)</title>
    <url>/2022/03/05/java-annotation/</url>
    <content><![CDATA[<p>Java 從 JDK5 開使支援了 Annotation 功能，可以提供在編譯時期提示 or 執行時期讀取的資訊。</p>
<span id="more"></span>

<h3 id="標準標註"><a href="#標準標註" class="headerlink" title="標準標註"></a>標準標註</h3><ol>
<li>@override : 提供 compiler 提醒被標註的 method 必須為 父類別 or 介面所定義之方法</li>
<li>@Deprecated : 提供 compiler 提醒被標註的 method 已經過時，建議不要再呼叫它</li>
<li>@SuppressWarnings: 抑制警告訊息 ( 可使用參數 value &#x3D; { args1, args2 …etc } 定義抑制警告類型 )</li>
<li>@FunctionalInterface: 協助檢查 interface 是否滿足 lambda 的型態 ( 為 java8 時所新增 )</li>
</ol>
<h3 id="元標註-meta-annotation"><a href="#元標註-meta-annotation" class="headerlink" title="元標註(meta-annotation)"></a>元標註(meta-annotation)</h3><p>標註使用 meta-annotation 為其他 annotation 做說明<br>meta-annotation 種類如下:</p>
<ol>
<li>@Target: 限定 Annotation 使用位置 ( ElementType )</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ANNOTATION_TYPE: meta-annotation為此類型，用來修飾註解</span><br><span class="line">METHOD: 修飾 method EX: springMVC 的 <span class="meta">@GATEMAPPING</span></span><br><span class="line">TYPE: 修飾class, interface, <span class="keyword">enum</span>, annotation  EX: java8 的 <span class="meta">@FunctionalInterface</span></span><br><span class="line">FIELD: 修飾成員變數 EX: java.persistence 的 <span class="meta">@Column</span> </span><br><span class="line">PARAMETER: 修飾方法參數 EX: springMVC 的 <span class="meta">@PathVariable</span></span><br><span class="line">CONSTRUCTOR: 修飾構造器 EX: spring 的 <span class="meta">@Autowired</span></span><br><span class="line">LOCAL_VARIABLE: 修飾區域變數 EX: spring 檢核參數的 <span class="meta">@NotNull</span> 可以用在多個場域</span><br><span class="line">PACKAGE: 修飾 <span class="keyword">package</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>@Retention: 定義了 Annotation 生命週期 ( RetentionPolicy )</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SOURCE: 只會出現在程式碼中，編譯後不會出現在class檔中 </span><br><span class="line">CLASS: 出現在程式碼中，且會編譯進class檔中，但運行期無任何效果 ( 此類型為 <span class="keyword">default</span> )</span><br><span class="line">RUNTIME: 從程式碼至到運行期間都會存在，可以使用 Reflection 機制取得 annotation 的訊息</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>@Documented: 使用 javadoc 命令生成API檔案時，如要要將標注資料加入文檔，才需要加上此註解</p>
</li>
<li><p>@Inherited: 具有繼承性，代表子類別可以拿到父類別的註解訊息<br>※ 只有 class-level annotation 可以使用, method-level 則無法</p>
</li>
<li><p>@Repeatable (java1.8新增): 在 JDK8 之前，annotation 某個位置只能出現一次，不能重複使用；但這個功能可以讓 annotation 在同個地方出現多次</p>
</li>
</ol>
<h3 id="自定義標註"><a href="#自定義標註" class="headerlink" title="自定義標註"></a>自定義標註</h3><ul>
<li>需要使用 <em><strong>@interface</strong></em></li>
<li>定義屬性，若命名為 value 時，使用時可省略屬性名稱</li>
<li>屬性需有預設值時，可以使用 <em><strong>default</strong></em> 關鍵字</li>
<li>欲在執行時期取得 標註資訊，可使用 <em><strong>java Reflection 機制</strong></em></li>
</ul>
<p>自定義 annotation 範例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CustomAnnotation &#123;</span><br><span class="line"></span><br><span class="line">	String[] value();</span><br><span class="line"></span><br><span class="line">	String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用一個 Main 方法 利用 Java Reflaction 取得 Annotation 的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationMain</span> &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">AnnotationMain</span> <span class="variable">main</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationMain</span>();</span><br><span class="line">        main.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CustomAnnotation(value = &#123;&quot;test&quot;, &quot;test2&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用反射機制取得 method 上的標註</span></span><br><span class="line">        <span class="type">CustomAnnotation</span> <span class="variable">customAnnotation</span> <span class="operator">=</span> AnnotationMain.class.getMethod(<span class="string">&quot;test&quot;</span>).getAnnotation(CustomAnnotation.class);</span><br><span class="line">        </span><br><span class="line">        String[] values = customAnnotation.value();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取得 value</span></span><br><span class="line">        System.out.println(<span class="string">&quot;value:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String value: values) </span><br><span class="line">            System.out.println(value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取得 messsage</span></span><br><span class="line">        System.out.println(<span class="string">&quot;message: &quot;</span> + customAnnotation.message());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行後會印出相對應的結果，印出 標註上的 value清單 &amp; message 的預設值 none</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">value:</span><br><span class="line">test</span><br><span class="line">test2</span><br><span class="line">message: none</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://kucw.github.io/blog/2018/6/java-annotation/">古古’s Blog Java - annotation 的使用</a></li>
<li><a href="https://openhome.cc/Gossip/Java/Annotation.html">常用標準標註</a></li>
<li><a href="https://openhome.cc/Gossip/Java/CustomizeAnnotation.html">自訂標註</a></li>
<li><a href="https://openhome.cc/Gossip/Java/ReadAnnotation.html">讀取標註資訊</a></li>
<li><a href="https://openhome.cc/Gossip/CodeData/JDK8/Annotation.html">【JDK8】Annotation 功能增強</a></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo + Github.io 建立自己的Blog</title>
    <url>/2022/03/01/hexo-github-blog-initial/</url>
    <content><![CDATA[<p>Hexo 為一個 Blog Framework ，基於 NodeJs 語言所開發 (支援 Markdown 語法)</p>
<span id="more"></span>

<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ol>
<li>安裝 Node.js : <a href="https://nodejs.org/en/download/">點我前往</a></li>
<li>安裝 git : <a href="https://git-scm.com/">點我前往</a></li>
<li>安裝 hexo :  <code>npm install hexo-cli -g</code></li>
<li>可以使用指令檢查是否安裝成功<br><code>git --version</code><br><code>node --version</code><br><code>hexo --version</code></li>
</ol>
<h3 id="設定-Hexo-Blog"><a href="#設定-Hexo-Blog" class="headerlink" title="設定 Hexo Blog"></a>設定 Hexo Blog</h3><ol>
<li>初始化專案並進入資料夾:<br><code>hexo init &#123;folder name&#125;</code><br><code>cd &#123;folder name&#125;</code></li>
</ol>
<p>初始化後會產生以下的預設 folder:<br><img src="https://bnz05pap002files.storage.live.com/y4mpY4y2J_aUk4idC_5MbB7HDrRqbZYj_JxE3RXQFZMxL4TQL-5yUZA1-3y1LOmh58d-rC1pJZOyoW8gvQ324cB1FiFacHMbGg4DthhkVIaNna0eapHK9tBpoMh1xL_0fGIHISuNUHmgptIMT2MOicPI1haUSn50u3GI_GTSBy83v3V3zPTvvHQuGmiEN0pbWwu?width=233&height=256&cropmode=none" alt="github-io-repository.png"></p>
<ol start="2">
<li>安裝 github.io 並建立 Repository</li>
</ol>
<ul>
<li>安裝 deploy git 的套件: <code>npm install hexo-deployer-git --save</code> </li>
<li>建立 github 的 個人部落格的 repository( 建立 New Repository &amp; 命名規則為 : 帳號名稱.github.io )<br><img src="https://bnz05pap002files.storage.live.com/y4mZW7XTF8h0zIa8VSplmsxa5H1Msdwp0CEuR0v3XwKHQ7ej10q5DTGZJUw8SDLJERKNpP3d_d8exqUZZfiB_QDFnQJBGseTSnQDBz36d4jGoLBGk5pbNtzwxpPVH1ac6I77cqvLIJSrmXdxoTWOZLc2eKa2gH_Job4nSx2qco0srGMo8Y_dKNoK3VrOxvrWXGs?width=1024&height=616&cropmode=none" alt="hexo-init-folder.png"></li>
</ul>
<ol start="3">
<li>調整 _config.yml 以利可以上傳至自己創建的 repository</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://oscar51011.github.io/</span> <span class="comment"># 填入自己創建的 Github Page</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>執行佈署指令: <code>hexo deploy</code></p>
<ul>
<li>根據 public folder 的資料更新至 .deploy_git (並更新至 repository)</li>
</ul>
</li>
<li><p>網址打上<code>https://username.github.io</code> 即可看到自己的BLOG網站</p>
</li>
</ol>
<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul>
<li>建立新文章: <code>hexo new &#123;title&#125;</code><ul>
<li>新文章在產生 source folder 底下</li>
</ul>
</li>
<li>清除靜態檔案&amp;快取: <code>hexo clean</code><ul>
<li>刪除了 public folder &amp; db.json</li>
</ul>
</li>
<li>產生靜態網頁: <code>hexo generate</code><ul>
<li>根據 source folder 的資料更新至 public folder</li>
</ul>
</li>
<li>本地啟動Server: <code>hexo server</code> <ul>
<li>使用參數 –port 4001, 可以覆蓋連接埠設定，預設為4000</li>
<li>使用 Ctrl + C 可以關閉</li>
</ul>
</li>
</ul>
<p>操作順序為<br><code>hexo clean</code> -&gt; <code>hexo generate</code> -&gt; <code>hexo deploy</code></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://hackmd.io/@Heidi-Liu/note-hexo-github">【學習筆記】如何使用 Hexo + GitHub Pages 架設個人網誌</a> <br></li>
<li><a href="https://github.com/hexojs/hexo">Hexo Github</a> <br></li>
<li><a href="https://hexo.io/zh-tw/docs/commands">Hexo 常用指令</a> <br></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10280954?sc=iThomeR">[Day31] Hexo x GitHub Pages 打造個人部落格</a> <br></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins 安裝教學</title>
    <url>/2022/03/06/jenkins-initial/</url>
    <content><![CDATA[<p>Jenkins 為一個持續化整合工具，由 Java 語言所撰寫，並支援許多套件做整合 ( ex : Maven , Gradle )<br>可用於自動化的持續整合(CI) &amp; 持續部署(CD) 。</p>
<span id="more"></span>

<h3 id="Local安裝前置作業"><a href="#Local安裝前置作業" class="headerlink" title="Local安裝前置作業"></a>Local安裝前置作業</h3><ol>
<li>準備一台 Linux 主機 (Virtual Mechine )</li>
<li>安裝 docker ( Optional: docker-compose )</li>
</ol>
<h3 id="使用-docker-安裝-Jenkins"><a href="#使用-docker-安裝-Jenkins" class="headerlink" title="使用 docker 安裝 Jenkins"></a>使用 docker 安裝 Jenkins</h3><ol>
<li><p>使用 docker 下載 docker images<br><code>docker pull jenkins/jenkins:latest</code></p>
</li>
<li><p>使用指令啟動 docker container (指定 port 為 18080)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -u root -d --name myjenkins -p 18080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">jenkins 8080 port 為 預設WEB介面 , 50000 port 為 jenkins Agent</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>啟動後，輸入網址 - <em><strong>{VM IP}:18080</strong></em> 進入 Jenkins 初始畫面</p>
</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mcApoPeOBRDSLJEBnroNaVPjG4VXCzXgQE45FfB0tkD7UrSdMfMLj4HdOgOXg9XPBZMM5YXqvCb_EM3e9WNQUbLwWa3lib_ENDaVotBtrkb0AbhH30jFmqy0BsJwPnZ_4OGRuV8P1YwDXipLFgnYICSA8CsgOhy37Ejok5wMbdd9rsjKlcNwd1R9RGKll56So?width=256&height=139&cropmode=none" alt="Jenkins_initial"></p>
<ol start="4">
<li><p>進入 container 中取得安裝的預設密碼</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">進入 container</span></span><br><span class="line">docker exec -it &#123;container name&#125; /bin/bash</span><br><span class="line"><span class="meta"># </span><span class="language-bash">顯示預設密碼</span></span><br><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>
</li>
<li><p>選擇客製化套件安裝 ( 選擇左邊預設全裝)</p>
</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4m5nGIeTsyu5iUN2_CGgA4rinujnsw-iQP5TPJ3XwPTOZ65LirQh1oX1jnbkjK07WOWnwC1uYPEZiWuo3huJZA89zN-fmlAygcYUTcWxkygkcUKTLnyNr-JOqoeNhjg3zNZup70RBayB_MxeVqQkX9oopysyxBkOm_mq0PmXAG_6YfI93JBQS7moB_zadgAE9Z?width=256&height=139&cropmode=none" alt="jenkins_plugin_setting"></p>
<ol start="6">
<li>創建Admin 的 帳號&#x2F;密碼</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mtzgP0W95pMW1ZWyEC4VcuZHCPR-z42TbjNnNDrpfHoRRtbo7Vo7awco05KH6Ezgujl_oPsAu05rsRrbq5Uz7xGW3Wy4HeOkjeka4OZkdqwqvvhLwzOM9xDGfSdlZYKBpXBaOMpG1kSzooQKri0dhz9mZkdEirCcxFOclaBX2MAgOn9zD35F8UrcY37lsnNyj?width=256&height=138&cropmode=none" alt="createAdminUser.png"></p>
<ol start="7">
<li>儲存設定後，即可進入首頁</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mOu7W-A_TyloArSKH_UydXT4L7FCHHvSyJwK567rbLYlHkvS3B3kuJIWvqMMHNOCfFpW8JBUHFpE5DE7lndEBw09bgzyGPhLuoez0tzwKgjNhh_3JK_bWIaxOBr7XwJM5exakUtoiSE9RZEZXqRtekj3hHCQzFWg6A27FkL5ZRuS_YpZBtBhp86dNX2gDYz3A?width=256&height=134&cropmode=none" alt="homePage"></p>
<h3 id="使用-docker-compose-安裝-Jenkins"><a href="#使用-docker-compose-安裝-Jenkins" class="headerlink" title="使用 docker-compose 安裝 Jenkins"></a>使用 docker-compose 安裝 Jenkins</h3><ol>
<li>撰寫 docker-compose.yml<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">	<span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">18080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">50000</span><span class="string">:50000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">JAVA_OPTS:</span> <span class="string">-Xmx2048m</span> <span class="string">-Djava.awt.headless=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/jenkins_home:/var/jenkins_home</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/.ssh:/root/.ssh:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/.npmrc:/root/.npmrc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/.m2:/root/.m2</span></span><br></pre></td></tr></table></figure></li>
<li>啟動 dokcer-compose<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://ithelp.ithome.com.tw/articles/10202465">day05_docker04_Jenkins</a></li>
<li><a href="https://iter01.com/553208.html">三十二張圖告訴你，Jenkins構建Spring Boot 有多簡單~
</a></li>
<li><a href="https://tomgregory.com/building-a-spring-boot-application-in-docker-and-jenkins/">Building a Spring Boot application in Docker and Jenkins (part 2 of microservice devops series)</a></li>
</ol>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 讀取 properties 設定檔參數</title>
    <url>/2022/03/11/springboot-load-properties-file/</url>
    <content><![CDATA[<p>Springboot 在 讀取設定檔參數有 3 種方式 ( 格式有 properties &amp; yml 本篇使用 properties )<br>( Springboot 預設配置檔案位置在 <code>src/main/resources/application.properties</code>)</p>
<p>如果需要指定 設定檔 需加上 @PropertySource 即可<br>※ 該 Annotation 只能夠指定 properties，因此如果需要指定 yml 檔需要另外實作</p>
<p>以下來撰寫 3個方式的寫法:</p>
<span id="more"></span>

<h3 id="前置作業-amp-環境"><a href="#前置作業-amp-環境" class="headerlink" title="前置作業 &amp; 環境"></a>前置作業 &amp; 環境</h3><ul>
<li>Springboot 2.5.2</li>
<li>maven 引入 web &amp; test dependencies<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  </span><br><span class="line">  	&lt;!-- web --&gt;</span><br><span class="line">  	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- test framework --&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">		&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">...	</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>在預設的 application.properites 加入參數<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">project.parameter</span> = <span class="string">test</span></span><br></pre></td></tr></table></figure></li>
<li>建立客製化的 properites : test.properties 在 <code>src/main/resources</code> 底下<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">project.parameter</span> = <span class="string">test</span></span><br></pre></td></tr></table></figure>
<img src="https://bnz05pap002files.storage.live.com/y4mAxeVYT8ncJ7Ivjb7MJX5CoaNpca8B2VyFU2zEX6L8ccQHQjZxyGxcau8wLyqWI597-GQhpK_vpq5oHpDbu6DNSsKCP4IoVk9KOQri5l_H7DminfZi8DBxNDioEZ9RTWgpimfBU8LN-3xNPivdoLa2JR6LVa__ILGpE0RdRtelWa1C9SSPnXYatCaVbqB_bm_?width=256&height=113&cropmode=none" alt="resources.png"></li>
</ol>
<h3 id="1-使用-Value-Annotation-讀取檔案"><a href="#1-使用-Value-Annotation-讀取檔案" class="headerlink" title="1. 使用 @Value Annotation 讀取檔案"></a>1. 使用 @Value Annotation 讀取檔案</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@PropertySource(&quot;classpath:test.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;project.parameter&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String parameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> parameter;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameter</span><span class="params">(String parameter)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.parameter = parameter;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-使用-Enviroment-介面取得設定檔資訊"><a href="#2-使用-Enviroment-介面取得設定檔資訊" class="headerlink" title="2. 使用 Enviroment 介面取得設定檔資訊"></a>2. 使用 Enviroment 介面取得設定檔資訊</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@PropertySource(&quot;classpath:test.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectEnvConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">    Environment environment;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getParameterValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;project.parameter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-使用-ConfigurationProperties-annotation-讀取檔案"><a href="#3-使用-ConfigurationProperties-annotation-讀取檔案" class="headerlink" title="3. 使用 @ConfigurationProperties annotation 讀取檔案"></a>3. 使用 @ConfigurationProperties annotation 讀取檔案</h3><p>ConfigurationProperties 可以將設定檔 mapping 成一個實體類別<br>使用該 annotation 建議引入對應的 dependencies</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;   </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;project&quot;)</span></span><br><span class="line"><span class="comment">// @PropertySource(&quot;classpath:test.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectConfigurationPropertiesConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String parameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> parameter;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameter</span><span class="params">(String parameter)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.parameter = parameter;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="驗證結果"><a href="#驗證結果" class="headerlink" title="驗證結果"></a>驗證結果</h3><p>使用一個簡單的整合測試來跑上述的結果查看是否可以取得設定檔的內容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoSettingTest</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> ProjectConfig projectConfig;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> ProjectEnvConfig projectEnvConfig;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> ProjectConfigurationPropertiesConfig projectConfigurationPropertiesConfig;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testSettingCase</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;load @Value:&quot;</span> + projectConfig.getParameter());</span><br><span class="line">		System.out.println(<span class="string">&quot;load Enviroment interface:&quot;</span> + projectEnvConfig.getParameterValue());</span><br><span class="line">		System.out.println(<span class="string">&quot;load @ConfigurationProperties:&quot;</span> + projectConfigurationPropertiesConfig.getParameter());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://bnz05pap002files.storage.live.com/y4m-JMnLiItOrZFNEkD0b5sW373Q8AKyQtKXW3jXxLt3B2RkMuTv7XfmxHXiZBQ4PJIbpFwxUzYw5Mus-4QX3MZIWBOEBj3pBufCERPt0T6L-FZ9-ORRYxKKXtfD34DgicSi4d_oga5M8wj4Xt492iRlR-a9O-kppMrY5m-jDigjaJv54hQyWmv5P63KbE7sW-3?width=660&height=257&cropmode=none" alt="demo-result.png"></p>
<h3 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a>錯誤訊息</h3><ol>
<li>如果設定檔的參數無法對應到 java 檔的設定時，會拋出 Could not resolve placeholder xxx 的訊息<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Could not resolve placeholder &#x27;project.parameter&#x27; in value &quot;$&#123;project.parameter&#125;&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://iter01.com/587071.html">【springboot讀取配置檔案】@ConfigurationProperties、@PropertySource和@Value</a></li>
<li><a href="https://iter01.com/515254.html">Spring Boot讀取配置檔案的幾種方式
</a></li>
</ol>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 主題 - NEXT &amp; 新增文章搜尋功能</title>
    <url>/2022/03/02/hexo-next-theme/</url>
    <content><![CDATA[<p>紀錄一下，Blog中選定的主題 Next 的安裝經過 &amp; 新增搜尋功能</p>
<span id="more"></span>

<h3 id="安裝主題-Next"><a href="#安裝主題-Next" class="headerlink" title="安裝主題 Next"></a>安裝主題 Next</h3><ol>
<li><p>Github clone hexo-theme-next project - <a href="https://github.com/theme-next/hexo-theme-next">點我前往</a></p>
</li>
<li><p>在 themes folder 底下建立 next 資料夾並將上述下載的資料 copy 進該資料夾</p>
</li>
<li><p>修改 根目錄 的 _config.xml 內容，從預設的 landscape 改成 next</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure></li>
<li><p>設定檔有2個，一個是配製 Hexo設定，另一個是針對 Next 主題進行配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">根目錄:</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="string">Next主題:</span> <span class="string">themes/_config.yml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Next 主題底下有 4種樣式 (設定於 themes 底下的 _config.xml)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="開啟-分類-x2F-標籤-功能"><a href="#開啟-分類-x2F-標籤-功能" class="headerlink" title="開啟 分類 &#x2F; 標籤 功能"></a>開啟 分類 &#x2F; 標籤 功能</h3><ul>
<li>新增 layout 為 page 的文章 ( 一般文章預設為 post)<br><code>hexo new page categories</code> ( type 為 “categories” )<br><code>hexo new page tags</code> ( type 為 “tags” )</li>
<li>一般文章撰寫時於文章 Front-matter 定義 分類 &#x2F; 標籤 屬性<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="string">主題</span> <span class="bullet">-</span> <span class="string">NEXT</span> <span class="string">&amp;</span> <span class="string">新增文章搜尋功能</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-03-02 06:55:34</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li>
<li>開啟 Next 主題 menu 得以顯示於介面<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment"># about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="新增-搜尋功能"><a href="#新增-搜尋功能" class="headerlink" title="新增 搜尋功能"></a>新增 搜尋功能</h3><ol>
<li>下載套件 <code>npm install hexo-generator-searchdb --save</code></li>
<li>根目錄 _config.xml 新增設定<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Local Search / created by 2022-03-02</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>主題目錄 _config.xml 開啟 local_search 功能<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="新增-文章閱讀進度-功能"><a href="#新增-文章閱讀進度-功能" class="headerlink" title="新增 文章閱讀進度 功能"></a>新增 文章閱讀進度 功能</h3><p>將 scrollpercent 從 false 改成 true</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4m1yGLaD3UGbwtXQPefduFnckR3CCidf2SWItddjqzSCA3KdyVLMXnZpx-If2Tl3tWkszjYeEMyotdRXWNIo_iQY_INtR5O0J48eqrMs_1nY9WVie0VKY4hJXYo208GuzkoFHi84ZTce-qnv7Bb6I_Hql7VNLpeIWiQOmib2hAYjdqnt-aDFR2FmDO-C_PuLxP?width=233&height=256&cropmode=none" alt="hexo_page_scrollpercent.png"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://github.com/theme-next/hexo-generator-searchdb">Github Repository : hexo-generator-searchdb</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10248214">(20) 試著學 Hexo - NexT 主題篇 - 可以安裝的套件</a></li>
<li><a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10257569">建立自己Blog系列(三) Hexo next theme 介紹</a></li>
<li><a href="https://github.com/theme-next/hexo-theme-next">Github Repository : hexo-theme-next</a></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 讀取 yaml 設定檔參數</title>
    <url>/2022/03/12/springboot-load-yaml-file/</url>
    <content><![CDATA[<p>讀取客製化設定檔參數，會需要使用 @PropertySource annotation，但該標註只適用於 properties，<br>如果副檔名為 YAML 檔案，會無法解析而造成錯誤，如果要讀取該類型檔案，需要做出以下調整:</p>
<span id="more"></span>

<h3 id="前置作業-amp-環境"><a href="#前置作業-amp-環境" class="headerlink" title="前置作業 &amp; 環境"></a>前置作業 &amp; 環境</h3><ul>
<li>Springboot 2.5.2</li>
<li>maven 引入 web &amp; test dependencies<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  </span><br><span class="line">  	&lt;!-- web --&gt;</span><br><span class="line">  	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- test framework --&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">		&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">...	</span><br></pre></td></tr></table></figure></li>
<li>建立客製化的 properites : ymlProject.yml 在 <code>src/main/resources</code> 底下<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">project:</span></span><br><span class="line">  <span class="attr">yamlTest:</span> <span class="string">yamlString</span></span><br></pre></td></tr></table></figure>
<img src="https://bnz05pap002files.storage.live.com/y4mpxMFJWJBu05lfnSinkVXrUr8aA0AsajHI0gUXWTuEGN6ddymE94uSS9LTxc0CiPTIJ0QVPK5UCTI_EWhWyhqVthH2PVAxUAg8wPiBHkU8T_juUfFm1wZSzhJKuAO1bKyCT6c1CK_1ygN_edsh4YkpWAf9NwuTYsts9tzVtYdArLgaVV-xzP-uMsi_iIeBJRV?width=256&height=150&cropmode=none" alt="setting.png"></li>
</ul>
<h3 id="實作程式"><a href="#實作程式" class="headerlink" title="實作程式"></a>實作程式</h3><p>Springboot 提供 </p>
<ul>
<li><code>YamlPropertiesFactoryBean</code> 將 YAML 轉成 properties </li>
<li><code>YamlMapFactoryBean</code> 將 YAML 轉成 Map </li>
<li><code>YamlPropertySourceLoader</code> 使用 @PropertySource load YAML 檔案<br>本篇使用 <code>YamlPropertiesFactoryBean</code> 將 YAML 轉成 properties 並照原 properties 的方法解析</li>
</ul>
<ol>
<li>覆寫 PropertySourceFactory 使其可以讀取 yaml 格式資料<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆寫 propertySource 讓其可以讀取 yaml 資訊</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年3月12日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YamlPropertySourceFactory</span> <span class="keyword">implements</span> <span class="title class_">PropertySourceFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// spring 提供套件使 YAML 加載成 properties 格式</span></span><br><span class="line">		<span class="type">YamlPropertiesFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YamlPropertiesFactoryBean</span>();</span><br><span class="line">        factory.setResources(resource.getResource());</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> factory.getObject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PropertiesPropertySource</span>(resource.getResource().getFilename(), properties);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用 @Configuration &amp; @PropertySource 取得自定義yaml檔案的資料<br> factory 置換 客製化的解析設定檔方式 ; defalut 為 <strong>DefaultPropertySourceFactory</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 讀取自定義 yaml 檔格式內容</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年3月12日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:ymlProject.yml&quot;, factory = YamlPropertySourceFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectYamlConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;project.yamlTest&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String parameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> parameter;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameter</span><span class="params">(String parameter)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.parameter = parameter;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用整合測試驗證"><a href="#使用整合測試驗證" class="headerlink" title="使用整合測試驗證"></a>使用整合測試驗證</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = &#123;SpringMvcApplication.class&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoYamlSettingTest</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> ProjectYamlConfig projectYamlConfig;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testYamlSettingCase</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;load @Value:&quot;</span> + projectYamlConfig.getParameter());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://bnz05pap002files.storage.live.com/y4m2FvKxO08tEtm-PWnzkNw38EM956UqWyrtaqvfw6RdCi7Hh1VJAltWqJGfra7k-ibhes5jM83TijHiCC2eXuZlSWvY-KGSu1qI3kuGfPaxv9c1VeAINTBdwqlIG0qB8RY_Fh3pqxvH_H68xWW6lNXMMK0Bn4LLF4TaSZBx8jnfAn1cUP39VGzVx3423kbr6kA?width=660&height=268&cropmode=none" alt="result.png"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://www.baeldung.com/spring-yaml-propertysource">@PropertySource with YAML Files in Spring Boot</a></li>
<li><a href="https://matthung0807.blogspot.com/2020/10/spring-boot-propertysource-load-yaml.html">Spring Boot @PropertySource load yaml</a></li>
<li><a href="https://kknews.cc/code/j2ymvpy.html">Spring Boot中通過@PropertySource註解讀取yaml或yml配置文件</a></li>
<li><a href="https://www.cnblogs.com/rim99/p/8452175.html">两种SpringBoot加载YML配置文件的方法</a></li>
</ol>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Springboot + Mockito 完成單元測試</title>
    <url>/2022/03/09/springboot-mockito-mock-test/</url>
    <content><![CDATA[<p>Mockito 為一個廣泛使用的測試框架，當開發時如果有遇到依賴注入的情境時，往往都會啟動Server，注入實體來進行測試，但這樣的方式即為整合測試 ; 因為當 A 服務呼叫 B 服務，如果 B 服務的內容每次都不一樣，這樣會造成測試結果往往會失敗。</p>
<p>Mock 測試即為建立假的物件 ; 以 A 服務 呼叫 B 服務來說，我們把 B 服務做 mock，讓回傳的結果固定，就可以專心測試 A 服務的 情境，而不會因為 B 來影響每一次測試的結果</p>
<span id="more"></span>

<p>單元測試分成三個步驟:</p>
<ol>
<li>Arrange : 準備資料</li>
<li>Act : 執行並回傳結果</li>
<li>Assert : 驗證結果</li>
</ol>
<h3 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h3><ol>
<li>選擇 springboot 版本 <code>2.5.2</code></li>
<li>使用 Maven - pom 檔 引入 <code>spring-boot-starter-web</code> &amp; <code>spring-boot-starter-test</code><br>在 starter-test 中即包含了 JUnit 5 &amp;　mockito 框架<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  </span><br><span class="line">  	&lt;!-- web --&gt;</span><br><span class="line">  	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- test framework --&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">		&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="程式範例"><a href="#程式範例" class="headerlink" title="程式範例"></a>程式範例</h3><ul>
<li>Service</li>
</ul>
<p>新增一個服務，用來驗證 DB 取出的 使用者是否成年 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 實現玩家服務</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年3月9日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlayerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IPlayerService</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> PlayerDao playerDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPlayerAnAdult</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">Player</span> <span class="variable">player</span> <span class="operator">=</span> playerDao.getPlayerById(id);</span><br><span class="line">		<span class="keyword">if</span>(player == <span class="literal">null</span> ) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Player Not Found!&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(player.getAge() &gt;= <span class="number">18</span> )</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Dao</li>
</ul>
<p>此範例並不會真正的連線 DB，因為單元測試是要把外部相依的服務給 mock 掉，因此這裡的演示只是用 new 的形式呈現</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 實作 player DAO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年3月9日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlayerDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">PlayerDao</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Player <span class="title function_">getPlayerById</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">		<span class="type">Player</span> <span class="variable">player</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&quot;Oscar&quot;</span>, <span class="number">19</span>);</span><br><span class="line">		<span class="keyword">return</span> player;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Model</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述玩家物件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年3月9日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Player</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Player</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Unit Test</p>
</li>
</ul>
<p>本次的測試分成三個情境:</p>
<ol>
<li>驗證 使用者如果大於 18 歲，即回傳 true</li>
<li>驗證 使用者如果小於 18 歲，即回傳 false</li>
<li>驗證 如果使用者不存在，則拋出例外錯誤</li>
</ol>
<p>此處在初始化的時候，使用 Mockito 的 <code>when</code> , <code>thenReturn</code><br>假設我傳入的參數為 1L，則回傳假的物件 new Player ，而非真正的去 DB取資料</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(MockitoExtension.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlayerServiceImplTest</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Mock</span></span><br><span class="line">	<span class="keyword">private</span> PlayerDao playerDao;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@InjectMocks</span></span><br><span class="line">	<span class="keyword">private</span> PlayerServiceImpl playerService;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 測試玩家大於等於18歲, 要回傳 true</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testIsPlayerAnAdult_PlayerIsAnAdult</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// Arrange</span></span><br><span class="line">		Mockito.when(playerDao.getPlayerById(<span class="number">1L</span>)).thenReturn(<span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&quot;Oscar&quot;</span>, <span class="number">19</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// act</span></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">isPlayerAnAdult</span> <span class="operator">=</span> playerService.isPlayerAnAdult(<span class="number">1L</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// assert</span></span><br><span class="line">		assertEquals(isPlayerAnAdult, <span class="literal">true</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 測試玩家小於18歲 , 要回傳 false</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testIsPlayerAnAdult_PlayerIsNotAnAdult</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// Arrange</span></span><br><span class="line">		Mockito.when(playerDao.getPlayerById(<span class="number">1L</span>)).thenReturn(<span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&quot;Oscar&quot;</span>, <span class="number">17</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// act</span></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">isPlayerAnAdult</span> <span class="operator">=</span> playerService.isPlayerAnAdult(<span class="number">1L</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// assert</span></span><br><span class="line">		assertEquals(isPlayerAnAdult, <span class="literal">false</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 測試如果找不到玩家，要拋出 Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testIsPlayerAnAdult_PlayerNotFound</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// assert</span></span><br><span class="line">		assertThrows(RuntimeException.class,</span><br><span class="line">			()-&gt;&#123;</span><br><span class="line">				<span class="comment">// Arrange</span></span><br><span class="line">				Mockito.when(playerDao.getPlayerById(<span class="number">1L</span>)).thenReturn(<span class="literal">null</span>);</span><br><span class="line">				</span><br><span class="line">				<span class="comment">// act</span></span><br><span class="line">				playerService.isPlayerAnAdult(<span class="number">1L</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上就是 Springboot + Mockito 的演示</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://www.baeldung.com/mockito-mock-methods">Mockito’s Mock Methods</a></li>
<li><a href="https://kucw.github.io/blog/2020/2/spring-unit-test-mockito">SpringBoot - 單元測試工具 Mockito</a></li>
<li><a href="https://www.baeldung.com/junit-assert-exception">Assert an Exception is Thrown in JUnit 4 and 5</a></li>
<li><a href="https://www.gushiciku.cn/pl/p3fg/zh-tw">有啥不同？來看看Spring Boot 基於 JUnit 5 實現單元測試</a></li>
<li><a href="https://spring.io/blog/2019/10/16/spring-boot-2-2-0">Spring Boot 2.2.0</a></li>
<li><a href="https://vivifish.medium.com/java-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E5%B7%A5%E5%85%B7-mockito-e5f0ce93579d">Java Unit Test — Mockito</a></li>
</ol>
]]></content>
      <categories>
        <category>testing</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>mockito</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 使用 maven 參數來切換不同環境</title>
    <url>/2022/03/28/springboot-maven-profile/</url>
    <content><![CDATA[<p>一般的團隊的程式會存在於不同的環境， EX: DEV , PROD …etc<br>以 Springboot 而言，可以使用 profiles 參數來根據啟動時載入不同參數來切換環境</p>
<span id="more"></span>

<h3 id="使用-application-properties"><a href="#使用-application-properties" class="headerlink" title="使用 application.properties"></a>使用 application.properties</h3><ol>
<li>springboot 有預設的 application.properties ，可以放統一的共通環境設定</li>
<li>根據不同環境新增不同的 application-{profile}.properties 至 <code>src/main/resources</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">application-dev.properties</span><br><span class="line">application-prod.properties</span><br></pre></td></tr></table></figure></li>
<li>啟動時下參數 指令要啟動的參數 EX: <code>-Dspring.profiles.active=prod</code><br>它就會去抓取 <code>src/main/resources</code> 底下所對應的 設定檔並把參數做覆蓋<br>以下範例以 Eclipse 啟動服務為例:</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4m6-0DZiIdWwEV76IoTB-YEin8AGtjl0nA0HS-yy9EhY8AzPL-KmHUonKz7JDS0ifzQWPBw-P-r8OGtu6-Km5pl88ncCQEyp4fYrPUchsj6uz6v2-aIehMpdX_CqIGOqTSnuhgjADfPBx9z3ZhwfPYnrHmRO4gdh3MmI6oq9XodIqhuBx0vPZDmllATLk7oFFE?width=256&height=152&cropmode=none" alt="eclipse-profiles.png"></p>
<p>即可根據不同的環境切換不同的參數設定</p>
<h3 id="使用-maven-參數打包"><a href="#使用-maven-參數打包" class="headerlink" title="使用 maven 參數打包"></a>使用 maven 參數打包</h3><p>上述是根據啟動時，我們也可以針對打包時，對打包檔根據不同參數處理一樣的事物，以下以 maven 為例</p>
<ol>
<li>pom檔新增對應的環境設定<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   &lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;dev&lt;/id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;profile.active&gt;dev&lt;/profile.active&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">        &lt;activation&gt;</span><br><span class="line">            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">        &lt;/activation&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;prod&lt;/id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;profile.active&gt;prod&lt;/profile.active&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure></li>
<li>根據不同環境新增不同的 application-{profile}.properties 至 <code>src/main/resources</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">application-dev.properties</span><br><span class="line">application-prod.properties</span><br></pre></td></tr></table></figure></li>
<li>修改 application.properties，以參數的形式覆蓋其設定檔資料<br>使用 <code>@profile.active@</code> (Reference.4) 將maven 參數跟 properties 綁定<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.profiles.active= @profile.active@</span><br></pre></td></tr></table></figure></li>
<li>使用 maven 使令打包加上 -P {profile} 切換對應環境<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn package -Pprod</span><br></pre></td></tr></table></figure></li>
</ol>
<p>即可根據不同的環境切換不同的參數設定打包</p>
<h3 id="使用-maven-參數打包-排除非指定環境檔案"><a href="#使用-maven-參數打包-排除非指定環境檔案" class="headerlink" title="使用 maven 參數打包 排除非指定環境檔案"></a>使用 maven 參數打包 排除非指定環境檔案</h3><p>如果使用上述 maven 方式打包，我們使用反組譯工具查看一下打包後的 jar 檔<br>發現所有的設定檔案都被打包上去了，如下圖:</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mM5ezuSfJbqGkCKKjKs5QU23OvCt_Tv4dP80ermD4-9ZB7oa981MPwKu8-nvZSAiYj33V09pWFWMjbi7jSKhdoxJNUWfgxO5AoL8IBEPxaIfaM2oyTvyn6m17AU46Gc85ZsFkMuHC7nDDFuXRbMPuHZin3NHkVaqpNWViMLcfoxPaYZZ0JHgWJ1GiWLPRf8-P?width=444&height=303&cropmode=none" alt="allproperties.png"></p>
<p>但我們只需要自己環境所需的設定檔案即可<br>因此我們可以在 maven 的 pom 檔的 build 做調整</p>
<ul>
<li>將所有特定環境的 application.properites 檔案排除 (需要保留統一的 application.properties)</li>
<li>將指定環境的 application.properites 萃取後加入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;build&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">	&lt;resource&gt;</span><br><span class="line">		&lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">		&lt;!-- 排除全部的application設定檔--&gt;		        </span><br><span class="line">		&lt;excludes&gt;</span><br><span class="line">		    &lt;exclude&gt;application-*.properties&lt;/exclude&gt;</span><br><span class="line">		&lt;/excludes&gt;		             	</span><br><span class="line">	&lt;/resource&gt;</span><br><span class="line">	&lt;resource&gt;</span><br><span class="line">		&lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">		&lt;!-- 複製maven參數定義的環境變數設定檔加入打包檔--&gt;</span><br><span class="line">		&lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">		&lt;includes&gt;</span><br><span class="line">		    &lt;include&gt;application-$&#123;profile.active&#125;.properties&lt;/include&gt;</span><br><span class="line">		&lt;/includes&gt;</span><br><span class="line">	&lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line"></span><br><span class="line">      ... </span><br><span class="line">  &lt;/build&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>排除後，針對特定環境打包的 jar 最後就會呈現以下結果:<br><code>mvn package -Pprod</code></p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mhuCbDWN200FrLEUBG1X5pjs9I_Fevk4Olf_QlVjyhMSMUaXXdUx2x7SQQ-e-R-GylLQKY8o4L6c24wD79GY91CXxnXOLt5s4FXdEAqLhH5kWCstAjpJLxamlrL1Oz94yOgq1KnrCGYZg_mc4_c29tLHV4q5qeeQs8HT4ssK8GIwl-firS_GwEyldlHsuAvZt?width=474&height=338&cropmode=none" alt="excludeUnusedProperties.png"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://www.gushiciku.cn/pl/2Wno/zh-tw">Maven Profile 與 Spring Profile 管理多環境打包</a></li>
<li><a href="https://www.baeldung.com/spring-profiles">Spring Profiles</a></li>
<li><a href="https://medium.com/learning-from-jhipster/8-spring-boot%E7%9A%84properties%E8%88%87profile-8cab3cd06856">Spring Boot的Properties與Profile</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/1.4.x/reference/html/howto-properties-and-configuration.html">Properties &amp; configuration</a></li>
</ol>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>maven</tag>
      </tags>
  </entry>
</search>
