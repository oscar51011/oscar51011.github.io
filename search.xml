<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 撰寫草稿</title>
    <url>/2022/03/17/hexo-add-draft-article/</url>
    <content><![CDATA[<p>一般使用建立文章指令為 <code>hexo new [layout] &lt;title&gt;</code><br>其用處為在 <code>source\_post</code> (跟目錄的 <code>_config.yml</code> 有預設 layout: post)<br>產生且後續使用<code>hexo generate</code>轉至 <code>public</code> 資料夾並且發佈至 github<br>但如果有未完成的文章，也會被一併發佈。</p>
<p>這時候，HEXO 提供的撰寫草稿功能就很方便了，指令如下:</p>
<span id="more"></span>

<h3 id="建立草稿"><a href="#建立草稿" class="headerlink" title="建立草稿"></a>建立草稿</h3><p>HEXO 的 layout 除了預設的 post 之外，還有一種叫做 draft ，建立時會儲存在 <code>source\_drafts</code> 底下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>當撰寫完成後可以將草稿進行發佈，使用以下指令就可以將文章轉到 <code>source\_post</code> 資料夾</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用本地啟動Server測試草稿"><a href="#使用本地啟動Server測試草稿" class="headerlink" title="使用本地啟動Server測試草稿"></a>使用本地啟動Server測試草稿</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://hexo.io/zh-tw/docs/writing.html">Hexo 寫作</a></li>
<li><a href="https://novnan.github.io/Hexo/hexo-draft/">Hexo 文章保存为草稿</a></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo + Github.io 建立自己的Blog</title>
    <url>/2022/03/01/hexo-github-blog-initial/</url>
    <content><![CDATA[<p>Hexo 為一個 Blog Framework ，基於 NodeJs 語言所開發 (支援 Markdown 語法)</p>
<span id="more"></span>

<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ol>
<li>安裝 Node.js : <a href="https://nodejs.org/en/download/">點我前往</a></li>
<li>安裝 git : <a href="https://git-scm.com/">點我前往</a></li>
<li>安裝 hexo :  <code>npm install hexo-cli -g</code></li>
<li>可以使用指令檢查是否安裝成功<br><code>git --version</code><br><code>node --version</code><br><code>hexo --version</code></li>
</ol>
<h3 id="設定-Hexo-Blog"><a href="#設定-Hexo-Blog" class="headerlink" title="設定 Hexo Blog"></a>設定 Hexo Blog</h3><ol>
<li>初始化專案並進入資料夾:<br><code>hexo init &#123;folder name&#125;</code><br><code>cd &#123;folder name&#125;</code></li>
</ol>
<p>初始化後會產生以下的預設 folder:<br><img src="https://bnz05pap002files.storage.live.com/y4mpY4y2J_aUk4idC_5MbB7HDrRqbZYj_JxE3RXQFZMxL4TQL-5yUZA1-3y1LOmh58d-rC1pJZOyoW8gvQ324cB1FiFacHMbGg4DthhkVIaNna0eapHK9tBpoMh1xL_0fGIHISuNUHmgptIMT2MOicPI1haUSn50u3GI_GTSBy83v3V3zPTvvHQuGmiEN0pbWwu?width=233&height=256&cropmode=none" alt="github-io-repository.png"></p>
<ol start="2">
<li>安裝 github.io 並建立 Repository</li>
</ol>
<ul>
<li>安裝 deploy git 的套件: <code>npm install hexo-deployer-git --save</code> </li>
<li>建立 github 的 個人部落格的 repository( 建立 New Repository &amp; 命名規則為 : 帳號名稱.github.io )<br><img src="https://bnz05pap002files.storage.live.com/y4mZW7XTF8h0zIa8VSplmsxa5H1Msdwp0CEuR0v3XwKHQ7ej10q5DTGZJUw8SDLJERKNpP3d_d8exqUZZfiB_QDFnQJBGseTSnQDBz36d4jGoLBGk5pbNtzwxpPVH1ac6I77cqvLIJSrmXdxoTWOZLc2eKa2gH_Job4nSx2qco0srGMo8Y_dKNoK3VrOxvrWXGs?width=1024&height=616&cropmode=none" alt="hexo-init-folder.png"></li>
</ul>
<ol start="3">
<li>調整 _config.yml 以利可以上傳至自己創建的 repository</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://oscar51011.github.io/</span> <span class="comment"># 填入自己創建的 Github Page</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>執行佈署指令: <code>hexo deploy</code></p>
<ul>
<li>根據 public folder 的資料更新至 .deploy_git (並更新至 repository)</li>
</ul>
</li>
<li><p>網址打上<code>https://username.github.io</code> 即可看到自己的BLOG網站</p>
</li>
</ol>
<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul>
<li>建立新文章: <code>hexo new &#123;title&#125;</code><ul>
<li>新文章在產生 source folder 底下</li>
</ul>
</li>
<li>清除靜態檔案&amp;快取: <code>hexo clean</code><ul>
<li>刪除了 public folder &amp; db.json</li>
</ul>
</li>
<li>產生靜態網頁: <code>hexo generate</code><ul>
<li>根據 source folder 的資料更新至 public folder</li>
</ul>
</li>
<li>本地啟動Server: <code>hexo server</code> <ul>
<li>使用參數 –port 4001, 可以覆蓋連接埠設定，預設為4000</li>
<li>使用 Ctrl + C 可以關閉</li>
</ul>
</li>
</ul>
<p>操作順序為<br><code>hexo clean</code> -&gt; <code>hexo generate</code> -&gt; <code>hexo deploy</code></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://hackmd.io/@Heidi-Liu/note-hexo-github">【學習筆記】如何使用 Hexo + GitHub Pages 架設個人網誌</a> <br></li>
<li><a href="https://github.com/hexojs/hexo">Hexo Github</a> <br></li>
<li><a href="https://hexo.io/zh-tw/docs/commands">Hexo 常用指令</a> <br></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10280954?sc=iThomeR">[Day31] Hexo x GitHub Pages 打造個人部落格</a> <br></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 主題 - NEXT &amp; 新增文章搜尋功能</title>
    <url>/2022/03/02/hexo-next-theme/</url>
    <content><![CDATA[<p>紀錄一下，Blog中選定的主題 Next 的安裝經過 &amp; 新增搜尋功能</p>
<span id="more"></span>

<h3 id="安裝主題-Next"><a href="#安裝主題-Next" class="headerlink" title="安裝主題 Next"></a>安裝主題 Next</h3><ol>
<li><p>Github clone hexo-theme-next project - <a href="https://github.com/theme-next/hexo-theme-next">點我前往</a></p>
</li>
<li><p>在 themes folder 底下建立 next 資料夾並將上述下載的資料 copy 進該資料夾</p>
</li>
<li><p>修改 根目錄 的 _config.xml 內容，從預設的 landscape 改成 next</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure></li>
<li><p>設定檔有2個，一個是配製 Hexo設定，另一個是針對 Next 主題進行配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">根目錄:</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="string">Next主題:</span> <span class="string">themes/_config.yml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Next 主題底下有 4種樣式 (設定於 themes 底下的 _config.xml)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="開啟-分類-x2F-標籤-功能"><a href="#開啟-分類-x2F-標籤-功能" class="headerlink" title="開啟 分類 &#x2F; 標籤 功能"></a>開啟 分類 &#x2F; 標籤 功能</h3><ul>
<li>新增 layout 為 page 的文章 ( 一般文章預設為 post)<br><code>hexo new page categories</code> ( type 為 “categories” )<br><code>hexo new page tags</code> ( type 為 “tags” )</li>
<li>一般文章撰寫時於文章 Front-matter 定義 分類 &#x2F; 標籤 屬性<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="string">主題</span> <span class="bullet">-</span> <span class="string">NEXT</span> <span class="string">&amp;</span> <span class="string">新增文章搜尋功能</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-03-02 06:55:34</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li>
<li>開啟 Next 主題 menu 得以顯示於介面<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment"># about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="新增-搜尋功能"><a href="#新增-搜尋功能" class="headerlink" title="新增 搜尋功能"></a>新增 搜尋功能</h3><ol>
<li>下載套件 <code>npm install hexo-generator-searchdb --save</code></li>
<li>根目錄 _config.xml 新增設定<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Local Search / created by 2022-03-02</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>主題目錄 _config.xml 開啟 local_search 功能<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="新增-文章閱讀進度-功能"><a href="#新增-文章閱讀進度-功能" class="headerlink" title="新增 文章閱讀進度 功能"></a>新增 文章閱讀進度 功能</h3><p>將 scrollpercent 從 false 改成 true</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4m1yGLaD3UGbwtXQPefduFnckR3CCidf2SWItddjqzSCA3KdyVLMXnZpx-If2Tl3tWkszjYeEMyotdRXWNIo_iQY_INtR5O0J48eqrMs_1nY9WVie0VKY4hJXYo208GuzkoFHi84ZTce-qnv7Bb6I_Hql7VNLpeIWiQOmib2hAYjdqnt-aDFR2FmDO-C_PuLxP?width=233&height=256&cropmode=none" alt="hexo_page_scrollpercent.png"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://github.com/theme-next/hexo-generator-searchdb">Github Repository : hexo-generator-searchdb</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10248214">(20) 試著學 Hexo - NexT 主題篇 - 可以安裝的套件</a></li>
<li><a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10257569">建立自己Blog系列(三) Hexo next theme 介紹</a></li>
<li><a href="https://github.com/theme-next/hexo-theme-next">Github Repository : hexo-theme-next</a></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins 安裝教學</title>
    <url>/2022/03/06/jenkins-initial/</url>
    <content><![CDATA[<p>Jenkins 為一個持續化整合工具，由 Java 語言所撰寫，並支援許多套件做整合 ( ex : Maven , Gradle )<br>可用於自動化的持續整合(CI) &amp; 持續部署(CD) 。</p>
<span id="more"></span>

<h3 id="Local安裝前置作業"><a href="#Local安裝前置作業" class="headerlink" title="Local安裝前置作業"></a>Local安裝前置作業</h3><ol>
<li>準備一台 Linux 主機 (Virtual Mechine )</li>
<li>安裝 docker ( Optional: docker-compose )</li>
</ol>
<h3 id="使用-docker-安裝-Jenkins"><a href="#使用-docker-安裝-Jenkins" class="headerlink" title="使用 docker 安裝 Jenkins"></a>使用 docker 安裝 Jenkins</h3><ol>
<li><p>使用 docker 下載 docker images<br><code>docker pull jenkins/jenkins:latest</code></p>
</li>
<li><p>使用指令啟動 docker container (指定 port 為 18080)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -u root -d --name myjenkins -p 18080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">jenkins 8080 port 為 預設WEB介面 , 50000 port 為 jenkins Agent</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>啟動後，輸入網址 - <em><strong>{VM IP}:18080</strong></em> 進入 Jenkins 初始畫面</p>
</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mcApoPeOBRDSLJEBnroNaVPjG4VXCzXgQE45FfB0tkD7UrSdMfMLj4HdOgOXg9XPBZMM5YXqvCb_EM3e9WNQUbLwWa3lib_ENDaVotBtrkb0AbhH30jFmqy0BsJwPnZ_4OGRuV8P1YwDXipLFgnYICSA8CsgOhy37Ejok5wMbdd9rsjKlcNwd1R9RGKll56So?width=256&height=139&cropmode=none" alt="Jenkins_initial"></p>
<ol start="4">
<li><p>進入 container 中取得安裝的預設密碼</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">進入 container</span></span><br><span class="line">docker exec -it &#123;container name&#125; /bin/bash</span><br><span class="line"><span class="meta"># </span><span class="language-bash">顯示預設密碼</span></span><br><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>
</li>
<li><p>選擇客製化套件安裝 ( 選擇左邊預設全裝)</p>
</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4m5nGIeTsyu5iUN2_CGgA4rinujnsw-iQP5TPJ3XwPTOZ65LirQh1oX1jnbkjK07WOWnwC1uYPEZiWuo3huJZA89zN-fmlAygcYUTcWxkygkcUKTLnyNr-JOqoeNhjg3zNZup70RBayB_MxeVqQkX9oopysyxBkOm_mq0PmXAG_6YfI93JBQS7moB_zadgAE9Z?width=256&height=139&cropmode=none" alt="jenkins_plugin_setting"></p>
<ol start="6">
<li>創建Admin 的 帳號&#x2F;密碼</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mtzgP0W95pMW1ZWyEC4VcuZHCPR-z42TbjNnNDrpfHoRRtbo7Vo7awco05KH6Ezgujl_oPsAu05rsRrbq5Uz7xGW3Wy4HeOkjeka4OZkdqwqvvhLwzOM9xDGfSdlZYKBpXBaOMpG1kSzooQKri0dhz9mZkdEirCcxFOclaBX2MAgOn9zD35F8UrcY37lsnNyj?width=256&height=138&cropmode=none" alt="createAdminUser.png"></p>
<ol start="7">
<li>儲存設定後，即可進入首頁</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mOu7W-A_TyloArSKH_UydXT4L7FCHHvSyJwK567rbLYlHkvS3B3kuJIWvqMMHNOCfFpW8JBUHFpE5DE7lndEBw09bgzyGPhLuoez0tzwKgjNhh_3JK_bWIaxOBr7XwJM5exakUtoiSE9RZEZXqRtekj3hHCQzFWg6A27FkL5ZRuS_YpZBtBhp86dNX2gDYz3A?width=256&height=134&cropmode=none" alt="homePage"></p>
<h3 id="使用-docker-compose-安裝-Jenkins"><a href="#使用-docker-compose-安裝-Jenkins" class="headerlink" title="使用 docker-compose 安裝 Jenkins"></a>使用 docker-compose 安裝 Jenkins</h3><ol>
<li>撰寫 docker-compose.yml<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">	<span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">18080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">50000</span><span class="string">:50000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">JAVA_OPTS:</span> <span class="string">-Xmx2048m</span> <span class="string">-Djava.awt.headless=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/jenkins_home:/var/jenkins_home</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/.ssh:/root/.ssh:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/.npmrc:/root/.npmrc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/.m2:/root/.m2</span></span><br></pre></td></tr></table></figure></li>
<li>啟動 dokcer-compose<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://ithelp.ithome.com.tw/articles/10202465">day05_docker04_Jenkins</a></li>
<li><a href="https://iter01.com/553208.html">三十二張圖告訴你，Jenkins構建Spring Boot 有多簡單~
</a></li>
<li><a href="https://tomgregory.com/building-a-spring-boot-application-in-docker-and-jenkins/">Building a Spring Boot application in Docker and Jenkins (part 2 of microservice devops series)</a></li>
</ol>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 utterances 在 Hexo 實現留言板功能</title>
    <url>/2022/03/04/hexo-message-board-utterances/</url>
    <content><![CDATA[<p>留言版在一般的部落格中一個常見的功能，既然使用Github製作了自己的部落格<br>順勢找了一些文章來新增這個功能</p>
<p>在參閱了許多 blogger 的文章後發現，比較常用的有以下兩種:</p>
<ul>
<li>Disqus<ul>
<li>需要去 Disqus 官網註冊 - <a href="https://disqus.com/">點我前往</a></li>
</ul>
</li>
<li>utterances<ul>
<li>與 Github Issues 做連結</li>
<li>需要登入 Github 才能夠進行留言</li>
</ul>
</li>
</ul>
<p>目前是打算使用 utterances 來實作 部落格的留言版</p>
<span id="more"></span>

<h3 id="整合-utterances"><a href="#整合-utterances" class="headerlink" title="整合 utterances"></a>整合 utterances</h3><ol>
<li>Github 建立 Repository</li>
<li>安裝 utterances - <a href="https://github.com/apps/utterances">點我前往</a></li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mf3VZ_TrvLMIzOAvwD5scehh0uCIPUsahla1ouyxXnWeuuT5H3ukvDP7hV0gVb_0gnlFJTWeW9UWGP5LXPyQTBd60fbKgxDlDQK2ADWYI5nD6b0pkEd3hfZjLFwEUWurbgWomh3aeF0BWUvSalsrsnPvcz2e_eKp3TjFC4M0aqJI5wZ9FJsnf7SILGMbJzgbp?width=660&height=261&cropmode=none" alt="utterances-install.png"><br>3. 取得授權，並選擇 步驟1 的 Repository</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mB7qi6p5Kb5d77Slb0G_jLXcoBZ6yepW2pKcSxd3Ih7_gQ4SDxI9vNpA-6V9wp_RnBN59jH0ziNmpluQFQDjnM92bizO_e_2jLgYQRxeFb7ps9tjvCvauX62h5gJLcvQsa34THbIPo5P6HAZmuIwMlGX5dwFnHIl9fLbX-dITsVKucorwYtuIJ2I8kmzdq_B5?width=480&height=660&cropmode=none" alt="utterances-select-repository.png"><br>4. 填寫對應的 configuration EX: Repository , Blog Post &amp; issue Mapping , Theme …etc</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mZW8hAhicSL9Xi4l83gr-741kqXgXqCBnmEDZ5a_ZVaCNUbsZQGTl456l7dxJUszLljpSitj43aRmX3fA0OUM58mYxGTvKuc0wL0VW-9OPS6YAn1Uz9FqzK0Q8YSWOpCQBiDHVMFUb6E5olX7bVBc-vy_rP5gqLV5Kt1WPC8gXKKIKqjtSVCpSzI9LB2H49DI?width=660&height=622&cropmode=none" alt="utterances-configuration-script.png"><br>5. 在 theme 的 _config.yml 新增參數 (blog 目前是使用 next themes)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># utterances by 2022-03-04</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在主題底下 <code>themes\next\layout\_partials</code> 的 comments.swig 中 新增其 srcipt<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">新增至</span> &#123;<span class="string">%-</span> <span class="string">if</span> <span class="string">page.comments</span> <span class="string">%</span>&#125; <span class="string">後面</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">theme.utterances.enable</span> <span class="string">%</span>&#125;</span><br><span class="line">    <span class="string">&lt;div</span> <span class="string">class=&quot;comments&quot;</span> <span class="string">id=&quot;comments&gt;</span></span><br><span class="line">        <span class="string">↓</span> <span class="string">複製上面步驟4</span> <span class="string">utterances</span> <span class="string">中產生的</span> <span class="string">script</span></span><br><span class="line">        <span class="string">&lt;script</span> <span class="string">src=&quot;https://utteranc.es/client.js&quot;</span></span><br><span class="line">            <span class="string">...</span></span><br><span class="line">        <span class="string">&lt;/script&gt;</span></span><br><span class="line">    <span class="string">&lt;/div&gt;</span></span><br><span class="line">  &#123;<span class="string">%-</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>即可看到留言板出現在文章內了</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mi1owUcX16kQYG0y6amhW5TXqG8FlrfdD5PLc08FS7crQCBUFyU0TUJQbw3YSzu8UeSz_ajqZQDOWdxIo5PwIx-HUr_r2__1nn9taGWzzXCWokVufwsWZHApHEC3maMsGRKJxd5Pf3sdT0cW0qVg7dCYdt6IdQ9ie2Z2uetNM-dX_S54E9U7_qVpFRhuWp_wy?width=660&height=313&cropmode=none" alt="utterances-message-board-result.png"></p>
<h3 id="如何讓留言板不要出現"><a href="#如何讓留言板不要出現" class="headerlink" title="如何讓留言板不要出現"></a>如何讓留言板不要出現</h3><p>因為分類&#x2F;標籤等頁面通常不需要有連言功能<br>在 markdown 的 Front-matter 把 comments 關閉</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-03-01 20:10:05</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://annkuoq.github.io/blog/2020-03-09-add-utterances-comment-widget-to-hexo/">在 Hexo 安裝 utterances 留言版</a></li>
<li><a href="https://medium.com/starbugs/gatsby-%E7%94%A8-utterances-%E6%9B%BF-gatsby-%E7%9A%84-blog-%E7%B6%B2%E7%AB%99%E7%94%B3%E8%A3%9D-github-issue-%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD-e8593318e5a3">Gatsby | 用 utterances 替 Gatsby 的 Blog 網站申裝 GitHub Issue 留言功能</a></li>
<li><a href="https://blog.kyomind.tw/hexo-blog-reply/">Hexo：新增 utterances 留言板與方案選擇思路</a></li>
<li><a href="https://utteranc.es/">utterances </a></li>
<li><a href="https://kidneyweakx.com/2019/19log-1026-hexo-com.html">Hexo Next 主題增加評論系統 utterances</a></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 調整資料夾原始碼目錄結構</title>
    <url>/2022/03/13/hexo-change-page-directory/</url>
    <content><![CDATA[<p>在預設的 Hexo 設定中，會將新的文章檔案放置於 <code>_posts</code> 的資料夾底下<br>隨的時間的推移，該資料夾會變得越來越雜亂無法管理，因此找了一下網路<br>看看有沒有甚麼方法可以做個簡單區隔，因此有的以下的調整:</p>
<span id="more"></span>
<h3 id="預設設定-根目錄的-config-yml"><a href="#預設設定-根目錄的-config-yml" class="headerlink" title="預設設定(根目錄的 _config.yml)"></a>預設設定(根目錄的 _config.yml)</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into </span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<h3 id="調整後設定-根目錄的-config-yml"><a href="#調整後設定-根目錄的-config-yml" class="headerlink" title="調整後設定(根目錄的 _config.yml)"></a>調整後設定(根目錄的 _config.yml)</h3><p>產生的文章名稱使用 :year :month 依照年月的區分，就不會把所有的文章都全部擺在 <code>_post</code> 底下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:month/:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into </span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<h3 id="驗證結果"><a href="#驗證結果" class="headerlink" title="驗證結果"></a>驗證結果</h3><p>原本的 <code>_post</code> 底下長出了年分&amp;月份，依照發佈時間即可快速分類找到當時所寫的文章</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mg2gM94oI68TB6d4KRCHRGcmssTGjYIbPMsElG3Jdav9b3HE9SiSojZUNw5WnvjWEdh8OtUX-b2JStw0q_4_oUb7ZdwxZ6t5FEcIxUMrdKJlhHwsp_EVkva03IYKKA9m6gubKmSJch7Hag0VOm7h01dTGmvE-bkLm3IXhks-2dy-MJk9RwbzMGJIWvMDHiKx8?width=250&height=256&cropmode=none" alt="hexo-directory"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><ol>
<li><a href="https://carlos.mynet.tw/%E4%BD%BF%E7%94%A8%E8%B3%87%E6%96%99%E5%A4%BE%E5%88%86%E5%B1%A4%E7%AE%A1%E7%90%86hexo%E6%96%87%E7%AB%A0%E4%B8%94%E4%B8%8D%E5%BD%B1%E9%9F%BF%E6%B0%B8%E4%B9%85%E9%80%A3%E7%B5%90/">使用資料夾分層管理Hexo文章且不影響永久連結</a></li>
<li><a href="https://mouson.im/Notes/Hexo/make-hexo-post-category-by-folder/">Hexo - 使文章依文章分類為資料夾名稱置放</a></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 備份</title>
    <url>/2022/03/12/hexo-git-backup/</url>
    <content><![CDATA[<p>使用 Hexo 撰寫文章，使用 <code>hexo generate</code> 時，會將 markdown 轉換成 html<br>在 <code>hexo deploy</code> 時會把靜態資源上傳到 github ，但並不會把 .md 檔案上傳<br>這樣如果撰寫的電腦出了問題，資料就會不覆存在。</p>
<p>網路上查詢了一下大致上的作法有 2 種:</p>
<ol>
<li>blog 的 repository 另開一個分支存取資源(如 Reference. 4)</li>
<li>使用套件 hexo-git-backup</li>
</ol>
<p>我們使用方法2，接著是以下的配置工作</p>
<span id="more"></span>

<h3 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h3><ol>
<li><p>進入blog的workspace &amp; 安裝套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>根目錄的 <code>_config.yml</code> 檔新增以下設定內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># setting git backup</span><br><span class="line">backup:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: https://github.com/&#123;username&#125;/&#123;user&#x27;s repository&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>每次需要備份時，執行指令(下述兩種都可以) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo backup</span><br><span class="line"># 簡寫</span><br><span class="line">hexo b</span><br></pre></td></tr></table></figure></li>
</ol>
<p>這樣每次撰寫部落格完後多此步驟就可以將 source 的文章保留下來。</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://cheng-yi-ting.github.io/2020/02/08/2020-02-08-HexoBackup/">Hexo 備份</a></li>
<li><a href="https://github.com/coneycode/hexo-git-backup">Github: hexo-git-backup</a></li>
<li><a href="http://www.xiaoliblog.cn/page/hexobackup.html">hexo-git-backup 博客备份及恢复</a></li>
<li><a href="https://cheng-yi-ting.github.io/2020/02/08/2020-02-08-HexoBackup/">使用git分支保存hexo博客源码到github</a></li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Annotation(標註)</title>
    <url>/2022/03/05/java-annotation/</url>
    <content><![CDATA[<p>Java 從 JDK5 開使支援了 Annotation 功能，可以提供在編譯時期提示 or 執行時期讀取的資訊。</p>
<span id="more"></span>

<h3 id="標準標註"><a href="#標準標註" class="headerlink" title="標準標註"></a>標準標註</h3><ol>
<li>@override : 提供 compiler 提醒被標註的 method 必須為 父類別 or 介面所定義之方法</li>
<li>@Deprecated : 提供 compiler 提醒被標註的 method 已經過時，建議不要再呼叫它</li>
<li>@SuppressWarnings: 抑制警告訊息 ( 可使用參數 value &#x3D; { args1, args2 …etc } 定義抑制警告類型 )</li>
<li>@FunctionalInterface: 協助檢查 interface 是否滿足 lambda 的型態 ( 為 java8 時所新增 )</li>
</ol>
<h3 id="元標註-meta-annotation"><a href="#元標註-meta-annotation" class="headerlink" title="元標註(meta-annotation)"></a>元標註(meta-annotation)</h3><p>標註使用 meta-annotation 為其他 annotation 做說明<br>meta-annotation 種類如下:</p>
<ol>
<li>@Target: 限定 Annotation 使用位置 ( ElementType )</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ANNOTATION_TYPE: meta-annotation為此類型，用來修飾註解</span><br><span class="line">METHOD: 修飾 method EX: springMVC 的 <span class="meta">@GATEMAPPING</span></span><br><span class="line">TYPE: 修飾class, interface, <span class="keyword">enum</span>, annotation  EX: java8 的 <span class="meta">@FunctionalInterface</span></span><br><span class="line">FIELD: 修飾成員變數 EX: java.persistence 的 <span class="meta">@Column</span> </span><br><span class="line">PARAMETER: 修飾方法參數 EX: springMVC 的 <span class="meta">@PathVariable</span></span><br><span class="line">CONSTRUCTOR: 修飾構造器 EX: spring 的 <span class="meta">@Autowired</span></span><br><span class="line">LOCAL_VARIABLE: 修飾區域變數 EX: spring 檢核參數的 <span class="meta">@NotNull</span> 可以用在多個場域</span><br><span class="line">PACKAGE: 修飾 <span class="keyword">package</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>@Retention: 定義了 Annotation 生命週期 ( RetentionPolicy )</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SOURCE: 只會出現在程式碼中，編譯後不會出現在class檔中 </span><br><span class="line">CLASS: 出現在程式碼中，且會編譯進class檔中，但運行期無任何效果 ( 此類型為 <span class="keyword">default</span> )</span><br><span class="line">RUNTIME: 從程式碼至到運行期間都會存在，可以使用 Reflection 機制取得 annotation 的訊息</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>@Documented: 使用 javadoc 命令生成API檔案時，如要要將標注資料加入文檔，才需要加上此註解</p>
</li>
<li><p>@Inherited: 具有繼承性，代表子類別可以拿到父類別的註解訊息<br>※ 只有 class-level annotation 可以使用, method-level 則無法</p>
</li>
<li><p>@Repeatable (java1.8新增): 在 JDK8 之前，annotation 某個位置只能出現一次，不能重複使用；但這個功能可以讓 annotation 在同個地方出現多次</p>
</li>
</ol>
<h3 id="自定義標註"><a href="#自定義標註" class="headerlink" title="自定義標註"></a>自定義標註</h3><ul>
<li>需要使用 <em><strong>@interface</strong></em></li>
<li>定義屬性，若命名為 value 時，使用時可省略屬性名稱</li>
<li>屬性需有預設值時，可以使用 <em><strong>default</strong></em> 關鍵字</li>
<li>欲在執行時期取得 標註資訊，可使用 <em><strong>java Reflection 機制</strong></em></li>
</ul>
<p>自定義 annotation 範例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CustomAnnotation &#123;</span><br><span class="line"></span><br><span class="line">	String[] value();</span><br><span class="line"></span><br><span class="line">	String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用一個 Main 方法 利用 Java Reflaction 取得 Annotation 的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationMain</span> &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">AnnotationMain</span> <span class="variable">main</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationMain</span>();</span><br><span class="line">        main.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CustomAnnotation(value = &#123;&quot;test&quot;, &quot;test2&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用反射機制取得 method 上的標註</span></span><br><span class="line">        <span class="type">CustomAnnotation</span> <span class="variable">customAnnotation</span> <span class="operator">=</span> AnnotationMain.class.getMethod(<span class="string">&quot;test&quot;</span>).getAnnotation(CustomAnnotation.class);</span><br><span class="line">        </span><br><span class="line">        String[] values = customAnnotation.value();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取得 value</span></span><br><span class="line">        System.out.println(<span class="string">&quot;value:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String value: values) </span><br><span class="line">            System.out.println(value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取得 messsage</span></span><br><span class="line">        System.out.println(<span class="string">&quot;message: &quot;</span> + customAnnotation.message());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行後會印出相對應的結果，印出 標註上的 value清單 &amp; message 的預設值 none</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">value:</span><br><span class="line">test</span><br><span class="line">test2</span><br><span class="line">message: none</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://kucw.github.io/blog/2018/6/java-annotation/">古古’s Blog Java - annotation 的使用</a></li>
<li><a href="https://openhome.cc/Gossip/Java/Annotation.html">常用標準標註</a></li>
<li><a href="https://openhome.cc/Gossip/Java/CustomizeAnnotation.html">自訂標註</a></li>
<li><a href="https://openhome.cc/Gossip/Java/ReadAnnotation.html">讀取標註資訊</a></li>
<li><a href="https://openhome.cc/Gossip/CodeData/JDK8/Annotation.html">【JDK8】Annotation 功能增強</a></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 讀取 yaml 設定檔參數</title>
    <url>/2022/03/12/springboot-load-yaml-file/</url>
    <content><![CDATA[<p>讀取客製化設定檔參數，會需要使用 @PropertySource annotation，但該標註只適用於 properties，<br>如果副檔名為 YAML 檔案，會無法解析而造成錯誤，如果要讀取該類型檔案，需要做出以下調整:</p>
<span id="more"></span>

<h3 id="前置作業-amp-環境"><a href="#前置作業-amp-環境" class="headerlink" title="前置作業 &amp; 環境"></a>前置作業 &amp; 環境</h3><ul>
<li>Springboot 2.5.2</li>
<li>maven 引入 web &amp; test dependencies<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  </span><br><span class="line">  	&lt;!-- web --&gt;</span><br><span class="line">  	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- test framework --&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">		&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">...	</span><br></pre></td></tr></table></figure></li>
<li>建立客製化的 properites : ymlProject.yml 在 <code>src/main/resources</code> 底下<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">project:</span></span><br><span class="line">  <span class="attr">yamlTest:</span> <span class="string">yamlString</span></span><br></pre></td></tr></table></figure>
<img src="https://bnz05pap002files.storage.live.com/y4mpxMFJWJBu05lfnSinkVXrUr8aA0AsajHI0gUXWTuEGN6ddymE94uSS9LTxc0CiPTIJ0QVPK5UCTI_EWhWyhqVthH2PVAxUAg8wPiBHkU8T_juUfFm1wZSzhJKuAO1bKyCT6c1CK_1ygN_edsh4YkpWAf9NwuTYsts9tzVtYdArLgaVV-xzP-uMsi_iIeBJRV?width=256&height=150&cropmode=none" alt="setting.png"></li>
</ul>
<h3 id="實作程式"><a href="#實作程式" class="headerlink" title="實作程式"></a>實作程式</h3><p>Springboot 提供 </p>
<ul>
<li><code>YamlPropertiesFactoryBean</code> 將 YAML 轉成 properties </li>
<li><code>YamlMapFactoryBean</code> 將 YAML 轉成 Map </li>
<li><code>YamlPropertySourceLoader</code> 使用 @PropertySource load YAML 檔案<br>本篇使用 <code>YamlPropertiesFactoryBean</code> 將 YAML 轉成 properties 並照原 properties 的方法解析</li>
</ul>
<ol>
<li>覆寫 PropertySourceFactory 使其可以讀取 yaml 格式資料<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆寫 propertySource 讓其可以讀取 yaml 資訊</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年3月12日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YamlPropertySourceFactory</span> <span class="keyword">implements</span> <span class="title class_">PropertySourceFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// spring 提供套件使 YAML 加載成 properties 格式</span></span><br><span class="line">		<span class="type">YamlPropertiesFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YamlPropertiesFactoryBean</span>();</span><br><span class="line">        factory.setResources(resource.getResource());</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> factory.getObject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PropertiesPropertySource</span>(resource.getResource().getFilename(), properties);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用 @Configuration &amp; @PropertySource 取得自定義yaml檔案的資料<br> factory 置換 客製化的解析設定檔方式 ; defalut 為 <strong>DefaultPropertySourceFactory</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 讀取自定義 yaml 檔格式內容</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年3月12日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:ymlProject.yml&quot;, factory = YamlPropertySourceFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectYamlConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;project.yamlTest&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String parameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> parameter;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameter</span><span class="params">(String parameter)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.parameter = parameter;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用整合測試驗證"><a href="#使用整合測試驗證" class="headerlink" title="使用整合測試驗證"></a>使用整合測試驗證</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = &#123;SpringMvcApplication.class&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoYamlSettingTest</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> ProjectYamlConfig projectYamlConfig;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testYamlSettingCase</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;load @Value:&quot;</span> + projectYamlConfig.getParameter());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://bnz05pap002files.storage.live.com/y4m2FvKxO08tEtm-PWnzkNw38EM956UqWyrtaqvfw6RdCi7Hh1VJAltWqJGfra7k-ibhes5jM83TijHiCC2eXuZlSWvY-KGSu1qI3kuGfPaxv9c1VeAINTBdwqlIG0qB8RY_Fh3pqxvH_H68xWW6lNXMMK0Bn4LLF4TaSZBx8jnfAn1cUP39VGzVx3423kbr6kA?width=660&height=268&cropmode=none" alt="result.png"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://www.baeldung.com/spring-yaml-propertysource">@PropertySource with YAML Files in Spring Boot</a></li>
<li><a href="https://matthung0807.blogspot.com/2020/10/spring-boot-propertysource-load-yaml.html">Spring Boot @PropertySource load yaml</a></li>
<li><a href="https://kknews.cc/code/j2ymvpy.html">Spring Boot中通過@PropertySource註解讀取yaml或yml配置文件</a></li>
<li><a href="https://www.cnblogs.com/rim99/p/8452175.html">两种SpringBoot加载YML配置文件的方法</a></li>
</ol>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Springboot + Mockito 完成單元測試</title>
    <url>/2022/03/09/springboot-mockito-mock-test/</url>
    <content><![CDATA[<p>Mockito 為一個廣泛使用的測試框架，當開發時如果有遇到依賴注入的情境時，往往都會啟動Server，注入實體來進行測試，但這樣的方式即為整合測試 ; 因為當 A 服務呼叫 B 服務，如果 B 服務的內容每次都不一樣，這樣會造成測試結果往往會失敗。</p>
<p>Mock 測試即為建立假的物件 ; 以 A 服務 呼叫 B 服務來說，我們把 B 服務做 mock，讓回傳的結果固定，就可以專心測試 A 服務的 情境，而不會因為 B 來影響每一次測試的結果</p>
<span id="more"></span>

<p>單元測試分成三個步驟:</p>
<ol>
<li>Arrange : 準備資料</li>
<li>Act : 執行並回傳結果</li>
<li>Assert : 驗證結果</li>
</ol>
<h3 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h3><ol>
<li>選擇 springboot 版本 <code>2.5.2</code></li>
<li>使用 Maven - pom 檔 引入 <code>spring-boot-starter-web</code> &amp; <code>spring-boot-starter-test</code><br>在 starter-test 中即包含了 JUnit 5 &amp;　mockito 框架<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  </span><br><span class="line">  	&lt;!-- web --&gt;</span><br><span class="line">  	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- test framework --&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">		&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="程式範例"><a href="#程式範例" class="headerlink" title="程式範例"></a>程式範例</h3><ul>
<li>Service</li>
</ul>
<p>新增一個服務，用來驗證 DB 取出的 使用者是否成年 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 實現玩家服務</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年3月9日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlayerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IPlayerService</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> PlayerDao playerDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPlayerAnAdult</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">Player</span> <span class="variable">player</span> <span class="operator">=</span> playerDao.getPlayerById(id);</span><br><span class="line">		<span class="keyword">if</span>(player == <span class="literal">null</span> ) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Player Not Found!&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(player.getAge() &gt;= <span class="number">18</span> )</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Dao</li>
</ul>
<p>此範例並不會真正的連線 DB，因為單元測試是要把外部相依的服務給 mock 掉，因此這裡的演示只是用 new 的形式呈現</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 實作 player DAO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年3月9日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlayerDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">PlayerDao</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Player <span class="title function_">getPlayerById</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">		<span class="type">Player</span> <span class="variable">player</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&quot;Oscar&quot;</span>, <span class="number">19</span>);</span><br><span class="line">		<span class="keyword">return</span> player;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Model</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述玩家物件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年3月9日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Player</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Player</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Unit Test</p>
</li>
</ul>
<p>本次的測試分成三個情境:</p>
<ol>
<li>驗證 使用者如果大於 18 歲，即回傳 true</li>
<li>驗證 使用者如果小於 18 歲，即回傳 false</li>
<li>驗證 如果使用者不存在，則拋出例外錯誤</li>
</ol>
<p>此處在初始化的時候，使用 Mockito 的 <code>when</code> , <code>thenReturn</code><br>假設我傳入的參數為 1L，則回傳假的物件 new Player ，而非真正的去 DB取資料</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(MockitoExtension.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlayerServiceImplTest</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Mock</span></span><br><span class="line">	<span class="keyword">private</span> PlayerDao playerDao;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@InjectMocks</span></span><br><span class="line">	<span class="keyword">private</span> PlayerServiceImpl playerService;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 測試玩家大於等於18歲, 要回傳 true</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testIsPlayerAnAdult_PlayerIsAnAdult</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// Arrange</span></span><br><span class="line">		Mockito.when(playerDao.getPlayerById(<span class="number">1L</span>)).thenReturn(<span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&quot;Oscar&quot;</span>, <span class="number">19</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// act</span></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">isPlayerAnAdult</span> <span class="operator">=</span> playerService.isPlayerAnAdult(<span class="number">1L</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// assert</span></span><br><span class="line">		assertEquals(isPlayerAnAdult, <span class="literal">true</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 測試玩家小於18歲 , 要回傳 false</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testIsPlayerAnAdult_PlayerIsNotAnAdult</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// Arrange</span></span><br><span class="line">		Mockito.when(playerDao.getPlayerById(<span class="number">1L</span>)).thenReturn(<span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&quot;Oscar&quot;</span>, <span class="number">17</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// act</span></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">isPlayerAnAdult</span> <span class="operator">=</span> playerService.isPlayerAnAdult(<span class="number">1L</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// assert</span></span><br><span class="line">		assertEquals(isPlayerAnAdult, <span class="literal">false</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 測試如果找不到玩家，要拋出 Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testIsPlayerAnAdult_PlayerNotFound</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// assert</span></span><br><span class="line">		assertThrows(RuntimeException.class,</span><br><span class="line">			()-&gt;&#123;</span><br><span class="line">				<span class="comment">// Arrange</span></span><br><span class="line">				Mockito.when(playerDao.getPlayerById(<span class="number">1L</span>)).thenReturn(<span class="literal">null</span>);</span><br><span class="line">				</span><br><span class="line">				<span class="comment">// act</span></span><br><span class="line">				playerService.isPlayerAnAdult(<span class="number">1L</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上就是 Springboot + Mockito 的演示</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://www.baeldung.com/mockito-mock-methods">Mockito’s Mock Methods</a></li>
<li><a href="https://kucw.github.io/blog/2020/2/spring-unit-test-mockito">SpringBoot - 單元測試工具 Mockito</a></li>
<li><a href="https://www.baeldung.com/junit-assert-exception">Assert an Exception is Thrown in JUnit 4 and 5</a></li>
<li><a href="https://www.gushiciku.cn/pl/p3fg/zh-tw">有啥不同？來看看Spring Boot 基於 JUnit 5 實現單元測試</a></li>
<li><a href="https://spring.io/blog/2019/10/16/spring-boot-2-2-0">Spring Boot 2.2.0</a></li>
<li><a href="https://vivifish.medium.com/java-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E5%B7%A5%E5%85%B7-mockito-e5f0ce93579d">Java Unit Test — Mockito</a></li>
</ol>
]]></content>
      <categories>
        <category>testing</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>mockito</tag>
      </tags>
  </entry>
  <entry>
    <title>Transaction rolled back because it has been marked as rollback-only</title>
    <url>/2022/04/22/hibernate-transaction-rollback-only-error/</url>
    <content><![CDATA[<p>最近在公司查詢問題時，心想著對於 Transaction 可能也不是非常了解，<br>再加上常常遇到 <font color=#ff0000><strong>Transaction rolled back because it has been marked as rollback-only</strong></font> 這個問題，<br>因此就花點時間來重現這個問題，並思考怎麼避免。</p>
<span id="more"></span>

<h3 id="重現問題場景-主要以Service為主-DAO部分就不贅述"><a href="#重現問題場景-主要以Service為主-DAO部分就不贅述" class="headerlink" title="重現問題場景(主要以Service為主, DAO部分就不贅述)"></a>重現問題場景(主要以Service為主, DAO部分就不贅述)</h3><p>Controller 呼叫 CallerService, CallerService 再呼叫 CalleeService, CalleeService 發生錯誤後，<br>rollback 回 CallerService 試圖使用 try catch 把錯誤包起來使 服務繼續執行時會出現這個錯誤訊息。</p>
<p>呼叫的Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/situation/transactionException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> CallerService callerService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		callerService.addJob();</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要的服務有兩個</p>
<ol>
<li>CallerService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 呼叫流程的服務</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年4月22日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallerService</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> CalleeService calleeService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JobDaoImpl jobDaoImpl;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Transactional</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addJob</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// insert sql</span></span><br><span class="line">		<span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Job</span>();</span><br><span class="line">		job.setId(<span class="number">3L</span>);</span><br><span class="line">		job.setDescription(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">		jobDaoImpl.addJob(job);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// call update sql service</span></span><br><span class="line">			calleeService.updateJob();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;catch Exception&quot;</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">		System.out.println(<span class="string">&quot;service done.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>CalleeService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被呼叫的 Service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年4月22日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalleeService</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JobDaoImpl jobDaoImpl;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Transactional</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateJob</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> jobDaoImpl.getJobById(<span class="number">1L</span>);</span><br><span class="line">		job.setDescription(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">		jobDaoImpl.updateJob(job);</span><br><span class="line">		<span class="comment">// 預期出錯, 檢查會不會rollback</span></span><br><span class="line">		System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>錯誤訊息如附圖:<br><img src="https://bnz05pap002files.storage.live.com/y4mq_PjejYzusEV72n3uKAJ9CzS_8ROfhfUHQPGt1iK14_3n3DRPc7eIK8sbdTs1F1bZn4Jv4vwy70ZeVQCr-I-xGOiL1D_IULG8M6bgRJg-RiZtCv474EyjZS5PKonxiyFtj3_5HChUMY6xFkfCkRUio58VLqNdpsso6f1zW3KfkhGkO3PQNfKjk2mFgOTMDuR?width=660&height=179&cropmode=none" alt="transaction-rollback-only-error.png"></p>
<p><code>@Transactional</code> 的預設值為 <code>PROPAGATION_REQUIRED</code>，我們來看一下 Spring docs 中的解釋:</p>
<blockquote>
<p>When the propagation setting is PROPAGATION_REQUIRED, a logical transaction scope is created for each method upon which the setting is applied. Each such logical transaction scope can determine rollback-only status individually, with an outer transaction scope being logically independent from the inner transaction scope. Of course, in case of standard PROPAGATION_REQUIRED behavior, all these scopes will be mapped to the same physical transaction. So a <font color=#ff0000>rollback-only marker set in the inner transaction scope does affect the outer transaction’s chance to actually commit </font> (as you would expect it to).<br>However, in the case where an inner transaction scope sets the rollback-only marker, the outer transaction has not decided on the rollback itself, and so the rollback (silently triggered by the inner transaction scope) is unexpected. A corresponding <strong>UnexpectedRollbackException</strong> is thrown at that point. This is expected behavior so that the caller of a transaction can never be misled to assume that a commit was performed when it really was not. So if an <font color=#ff0000>inner transaction (of which the outer caller is not aware) silently marks a transaction as rollback-only, the outer caller still calls commit. The outer caller needs to receive an UnexpectedRollbackException to indicate clearly that a rollback was performed instead </font>.<br>(以上段落出自 Ref.1 的 Spring docs 的 16.5.7 Transaction propagation 中的 Required 部分)</p>
</blockquote>
<p>當 CallerService 呼叫 CalleeService 時，它們就為同一個 physcal transaction<br>因此當 CalleeService發生異常時，拋出異常，並把 transaction 標記成 rollback-only<br>當 CallerService 走完流程，spring 發現 transaction 已經被標記成 rollback-only，但流程居然走完了，因此就報出錯誤</p>
<p>如上述描述，我們就接到了 UnexpectedRollbackException，因為它不符合原本該 Transaction Propagation 的機制</p>
<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p>調整的方向分成兩種類型(CallerService 的 addJob 需要寫入資料、CallerService 的 addJob 資料 rollback)</p>
<ul>
<li>CallerService 的 addJob 需要寫入資料</li>
</ul>
<ol>
<li>將 CalleeService 的流程包 try catch，處理好異常行為不要讓 exception 拋出來；transaction 就不會被註記 rollback-only</li>
<li>將 CalleeService 的 transaction 改成 <code>@Transactional(propagation = Propagation.REQUIRES_NEW)</code><br>如果是不同的 transaction ，CallerService 的 transaction 就不會被註記成 rollback-only ，造成異常<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被呼叫的 Service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年4月22日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalleeService</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JobDaoImpl jobDaoImpl;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// ( **解決方案** ) 設置為開一個新的 transactional</span></span><br><span class="line">	<span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateJob</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> jobDaoImpl.getJobById(<span class="number">1L</span>);</span><br><span class="line">		job.setDescription(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">		jobDaoImpl.updateJob(job);</span><br><span class="line">		<span class="comment">// 預期出錯, 檢查會不會rollback</span></span><br><span class="line">		System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>CallerService 的 addJob 資料 rollback</li>
</ul>
<ol>
<li>調整業務流程，把 CallerService 的 catch 在 throw exception 出去</li>
<li>在 CallerService 的 catch 中手動觸發 rollback，讓 method 結束後執行 rollback 讓 DB 還原<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 呼叫流程的服務</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年4月22日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallerService</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> CalleeService calleeService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JobDaoImpl jobDaoImpl;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Transactional</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addJob</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// insert sql</span></span><br><span class="line">		<span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Job</span>();</span><br><span class="line">		job.setId(<span class="number">3L</span>);</span><br><span class="line">		job.setDescription(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">		jobDaoImpl.addJob(job);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// call update sql service</span></span><br><span class="line">			calleeService.updateJob();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;catch Exception&quot;</span>);</span><br><span class="line">			<span class="comment">// ( **解決方案** )設定手動回滾</span></span><br><span class="line">			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">		&#125;		</span><br><span class="line">		System.out.println(<span class="string">&quot;service done.&quot;</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/html/transaction.html">Spring- 16.Transaction Management</a></li>
<li><a href="https://www.cnblogs.com/dirgo/p/11421828.html">Spring事务嵌套引发的血案—Transaction rolled back because it has been marked as rollback-only</a></li>
<li><a href="https://yunlongn.github.io/2019/05/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9D%91Transaction-rolled-back-because-it-has-been-marked-as-rollback-only/">记一次事务的坑 Transaction rolled back because it has been marked as rollback-only</a></li>
<li><a href="https://www.796t.com/article.php?id=51988">SpringBoot事務註解@Transactional 事物回滾、手動回滾事物</a></li>
</ol>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot 整合 mybatis</title>
    <url>/2022/04/09/springboot-mybatis/</url>
    <content><![CDATA[<p>Mybatis 為一個 ORM（Object Relational Mapping) 框架，簡單易學<br>接下來藉由一系列步驟，實作 Springboot 搭配 mybatis 取得 database 的資料</p>
<span id="more"></span>

<h3 id="使用環境"><a href="#使用環境" class="headerlink" title="使用環境"></a>使用環境</h3><ul>
<li>Springboot 2.5.2</li>
<li>Mybatis 3.5.5 (使用 mybatis-spring-boot-2.1.3)</li>
<li>h2 database 便於測試</li>
</ul>
<p>對應之pom檔之 dependencies 如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">... 略</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- H2 database for demo --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- test framework --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">...略</span><br></pre></td></tr></table></figure>

<h3 id="實作範例"><a href="#實作範例" class="headerlink" title="實作範例"></a>實作範例</h3><ol>
<li><p><code>application.yml</code> 設定 H2 database 的連線資訊</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">h2:</span></span><br><span class="line">    <span class="attr">console:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/h2-console</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>src/main/resources</code> 底下建立 h2 database 的 資料表資料 JOB &amp; 預先寫入預設值<br><code>schema.sql</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 職業類別</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> JOB(</span><br><span class="line">	ID <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	DESCRIPTION <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><code>data.sql</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * add job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> JOB(DESCRIPTION)<span class="keyword">VALUES</span>(<span class="string">&#x27;engineer&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> JOB(DESCRIPTION)<span class="keyword">VALUES</span>(<span class="string">&#x27;doctor&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>新增 entity 物件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> description;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.description = description;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>創建 Mapper 介面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JobMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Select(&quot;SELECT * FROM JOB&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;id&quot;,  column = &quot;ID&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;description&quot;, column = &quot;DESCRIPTION&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    List&lt;Job&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Select(&quot;SELECT * FROM JOB WHERE ID =#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;id&quot;,  column = &quot;ID&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;description&quot;, column = &quot;DESCRIPTION&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">	Job <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Update(&quot;UPDATE JOB SET DESCRIPTION=#&#123;description&#125; WHERE ID =#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Job job)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>以下注入使用 <code>@Mapper</code> or 統一在 啟動類加上  <code>@MapperScan(&quot;com.demo.mapper&quot;)</code> 針對某個 package 底下的檔案進行掃描，如果已經使用 mapperScan 則不需在每個 mapper 個別下 <code>@Mapper</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.demo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootMybatisApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		SpringApplication.run(SpringbootMybatisApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>撰寫測試情境，利用 <code>@SpringBootTest</code> 來整合測試，是否可以抓取到對應的資料<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JobMapperTest</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JobMapper jobMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(jobMapper.getById(<span class="number">2L</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span> &#123;</span><br><span class="line">		List&lt;Job&gt; jobs = jobMapper.getAll();</span><br><span class="line">		System.out.println(jobs);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Job</span>();</span><br><span class="line">		job.setId(<span class="number">2L</span>);</span><br><span class="line">		job.setDescription(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">		jobMapper.update(job);</span><br><span class="line">		assertTrue(<span class="string">&quot;test&quot;</span>.equals(jobMapper.getById(<span class="number">2L</span>).getDescription()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
Update的部分用 Assert 斷言驗證值是否有修改。<br>執行後，發現可以取得 DB 的 清單，如下圖:<br><img src="https://bnz05pap002files.storage.live.com/y4m0KKesdK0iQ_EfFtGD5Wz21wDvvEHe0BQsvyyZc7hvrRvhH1fECKkGa_wCu3LTFEggeX49t2QHmUIhFVrgEhxPshsRJEvhQ_JO6Vzdm5m47GSFdtivUxc3dosVGHfDlxMiN7CWZSZaa0PsHh7AltFS4QJyw6Isgz04XBEhX2bV1XeHdb4ZcFE13Vq23XXkutq?width=660&height=292&cropmode=none" alt="mybatis-result"></li>
</ol>
<h3 id="使用-XML-的方式撰寫SQL"><a href="#使用-XML-的方式撰寫SQL" class="headerlink" title="使用 XML 的方式撰寫SQL"></a>使用 XML 的方式撰寫SQL</h3><p>除了使用 Annotation 的方式之外，也可以將SQL與java檔案分開獨立撰寫</p>
<ol>
<li><p><code>application.yml</code> 新增配置 xml 之 package</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mybatis mapper location</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">mapper/*.xml</span>   </span><br></pre></td></tr></table></figure>
</li>
<li><p>本篇的 JobMapper 新增方法 (系統會根據method name 對應 xml 的 id tag  ex: <code>&lt;select id=&quot;xxx&quot;&gt;</code> )</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 系統會根據介面的method name 去 application.yml 的 mapper-location 的 XML 中尋找對應的sql</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Job <span class="title function_">getByIdUseXml</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>撰寫 xml (其 id 會與 上述的 mapper 中的 method name 對應)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.demo.mapper.JobMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByIdUseXml&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.demo.entity.Job&quot;</span>&gt;</span></span><br><span class="line">		SELECT * FROM JOB WHERE ID = #&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>上述的寫法可以與 annotation 一般產生同樣的效果</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://autoposter.pixnet.net/blog/post/121469360">spring Boot(六):如何優雅的使用mybatis</a></li>
<li><a href="https://github.com/mybatis/spring-boot-starter/releases">github - mybatis&#x2F;spring-boot-starter</a></li>
</ol>
]]></content>
      <categories>
        <category>orm</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet Filter 使用</title>
    <url>/2022/04/04/servlet-filter/</url>
    <content><![CDATA[<p>為 Servlet 中的其中一種高級特性 , 可用於 servlet 以外對於 request &amp; resposne 進行過濾, 甚至是修改其內容<br>Filter 可以同時存在很多個 , 多個 Filter 就組成了 FilterChain</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mWO6JRUFd29vWlVMojv_Zk5aHsoU-QryrWBDS6-yVashakMDUhYIlun5KMeuO18q6ljkEVtpcbWFwIWMuCwGdPp1hhqHXdQ4Vvv1LvGaB1eCkp6-NBxrwdtrlSpbRf1JTUO0x1ketfWGcd4FWnEDMMDMXeKJ9wcYGSGUqIZGbTIMJTSCXXYodmZjej2oSu2om?width=621&height=271&cropmode=none" alt="servlet-filter.png"></p>
<span id="more"></span>

<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ol>
<li>使用 Maven :  <code>pom.xml</code> 引入 servlet-api<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;!-- Servlet --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Filter-實現"><a href="#Filter-實現" class="headerlink" title="Filter 實現"></a>Filter 實現</h3><ol>
<li>Filter 需要實現 javax.servlet.Filter 介面 ( 該介面有3個方法 )</li>
</ol>
<ul>
<li>init(FilterConfig filterConfig)</li>
<li>doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</li>
<li>destory()</li>
</ul>
<p>其中 init() &amp; destory() 只會被呼叫一次 (<strong>The default implementation takes no action</strong>),<br>而 doFilter() 每次請求時都會被呼叫</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;project filter&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 撰寫處裡的邏輯</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>設定配置 ( 使用 xml or annotation )<br>(方法一) 在 <code>web.xml</code> 需要進行設定 ( Servlet 2.5 )<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://Java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>testFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.demo.filter.TestFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>testFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><code>&lt;filter&gt;</code> 跟 <code>&lt;filter-mapping&gt;</code> 的名字必須匹配</li>
<li><code>&lt;url-pattern&gt;</code> 設定 URL規則 , 可以使用 <code>*</code> (萬用字元)</li>
<li><code>&lt;dispatcher&gt;</code> 設定到達 servlet 的方式, 有4種 &#x3D;&gt; REQUEST <strong>(預設)</strong>, FORWARD, INCLUDE, ERROR ( 根據不同情境使用)</li>
<li>若有設定 <code>&lt;url-pattern&gt;</code> &amp; <code>&lt;dispatcher&gt;</code> , 它們兩者的條件要<strong>同時符合</strong>, 該 Filter 才會生效</li>
</ul>
<p>(方法二) 除了 xml 之外 , 也可以使用 @WebFilter() 的方式 ( Servlet 3.0 才有)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;project filter&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 撰寫處裡的邏輯</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Filter-執行順序"><a href="#Filter-執行順序" class="headerlink" title="Filter 執行順序"></a>Filter 執行順序</h3><ul>
<li>如果都是設定 xml 的情況下 , 由 <code>web.xml</code> 中的 <code>&lt;filter-mapping&gt;</code> 宣告順序依序執行</li>
<li>如果都是設定 <code>@WebFilter</code> 的情況下 , 由 ClassName 的順序來執行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SecondaryFilter.java</span><br><span class="line">ThirdFilter.java</span><br></pre></td></tr></table></figure></li>
<li>如果混用的情況底下 , 會先依照 <code>web.xml</code> 的宣告順序後, 再依照 ClassName 的方式</li>
</ul>
<p>基本上一個專案最好統一一種方式處理</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://openhome.cc/Gossip/ServletJSP/Filter.html">關於過濾器</a></li>
<li><a href="https://www.concretepage.com/java-ee/jsp-servlet/how-to-use-filter-in-servlet-3-with-webfilter-annotation">How to Use Filter in Servlet 3 with @WebFilter Annotation</a></li>
<li><a href="https://openhome.cc/Gossip/ServletJSP/FilterImplSetting.html">Filter 的實作與設定</a></li>
<li><a href="http://allenwu.logdown.com/posts/220574-filter-annotation-execution-order">Filter Annotation 執行順序</a></li>
<li><a href="https://www.twblogs.net/a/5b7dafda2b71773f4f185e7a">【Servlet】Filter深入講解及實例研究</a></li>
</ol>
]]></content>
      <categories>
        <category>servlet</category>
      </categories>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 讀取 properties 設定檔參數</title>
    <url>/2022/03/11/springboot-load-properties-file/</url>
    <content><![CDATA[<p>Springboot 在 讀取設定檔參數有 3 種方式 ( 格式有 properties &amp; yml 本篇使用 properties )<br>( Springboot 預設配置檔案位置在 <code>src/main/resources/application.properties</code>)</p>
<p>如果需要指定 設定檔 需加上 @PropertySource 即可<br>※ 該 Annotation 只能夠指定 properties，因此如果需要指定 yml 檔需要另外實作</p>
<p>以下來撰寫 3個方式的寫法:</p>
<span id="more"></span>

<h3 id="前置作業-amp-環境"><a href="#前置作業-amp-環境" class="headerlink" title="前置作業 &amp; 環境"></a>前置作業 &amp; 環境</h3><ul>
<li>Springboot 2.5.2</li>
<li>maven 引入 web &amp; test dependencies<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  </span><br><span class="line">  	&lt;!-- web --&gt;</span><br><span class="line">  	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- test framework --&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">		&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">...	</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>在預設的 application.properites 加入參數<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">project.parameter</span> = <span class="string">test</span></span><br></pre></td></tr></table></figure></li>
<li>建立客製化的 properites : test.properties 在 <code>src/main/resources</code> 底下<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">project.parameter</span> = <span class="string">test</span></span><br></pre></td></tr></table></figure>
<img src="https://bnz05pap002files.storage.live.com/y4mAxeVYT8ncJ7Ivjb7MJX5CoaNpca8B2VyFU2zEX6L8ccQHQjZxyGxcau8wLyqWI597-GQhpK_vpq5oHpDbu6DNSsKCP4IoVk9KOQri5l_H7DminfZi8DBxNDioEZ9RTWgpimfBU8LN-3xNPivdoLa2JR6LVa__ILGpE0RdRtelWa1C9SSPnXYatCaVbqB_bm_?width=256&height=113&cropmode=none" alt="resources.png"></li>
</ol>
<h3 id="1-使用-Value-Annotation-讀取檔案"><a href="#1-使用-Value-Annotation-讀取檔案" class="headerlink" title="1. 使用 @Value Annotation 讀取檔案"></a>1. 使用 @Value Annotation 讀取檔案</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@PropertySource(&quot;classpath:test.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;project.parameter&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String parameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> parameter;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameter</span><span class="params">(String parameter)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.parameter = parameter;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-使用-Enviroment-介面取得設定檔資訊"><a href="#2-使用-Enviroment-介面取得設定檔資訊" class="headerlink" title="2. 使用 Enviroment 介面取得設定檔資訊"></a>2. 使用 Enviroment 介面取得設定檔資訊</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@PropertySource(&quot;classpath:test.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectEnvConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">    Environment environment;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getParameterValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;project.parameter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-使用-ConfigurationProperties-annotation-讀取檔案"><a href="#3-使用-ConfigurationProperties-annotation-讀取檔案" class="headerlink" title="3. 使用 @ConfigurationProperties annotation 讀取檔案"></a>3. 使用 @ConfigurationProperties annotation 讀取檔案</h3><p>ConfigurationProperties 可以將設定檔 mapping 成一個實體類別<br>使用該 annotation 建議引入對應的 dependencies</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;   </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;project&quot;)</span></span><br><span class="line"><span class="comment">// @PropertySource(&quot;classpath:test.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectConfigurationPropertiesConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String parameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> parameter;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameter</span><span class="params">(String parameter)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.parameter = parameter;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="驗證結果"><a href="#驗證結果" class="headerlink" title="驗證結果"></a>驗證結果</h3><p>使用一個簡單的整合測試來跑上述的結果查看是否可以取得設定檔的內容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoSettingTest</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> ProjectConfig projectConfig;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> ProjectEnvConfig projectEnvConfig;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> ProjectConfigurationPropertiesConfig projectConfigurationPropertiesConfig;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testSettingCase</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;load @Value:&quot;</span> + projectConfig.getParameter());</span><br><span class="line">		System.out.println(<span class="string">&quot;load Enviroment interface:&quot;</span> + projectEnvConfig.getParameterValue());</span><br><span class="line">		System.out.println(<span class="string">&quot;load @ConfigurationProperties:&quot;</span> + projectConfigurationPropertiesConfig.getParameter());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://bnz05pap002files.storage.live.com/y4m-JMnLiItOrZFNEkD0b5sW373Q8AKyQtKXW3jXxLt3B2RkMuTv7XfmxHXiZBQ4PJIbpFwxUzYw5Mus-4QX3MZIWBOEBj3pBufCERPt0T6L-FZ9-ORRYxKKXtfD34DgicSi4d_oga5M8wj4Xt492iRlR-a9O-kppMrY5m-jDigjaJv54hQyWmv5P63KbE7sW-3?width=660&height=257&cropmode=none" alt="demo-result.png"></p>
<h3 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a>錯誤訊息</h3><ol>
<li>如果設定檔的參數無法對應到 java 檔的設定時，會拋出 Could not resolve placeholder xxx 的訊息<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Could not resolve placeholder &#x27;project.parameter&#x27; in value &quot;$&#123;project.parameter&#125;&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://iter01.com/587071.html">【springboot讀取配置檔案】@ConfigurationProperties、@PropertySource和@Value</a></li>
<li><a href="https://iter01.com/515254.html">Spring Boot讀取配置檔案的幾種方式
</a></li>
</ol>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot整合swagger2產出API開發文件</title>
    <url>/2022/04/24/springboot-swagger-api-docs/</url>
    <content><![CDATA[<p>之前遇過的專案，前輩有使用過 Swagger 這個工具來讓 API 資訊文件化<br>最近剛好有個機會又需要重新來熟悉這個套件，因此花了點時間記錄一下重新學習的過程<br>目前公司專案使用的版本為 2.9.2，因此本篇也會以該版本為例進行實作</p>
<span id="more"></span>

<h3 id="專案配置"><a href="#專案配置" class="headerlink" title="專案配置"></a>專案配置</h3><ul>
<li>Springboot 2.5.2</li>
<li>Swagger 2.9.2</li>
<li>JDK 版本 11</li>
</ul>
<ol>
<li><p>Maven Pom 引入對應的 dependencies</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line"><span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>	</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立配置類別 SwaggerConfig</p>
</li>
</ol>
<ul>
<li>可以 創建不同 Docket 的 <code>@Bean</code> 根據業務場景進行分類(搭配掃描不同package切分呈現內容)</li>
<li>可以設定 掃描 特定的 package 或 符合規則之 URL 才顯示於畫面</li>
<li>可以設定 swagger 是否啟動的開關 (可以在<code>application.properties</code> 配置 <code>swagger.enable = true</code>)</li>
<li>可以設定 swagger API 畫面顯示資訊</li>
<li>可以調整 UI 顯示之資訊量<ul>
<li><font color=#ff0000>supportedSubmitMethods() 可以決定是否要顯示 Try it out 的按鈕，讓使用者用 Web 試打 API</font></li>
</ul>
</li>
<li>可以設定 swagger 是否顯示預設的 response messages</li>
<li>可以設定 swagger tags 為 API 做群組分類<br>  Hint: swagger3 後提供 annotation 可以直接加於controller直接使用(詳細查看Ref. 4)<br>  <code>@Tag(name = &quot;User&quot;, description = &quot;the User API with description api tag&quot;)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 撰寫Swagger的設定檔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年4月23日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;swagger.enable&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> swaggerEnable;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 配置 Swagger 設定</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">			<span class="comment">// 決定是否要顯示預設的 response message ( ex: 200, 201, 403, 404 ...etc )</span></span><br><span class="line">        	.useDefaultResponseMessages(<span class="literal">false</span>)</span><br><span class="line">			<span class="comment">// 設定開關讓配置參數決定swagger是否啟用</span></span><br><span class="line">			.enable(swaggerEnable)</span><br><span class="line">			<span class="comment">// swagger Spec 右上角的 Select a spec 顯示之 groupName</span></span><br><span class="line">        	.groupName(<span class="string">&quot;Swagger Demo API&quot;</span>)</span><br><span class="line">			.apiInfo(apiInfo())</span><br><span class="line">			.select()</span><br><span class="line">			<span class="comment">// 可以透過掃特定 package 顯示</span></span><br><span class="line">			.apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.demo.situation.swaggerExample.controller&quot;</span>))</span><br><span class="line">			<span class="comment">// 可以掃特定的 url 才顯示於 swagger ( 只顯示swaggerTest開頭的 API )</span></span><br><span class="line">			.paths(PathSelectors.ant(<span class="string">&quot;/swaggerTest/**&quot;</span>))</span><br><span class="line">			.build()</span><br><span class="line">			<span class="comment">// 定義 swagger API tags 可以用於群組分類</span></span><br><span class="line">			.tags(</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;User&quot;</span>, <span class="string">&quot;the User API with description api tag&quot;</span>),</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;Job&quot;</span>, <span class="string">&quot;the Job API with description api tag&quot;</span>)</span><br><span class="line">			)</span><br><span class="line">		;                                           </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 配置 Swagger API 資訊</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">			.title(<span class="string">&quot;SWAGGER API規格&quot;</span>)</span><br><span class="line">			.description(<span class="string">&quot;練習用Swagger呈現API規格&quot;</span>)</span><br><span class="line">			.build()</span><br><span class="line">			;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 設定 Swagger UI 畫面顯示邏輯</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> UiConfiguration <span class="title function_">uiConfig</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> UiConfigurationBuilder.builder()</span><br><span class="line">			.defaultModelsExpandDepth(-<span class="number">1</span>)</span><br><span class="line">			<span class="comment">// 如果 submitMethods 放入空陣列，就會把 Try it out 按鈕移除</span></span><br><span class="line">			<span class="comment">// .supportedSubmitMethods(new String[] &#123;&#125;)</span></span><br><span class="line">			.build();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>撰寫 Controller</li>
</ol>
<ul>
<li><p><code>@Api</code>: 將 class 標記為 swagger 的資源</p>
<ul>
<li>value: 描述群組 ; 隱藏式的 tag , 如果沒有設立 tags , 就自成一個群組</li>
<li>tags: 可以跟 <code>SwaggerConfig.java</code> 的 <code>tags()</code> 配置綁定做群組分類</li>
</ul>
</li>
<li><p><code>@ApiOperation</code>: 用於method level, 描述API介面</p>
<ul>
<li>value: API簡介</li>
<li>note: API描述</li>
</ul>
</li>
<li><p><code>@ApiParam</code>: Input 參數描述</p>
<ul>
<li>name: 參數命名</li>
<li>value: 參數描述</li>
</ul>
</li>
<li><p><code>@ApiResponses</code>: 描述多種 Response 的操作行為，為多個 <code>@ApiResponse</code> 的集合</p>
</li>
<li><p><code>@ApiResponse</code>: 描述 Response 的操作行為</p>
<ul>
<li>code: HTTP status</li>
<li>message: 提供可讀性高的描述資訊</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試 swagger API 用法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年4月24日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// value: 類別檔案說明 ; tag: 可以針對不同類型功能做分群</span></span><br><span class="line"><span class="meta">@Api(value = &quot;SWAGGER控制器類別&quot;, tags= &#123;&quot;User&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/swaggerTest&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;更新使用者資訊&quot;, notes = &quot;根據XXX場景，更新使用者資訊&quot;, response = UpdateUserInfoViewBean.class)</span></span><br><span class="line">	<span class="meta">@ApiResponses(value = &#123;@ApiResponse(code = 200, message = &quot;用戶資訊&quot;), </span></span><br><span class="line"><span class="meta">						   @ApiResponse(code = 500, message = &quot;異常資訊&quot;)&#125;)</span></span><br><span class="line">	<span class="meta">@PutMapping(value = &quot;/user&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">	<span class="keyword">public</span> UpdateUserInfoViewBean <span class="title function_">updateUserInfo</span><span class="params">(<span class="meta">@ApiParam(name=&quot;updateUserInfoParamBean&quot;, value = &quot;更新使用者參數&quot;)</span><span class="meta">@RequestBody</span> UpdateUserInfoParamBean paramBean)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">UpdateUserInfoViewBean</span> <span class="variable">viewBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateUserInfoViewBean</span>();</span><br><span class="line">		</span><br><span class="line">		viewBean.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">		viewBean.setMessage(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> viewBean;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>撰寫 Controller 對應的 Request 參數配置</li>
</ol>
<ul>
<li><p><code>@ApiModel</code>: 描述 Swagger Model 的資訊</p>
<ul>
<li>value: 別名</li>
<li>description: model 描述</li>
</ul>
</li>
<li><p><code>@ApiModelProperty</code>: 描述 Model 的參數資訊</p>
<ul>
<li>name: 參數名稱</li>
<li>value: 參數描述</li>
<li>required: 是否為必填欄位 ( 預設值: false)</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 傳入 Request 參數物件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年4月24日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;UpdateUserInfoParamBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateUserInfoParamBean</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 用戶流水碼</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;id&quot;,value = &quot;客戶流水碼&quot;, required = true)</span></span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 備註</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;note&quot;,value = &quot;備註&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String note;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getNote</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> note;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNote</span><span class="params">(String note)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.note = note;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>撰寫 Controller 對應的 Response 參數配置</p>
<p> 參數配置與 Request 的 Annotation 相似，請參考 4. 的描述</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回傳 Response 物件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年4月24日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;UpdateUserInfoViewBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateUserInfoViewBean</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 用戶名稱</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;name&quot;,value = &quot;使用者姓名&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 更新結果</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;result&quot;,value = &quot;更新結果&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String result;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResult</span><span class="params">(String result)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.result = result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="驗證結果-amp-使用方式"><a href="#驗證結果-amp-使用方式" class="headerlink" title="驗證結果 &amp; 使用方式"></a>驗證結果 &amp; 使用方式</h3><p>以本地測試來說，連接的網址如下: <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p>
<p>得到的畫面如下圖所示:</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mZI3QMiv0Yh8LiEN47-k82v5t7YjtNT5zAO6p10RWlflGj1xkkOAHo3FHxLOOHyz0sSAXbfzYErrnTlps3zri2nMRsniHzTgVbJMwXoXIKTHQPKXDnSVqwtw6Jkys_baYe9k5AQWSQgxonMGe2WtsrSoPDUBT30YR0H9epBvayDdvlbq4JM9azeognvgcKs-i?width=660&height=400&cropmode=none" alt="swagger-ui-page.png"></p>
<ol>
<li>接下來我們點開一個API的規格查看一下內部的資訊</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mmB-9k_fW-ouQCZZFllPF0v8zA8viNB6jzrftVBC3C35um62Wo06kKVwD5iGRAMNQz_LaAYUOs6fWJyndfLOSyMY6qgFC6xGBVTu2_xG8BuPztDsfEo6ohcRF9nhB0csOUFBA-k1ySZw4I7SPyXbePfaJVNaHP-t8oucBjUxfECSdaib8h5-qorBMkIeSPR61?width=1024&height=681&cropmode=none" alt="swagger-custom-api.png"></p>
<ol start="2">
<li>並且點擊右上角的 Try it out 按鈕就可以試打我們的API</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4moaidY72CjG-gNuuYfQqzyr6XoMMNa0JvrmFBoma-67EQhOqTcHJWM1wwB50PtHN7xfZBmHB6f0yaBUWeG7ZvfNbI8pI2dMM2mVwn3EbYCU-yr-G9kTwPoEXUTDLlsyditz9wzKT9owQfeJYkbNNrj0cZOXiqMea1XOSTU6ld-4y3rdnIPoqNElNQoBLahu7c?width=660&height=436&cropmode=none" alt="swagger-custom-api-Try-it-out.png"></p>
<ol start="3">
<li>最後再查看下方的 Response 就可以得到結果</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mbdN08vj5lGpHHhA9ZKDIK_TR_GLLA_0pjTjjLBexUlcsiY0RVOwTnOfQBPffgSNuiMyCTx6LexftI3JXssIh_JkKb0lL_yrwwIlL54OvuWDLUxZgEBLA0nfYQOrKoskGBClSzg6ADCHpP0T0PSIxTFBowB9WNowzczoCTbdKc1mQcP016DBbWoqcn-r2dmSA?width=1024&height=511&cropmode=none" alt="swagger-custom-api-response.png"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://swagger.io/">swagger.io</a></li>
<li><a href="https://b0212066.pixnet.net/blog/post/215996424-swagger-2%E4%BD%BF%E7%94%A8%E7%AD%86%E8%A8%98">Spring Boot Swagger 2使用筆記</a></li>
<li><a href="https://blog.51cto.com/ewwerpm/4915407">swagger2里去掉Models</a></li>
<li><a href="https://www.baeldung.com/java-swagger-api-description-deprecated">Swagger @Api Description Is Deprecated</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10191287">Day 05 - 增加 Swagger 來提供線上版 API 規格說明</a></li>
<li><a href="https://www.796t.com/content/1545831370.html">Swagger2常用註解及其說明</a></li>
<li><a href="https://stackoverflow.com/questions/30047129/swagger-springfox-always-generates-some-response-messages-401-403-by-defa">Swagger - Springfox always generates some response messages (401,403…) by default. How can I remove them?</a></li>
</ol>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 使用 maven 參數來切換不同環境</title>
    <url>/2022/03/28/springboot-maven-profile/</url>
    <content><![CDATA[<p>一般的團隊的程式會存在於不同的環境， EX: DEV , PROD …etc<br>以 Springboot 而言，可以使用 profiles 參數來根據啟動時載入不同參數來切換環境</p>
<span id="more"></span>

<h3 id="使用-application-properties"><a href="#使用-application-properties" class="headerlink" title="使用 application.properties"></a>使用 application.properties</h3><ol>
<li>springboot 有預設的 application.properties ，可以放統一的共通環境設定</li>
<li>根據不同環境新增不同的 application-{profile}.properties 至 <code>src/main/resources</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">application-dev.properties</span><br><span class="line">application-prod.properties</span><br></pre></td></tr></table></figure></li>
<li>啟動時下參數 指令要啟動的參數 EX: <code>-Dspring.profiles.active=prod</code><br>它就會去抓取 <code>src/main/resources</code> 底下所對應的 設定檔並把參數做覆蓋<br>以下範例以 Eclipse 啟動服務為例:</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4m6-0DZiIdWwEV76IoTB-YEin8AGtjl0nA0HS-yy9EhY8AzPL-KmHUonKz7JDS0ifzQWPBw-P-r8OGtu6-Km5pl88ncCQEyp4fYrPUchsj6uz6v2-aIehMpdX_CqIGOqTSnuhgjADfPBx9z3ZhwfPYnrHmRO4gdh3MmI6oq9XodIqhuBx0vPZDmllATLk7oFFE?width=256&height=152&cropmode=none" alt="eclipse-profiles.png"></p>
<p>即可根據不同的環境切換不同的參數設定</p>
<h3 id="使用-maven-參數打包"><a href="#使用-maven-參數打包" class="headerlink" title="使用 maven 參數打包"></a>使用 maven 參數打包</h3><p>上述是根據啟動時，我們也可以針對打包時，對打包檔根據不同參數處理一樣的事物，以下以 maven 為例</p>
<ol>
<li>pom檔新增對應的環境設定<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   &lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;dev&lt;/id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;profile.active&gt;dev&lt;/profile.active&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">        &lt;activation&gt;</span><br><span class="line">            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">        &lt;/activation&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;prod&lt;/id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;profile.active&gt;prod&lt;/profile.active&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure></li>
<li>根據不同環境新增不同的 application-{profile}.properties 至 <code>src/main/resources</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">application-dev.properties</span><br><span class="line">application-prod.properties</span><br></pre></td></tr></table></figure></li>
<li>修改 application.properties，以參數的形式覆蓋其設定檔資料<br>使用 <code>@profile.active@</code> (Reference.4) 將maven 參數跟 properties 綁定<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.profiles.active= @profile.active@</span><br></pre></td></tr></table></figure></li>
<li>使用 maven 使令打包加上 -P {profile} 切換對應環境<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn package -Pprod</span><br></pre></td></tr></table></figure></li>
</ol>
<p>即可根據不同的環境切換不同的參數設定打包</p>
<h3 id="使用-maven-參數打包-排除非指定環境檔案"><a href="#使用-maven-參數打包-排除非指定環境檔案" class="headerlink" title="使用 maven 參數打包 排除非指定環境檔案"></a>使用 maven 參數打包 排除非指定環境檔案</h3><p>如果使用上述 maven 方式打包，我們使用反組譯工具查看一下打包後的 jar 檔<br>發現所有的設定檔案都被打包上去了，如下圖:</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mM5ezuSfJbqGkCKKjKs5QU23OvCt_Tv4dP80ermD4-9ZB7oa981MPwKu8-nvZSAiYj33V09pWFWMjbi7jSKhdoxJNUWfgxO5AoL8IBEPxaIfaM2oyTvyn6m17AU46Gc85ZsFkMuHC7nDDFuXRbMPuHZin3NHkVaqpNWViMLcfoxPaYZZ0JHgWJ1GiWLPRf8-P?width=444&height=303&cropmode=none" alt="allproperties.png"></p>
<p>但我們只需要自己環境所需的設定檔案即可<br>因此我們可以在 maven 的 pom 檔的 build 做調整</p>
<ul>
<li>將所有特定環境的 application.properites 檔案排除 (需要保留統一的 application.properties)</li>
<li>將指定環境的 application.properites 萃取後加入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;build&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">	&lt;resource&gt;</span><br><span class="line">		&lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">		&lt;!-- 排除全部的application設定檔--&gt;		        </span><br><span class="line">		&lt;excludes&gt;</span><br><span class="line">		    &lt;exclude&gt;application-*.properties&lt;/exclude&gt;</span><br><span class="line">		&lt;/excludes&gt;		             	</span><br><span class="line">	&lt;/resource&gt;</span><br><span class="line">	&lt;resource&gt;</span><br><span class="line">		&lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">		&lt;!-- 複製maven參數定義的環境變數設定檔加入打包檔--&gt;</span><br><span class="line">		&lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">		&lt;includes&gt;</span><br><span class="line">		    &lt;include&gt;application-$&#123;profile.active&#125;.properties&lt;/include&gt;</span><br><span class="line">		&lt;/includes&gt;</span><br><span class="line">	&lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line"></span><br><span class="line">      ... </span><br><span class="line">  &lt;/build&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>排除後，針對特定環境打包的 jar 最後就會呈現以下結果:<br><code>mvn package -Pprod</code></p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mhuCbDWN200FrLEUBG1X5pjs9I_Fevk4Olf_QlVjyhMSMUaXXdUx2x7SQQ-e-R-GylLQKY8o4L6c24wD79GY91CXxnXOLt5s4FXdEAqLhH5kWCstAjpJLxamlrL1Oz94yOgq1KnrCGYZg_mc4_c29tLHV4q5qeeQs8HT4ssK8GIwl-firS_GwEyldlHsuAvZt?width=474&height=338&cropmode=none" alt="excludeUnusedProperties.png"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://www.gushiciku.cn/pl/2Wno/zh-tw">Maven Profile 與 Spring Profile 管理多環境打包</a></li>
<li><a href="https://www.baeldung.com/spring-profiles">Spring Profiles</a></li>
<li><a href="https://medium.com/learning-from-jhipster/8-spring-boot%E7%9A%84properties%E8%88%87profile-8cab3cd06856">Spring Boot的Properties與Profile</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/1.4.x/reference/html/howto-properties-and-configuration.html">Properties &amp; configuration</a></li>
</ol>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item15 - 使類別 &amp; 成員 的 可訪問性最小化</title>
    <url>/2022/06/26/effective-java-item15/</url>
    <content><![CDATA[<p>此為閱讀 Effective Java 3rd 所記錄的學習歷程<br>Item15 : 使類別 &amp; 成員 的 可訪問性最小化</p>
<p>設計一個模組是否良好的重要因素在於對於外部組件而言，是否隱藏內部數據&amp;實作細節(即為封裝 or 信息隱藏)。<br>其好處為降低 兩個模組之間的耦合，使其可以獨立開發 &amp; 測試。</p>
<p>Java 提供了 控制訪問 ( access control ) 的 機制決定了 類別 &amp; 成員的 可訪問性 ( accessibility)。</p>
<span id="more"></span>

<h1 id="訪問級別-4-種"><a href="#訪問級別-4-種" class="headerlink" title="訪問級別( 4 種 )"></a>訪問級別( 4 種 )</h1><ol>
<li>private: 只有自己類別的成員可以存取</li>
<li>package-private: 在該class所屬之package底下的所有class都可以使用它，跨package的class則不行<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   String <span class="title function_">packageprivateService</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;packageprivateService&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>protected: 除了 自己 &amp; 同package的存取權限外，子類別也可以存取</li>
<li>public : 所有人都可以存取</li>
</ol>
<p>※ 在設計時除了public API 外，其他成員盡量都設定為 private。</p>
<h1 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h1><ul>
<li>類別成員變數不要設為 public </li>
<li>類別變數為 static final 的 primitive (int) or immutable object( String )時可設成 public<br>(規則使用 大寫字母 + 單詞之間底線隔開)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THRESHOLD</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TEST_MESSAGE</span> <span class="operator">=</span> <span class="string">&quot;TEST&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li>若為非 primitive or immutable 的常數, 使用 public static final 時，client 還是可以去修改其 記憶體位置的內容<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Thing[] VALUES = &#123; ... &#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>要解決上述問題有兩種方式:</p>
<ol>
<li><p>將其變成 private , 並將其轉成不可改變的list輸出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Thing[] VALUES = &#123; ... &#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Thing&gt; VALUES = Collections.unmodifiableList(Arrays.asList(VALUES));</span><br></pre></td></tr></table></figure>
</li>
<li><p>將其變成 private , 並將其使用 clone() 的方式回傳</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Thing[] VALUES = &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> TEST[] value() &#123;</span><br><span class="line">		<span class="keyword">return</span> VALUES.clone();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://matthung0807.blogspot.com/2020/04/effective-java-3e-item-15.html">Effective Java 3e - Item 15: Minimize the accessibility of classes and members 筆記</a></li>
<li><a href="https://www.jyt0532.com/2018/04/21/minimize-the-accessibility-of-classes-and-members/">Effective Java Item15 - 使類和成員的可訪問性最小化</a></li>
</ol>
]]></content>
      <categories>
        <category>effectiveJava</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effectiveJava</tag>
      </tags>
  </entry>
  <entry>
    <title>簡介 Git flow &amp; Github flow</title>
    <url>/2022/06/08/gitflow-githubflow-introduction/</url>
    <content><![CDATA[<p>使用 git 作為版本控制來工作也一段時間了，近期看了某些文章發現一些名詞 git flow ， 花了點時間看了一下解釋。<br>才發現自己不知不覺也一直在使用，因此也來記錄一下筆記。</p>
<span id="more"></span>

<h1 id="Github-Flow"><a href="#Github-Flow" class="headerlink" title="Github Flow"></a>Github Flow</h1><ol>
<li>主線分支為 master</li>
<li>開立分支 branch</li>
<li>儲存 commit </li>
<li>發起 Pull Request (另一名developer可以進行代碼審查，也可以回絕請求，請其重新調整)</li>
<li>Merge 回 master 且 刪除 分支branch</li>
</ol>
<p><img src="https://dsm01pap006files.storage.live.com/y4mNpNY6l76n-IlaDOMlQaULdqDVChKBc1c0j7IMDwOdWNMCa4KnHZfFIJEqSE5ajSghv_DSsZe17OWsAg2l4KIYssXBxITYzPnoJy5Y_OoLNeRNSE4G6krd_s9dqRGGyjFwAQomoXq4A3P2MnX93yyjhwj8G8U-xOc9y3CcCgH0Z1t8hbLRlHX-_7o3RTzjRJO?width=1064&height=362&cropmode=none" alt="github-flow.png"></p>
<h1 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git Flow"></a>Git Flow</h1><ol>
<li>主線分支有兩個 master (正式上線版本) &#x2F; developer (最新開發主分支) branch</li>
<li>功能分支有三個 feature (功能分支) &#x2F; hotfix (緊急線上問題修復分支)&#x2F; release(待上線測試版本) branch</li>
</ol>
<ul>
<li><p>功能開發(feature) &#x2F; 版本上線前測試 (release):<br>以功能開發而言，從 dev 切出分支個別開發，開發完後 merge 回 dev 分支，等所有 dev 該版本功能皆進<br>入 dev 版本後，會另切出 release 分支， release 分支進行測試，如有問題由該分支修復 bug ，等測試<br>完成後會 merge 回 master &amp; dev 分支； master 分支的程式進行上線。</p>
</li>
<li><p>緊急問題修復(hotfix)<br>線上有問題會從 master 開一個分支進行修復且測試，測試完成會 merge 回 master 進行小版本的上線，且<br>也會同步 merger 回 dev 避免後續 下一版本開發完成時，merge 回 master 時又會再次出現問題。</p>
</li>
</ul>
<p><img src="https://dsm01pap006files.storage.live.com/y4mqqwJY4avprtMRtVDZ0W3NhjJQihpMiFnk62pBsGTtEyZ1DqN5eJHfVFJNGndE2U2Nprx6uPsBoPHAL4SzojkhjiPqeqC3fGjeqUxzBAQh0DkWgg_w-Jr3AT4tyGqtFnuhg6MxAiMpOHM-exfE-g5ANjzrKMyXKJu8gw1qgv3yLUlrjBxJ2ZWqTT5bN2Rxnh6?width=841&height=660&cropmode=none" alt="git-flow.png"></p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>目前公司在使用的為 Git Flow &amp; Github Flow 兩種工作模式的混合體(多分支+PR確保程式品質)，因為有多人開發 + 版本迭代的關係。<br>基本上還是要看 各個團隊的實際需求來量身訂做開發模式的規則。</p>
<p>另外在 網路上還有查到一種工作流程為 Gitlab Flow (因比較不像是目前工作使用，就暫時不去贅述)</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://ithelp.ithome.com.tw/articles/10281080">Day29｜常見的三種工作流程 - Git flow、GitHub Flow 與 Gitlab Flow</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10277278">【Day19】Git 版本控制 - 多人協作 GitHub Flow</a></li>
<li><a href="https://medium.com/@lf2lf2111/%E4%B8%89%E7%A8%AE%E7%89%88%E6%8E%A7%E6%B5%81%E7%A8%8B-29c82f5d4469">三種版控流程- git flow vs github flow vs gitlab flow</a></li>
<li><a href="https://gitbook.tw/chapters/gitflow/using-git-flow">使用 Git Flow</a></li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item16 - 在 public 的 類別中，使用 get/set 方法 而非 公開成員變數</title>
    <url>/2022/06/26/effective-java-item16/</url>
    <content><![CDATA[<p>此為閱讀 Effective Java 3rd 所記錄的學習歷程<br>Item16 : 在 public 的 類別中，使用 get&#x2F;set 方法 而非 公開成員變數</p>
<p>類別在被外部呼叫時，使用 getter &#x2F; setter 的方法取得成員變數，保留彈性以利將來可以調整內部使用方法，<br>如果直接開放外部直接使用，要調整時會是一個災難。</p>
<span id="more"></span>

<p>java 中有些類別被稱為 Degenerate class，用來集中變數屬性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> x;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述寫法是可以在任何地方被直接取得&amp;改變的，因此會造成維護上的困難。<br>改成 getter &#x2F; setter 的寫法如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="type">double</span> x;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">double</span> y;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.x = x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">double</span> y)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.y = y;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>※ Java 中有幾個類別也有違反該主題的案例，像是 <code>java.awt</code> 中的 <code>Point</code> 跟 <code>Dimension</code> 類別，<br>但同時也存在一些性能問題；提醒我們不要這樣使用，避免造成後續維護的麻煩。</p>
<p>如果真的需要公開成員變數，也要將其設為<font color=#ff0000>不可變(final)</font>，<br>以下為書中的範例，每個產生的 instance 都為一個其固定的時間。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Public class with exposed immutable fields - questionable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Time</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HOURS_PER_DAY</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MINUTES_PER_HOUR</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> hour;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> minute;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Time</span><span class="params">(<span class="type">int</span> hour, <span class="type">int</span> minute)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hour &lt; <span class="number">0</span> || hour &gt;= HOURS_PER_DAY)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Hour: &quot;</span> + hour);</span><br><span class="line">    <span class="keyword">if</span> (minute &lt; <span class="number">0</span> || minute &gt;= MINUTES_PER_HOUR)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Min: &quot;</span> + minute);</span><br><span class="line">    <span class="built_in">this</span>.hour = hour;</span><br><span class="line">    <span class="built_in">this</span>.minute = minute;</span><br><span class="line">  &#125;</span><br><span class="line">  ... <span class="comment">// Remainder omitted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>effectiveJava</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effectiveJava</tag>
      </tags>
  </entry>
  <entry>
    <title>Optional 類別基本操作</title>
    <url>/2022/06/04/java-Optional/</url>
    <content><![CDATA[<p>在 Java 開發當中，常常會碰到 <font color=#ff0000><strong>NullPointerException</strong></font> 的問題，於是為了明確定義如果遇到可能有 null 的情況需要如何處理 &amp; 優化程式寫法，就多了 Optional 的類別。</p>
<p>在 <strong>Clean Code</strong> 這本書內的 Character7 錯誤處理中提到:</p>
<ul>
<li>不要回傳 null ( 空值 ) - P123</li>
<li>不要傳遞 null - P124</li>
</ul>
<p>使用 null 參數在程式中流通是一件非常不好的做法，會需要額外的檢查 參數是否為 null ，如果有一處忘了檢查往往會有非預期的錯誤產生 ( ex : NullPointerException )</p>
<span id="more"></span>

<p>在 java8 以前，以往物件的回傳，都需要特別注意去判斷 是否為 null 值，使用 Optional 後，多了一些判斷 null 的 API 可以應用 ex: <strong>isPresent()</strong> 。</p>
<p>※回傳單一物件的時候，才需要使用Optional，如果是集合的話，直接回傳空的集合即可 ex: List</p>
<h1 id="將值轉換成-Optional-物件"><a href="#將值轉換成-Optional-物件" class="headerlink" title="將值轉換成 Optional 物件"></a>將值轉換成 Optional 物件</h1><ul>
<li>Optional.of( T value)</li>
</ul>
<p>當 value 不為 null 的時候回傳一個 Optional 物件，如果 value 為 null 會有 NullPointerException</p>
<ul>
<li>Optional.ofNullable( T value ) - 允許傳入 null 值</li>
</ul>
<p>當 value 不為 null 的時候回傳一個 Optional 物件，如果 value 為 null 回傳 Optional.empty()</p>
<h1 id="判斷-值-是否為-存在"><a href="#判斷-值-是否為-存在" class="headerlink" title="判斷 值 是否為 存在"></a>判斷 值 是否為 存在</h1><ul>
<li>Optional.isPresent( T value )</li>
</ul>
<p>當 value 有值 回傳 true , 反之 false</p>
<ul>
<li>ifPresent ( Consumer&lt;? super T&gt; action )</li>
</ul>
<p>當判斷 Option 的 value 有值時，帶入 Consumer 進行客製化處理，如範例中加工顯示文字；如果沒有值的話就不做任何事</p>
<h1 id="取得-Optional-值的方法"><a href="#取得-Optional-值的方法" class="headerlink" title="取得 Optional 值的方法"></a>取得 Optional 值的方法</h1><ul>
<li>get()</li>
</ul>
<p>如果 value 存在則回傳值，如果值不存在會報出錯誤訊息<br>java.util.NoSuchElementException: No value present</p>
<p><strong>※ 在使用 get() 前，確保先用 isPresent() 檢查是否有值，才不會有錯誤訊息</strong></p>
<ul>
<li>orElse( T other )</li>
</ul>
<p>此方法濃縮了 isPrsesnt() &amp; get() 的方法，如果 Optional 有值的話顯示值，沒有值的話會帶入 other 給的值</p>
<ul>
<li>orElseGet( Supplier&lt;? extends T&gt; other )</li>
</ul>
<p>如果 Optional 有值的話顯示值，沒有的話會根據客製化的邏輯帶入 other 的結果 ( 用在複雜情境 )，下述範例根據當下產出的 random 值判斷奇數&#x2F;偶數顯示不同的demo結果</p>
<ul>
<li>orElseThrow( Supplier&lt;? extends X&gt; exceptionSupplier )</li>
</ul>
<p>如果 Optional 有值的話顯示值，沒有的話可以帶入客製化的 exception ( exceptionSupplier )</p>
<h1 id="實作範例"><a href="#實作範例" class="headerlink" title="實作範例"></a>實作範例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 練習 Optional 使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年6月4日</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptionalMain</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;== data not found ( before java 8 ) ==&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// java8以前 ( 如果 null 則不顯示值)</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">nullValueBeforeJava8</span> <span class="operator">=</span> getMapValue(<span class="string">&quot;four&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(nullValueBeforeJava8 != <span class="literal">null</span>)</span><br><span class="line">			System.out.println(<span class="string">&quot;Before java8 value is null: &quot;</span> + nullValueBeforeJava8);</span><br><span class="line">		</span><br><span class="line">		<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> getMapValue(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(value != <span class="literal">null</span>)</span><br><span class="line">			System.out.println(<span class="string">&quot;Before java8 value is not null: &quot;</span> + value);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;== data not found ( java 8 ) ==&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * java8以後 沒有值的情況</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		Optional&lt;String&gt; nullValueJava8 = getMapValueByOptional(<span class="string">&quot;four&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// get() 用法</span></span><br><span class="line">		<span class="keyword">if</span>(nullValueJava8.isPresent())</span><br><span class="line">			System.out.println(<span class="string">&quot;java8 Optional get() is not null:&quot;</span> + nullValueJava8.get());</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			System.out.println(<span class="string">&quot;java8 Optional get() is null: &quot;</span> + <span class="string">&quot;mapValueIsNull&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// orElse() 用法</span></span><br><span class="line">		System.out.println(<span class="string">&quot;java8 Optional orElse() is null: &quot;</span> + nullValueJava8.orElse(<span class="string">&quot;mapValueIsNull&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// orElseGet()方法 , 隨機產一個1-100的亂數，根據奇數偶數顯示不同的邏輯</span></span><br><span class="line">		System.out.println(nullValueJava8.orElseGet(()-&gt;&#123;</span><br><span class="line">			<span class="type">Random</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">			<span class="type">int</span> <span class="variable">random</span> <span class="operator">=</span> rd.nextInt(<span class="number">100</span>);</span><br><span class="line">			<span class="keyword">if</span>(random%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="string">&quot;java8 Optional orElseGet() null logic : even&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> <span class="string">&quot;java8 Optional orElseGet() null logic :　odd&quot;</span>;</span><br><span class="line">		&#125;));</span><br><span class="line">			</span><br><span class="line">		<span class="comment">// orElseThrow()方法</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.println(nullValueJava8.orElseThrow(()-&gt; <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;custom Exception&quot;</span>)));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;test catch exception:&quot;</span> + e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;== data exist ( java 8 )==&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * java8以後 有值的情況</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		Optional&lt;String&gt; valueJava8 = getMapValueByOptional(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(valueJava8.isPresent())</span><br><span class="line">			System.out.println(<span class="string">&quot;java8 Optional get() is not null:&quot;</span> + valueJava8.get());</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			System.out.println(<span class="string">&quot;java8 Optional get() is null:&quot;</span> + <span class="string">&quot;mapValueIsNull&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// orElse() 用法</span></span><br><span class="line">		System.out.println(<span class="string">&quot;java8 Optional orElse() is not null: &quot;</span> + valueJava8.orElse(<span class="string">&quot;mapValueIsNull&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// isPresent()用法</span></span><br><span class="line">		valueJava8.ifPresent( parameter -&gt; &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;java8 Optional ifPresent() is not null:&quot;</span> + parameter);</span><br><span class="line">		&#125;);</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 取得map的值，如果沒有判斷 null 的情況，則會有 NullPointerException</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMapValue</span><span class="params">(String key)</span> &#123;</span><br><span class="line">		Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">		map.put(<span class="string">&quot;two&quot;</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">		map.put(<span class="string">&quot;three&quot;</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;String&gt; <span class="title function_">getMapValueByOptional</span><span class="params">(String key)</span> &#123;</span><br><span class="line">		Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">		map.put(<span class="string">&quot;two&quot;</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">		map.put(<span class="string">&quot;three&quot;</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">		<span class="comment">// 方法1: 判斷null</span></span><br><span class="line">		<span class="comment">//return value == null ? Optional.empty() : Optional.of(value);</span></span><br><span class="line">		<span class="comment">// 方法2: 濃縮上述的方法 如果不為 null則回傳值</span></span><br><span class="line">		<span class="keyword">return</span> Optional.ofNullable(value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根據 Ref. 5 有提到，使用 null 或是 Optional 的時機點，可以做個參考</p>
<ul>
<li>如果在 private 的 method中，因為只有該 class 有權限訪問，可以很清楚的知道 return用法，<br>如果使用 optional 會增加程式的複雜度</li>
<li>如果在 public 的 method中，因為有多個 class 需要使用，developer 也會在撰寫時容易忘記<br>去處理 null 的情境，因此建議使用 optional 去提醒</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://openhome.cc/Gossip/Java/Optional.html">使用 Optional 取代 null</a></li>
<li><a href="https://matthung0807.blogspot.com/2021/01/java-optional-intro.html">Java Optional 簡介</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">Optional (Java Platform SE 8 )</a></li>
<li><a href="http://blog.tonycube.com/2015/10/java-java8-4-optional.html">Java8 新功能筆記 (4) - Optional</a></li>
<li><a href="https://medium.com/@abhisheksinghaks77/are-you-correctly-using-optional-collections-and-null-in-your-java-code-5d2b8617d47c">Are you correctly using Optional, Collections, and Null in your Java code ?</a></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-字串編碼</title>
    <url>/2022/06/05/java-String-encoding/</url>
    <content><![CDATA[<p>最近在公事上有遇到關於中文字編碼的問題，查了一下原因 &amp; 讀了一下 String 相關使用方法做個筆記</p>
<span id="more"></span>

<h1 id="情境描述"><a href="#情境描述" class="headerlink" title="情境描述"></a>情境描述</h1><p>有一個與外部系統進行資料串接的需求，我們的編碼是 UTF-8 ，對方的系統為 MS950<br>但串接的過程一直發生對方收到的資料為亂碼，因此檢查了一下原本的程式，發現問題出在這行寫法。</p>
<p><code>new String(&quot;文字&quot;.getBytes(), &quot;MS950&quot;)</code></p>
<p>上述這行程式包含了 String 個 constructor &amp; getBytes() 用法，因此點進去看了一下 <font color=#ff0000>String.class</font> 的描述</p>
<ul>
<li>getBytes() &#x2F; getBytes(String charsetName) : 將 字串 轉換成 對應編碼的 byte 陣列</li>
</ul>
<blockquote>
<p>Encodes this {@code String} into a sequence of bytes using the named charset, storing the result into a new byte array.</p>
</blockquote>
<ul>
<li>new String (byte btye[],String charsetName) : 將 byte 陣列轉回 字串</li>
</ul>
<blockquote>
<p>Constructs a new {@code String} by decoding the specified array of bytes using the specified {@linkplain java.nio.charset.Charset charset}.</p>
</blockquote>
<p>上面看乍似是一個對稱的寫法，但是 getBytes 如果沒有帶參數的話，會去取得 JVM 預設的 charset<br>我們的系統是 UTF-8 ，因此上述的寫法就是 把我們的文字用 UTF-8 編碼方式轉成 byte 陣列，但卻<br>是用 MS950 的編碼表去做解碼，這樣找不到對應的資料就會出現亂碼的情況。</p>
<h1 id="解決方向"><a href="#解決方向" class="headerlink" title="解決方向"></a>解決方向</h1><p>因此這個需求如果是 我們系統 UTF-8 ，對方為 MS950 的情況，我們使用 MS950 的方式將字串轉成<br>byte 陣列傳給對方，對方再使用 MS950 的方式 將其轉回文字即可。</p>
<h1 id="程式範例"><a href="#程式範例" class="headerlink" title="程式範例"></a>程式範例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringEncodingMain</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;JVM 預設編碼:&quot;</span> + Charset.defaultCharset());</span><br><span class="line">		<span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> <span class="string">&quot;臺北&quot;</span>;</span><br><span class="line">		<span class="comment">// 錯誤使用情境</span></span><br><span class="line">		System.out.println( <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;文字&quot;</span>.getBytes(), <span class="string">&quot;MS950&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;=====&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 使用 UTF-8 互轉</span></span><br><span class="line">		<span class="type">byte</span>[] byteArrayUTF8 = city.getBytes();</span><br><span class="line">		System.out.println( <span class="keyword">new</span> <span class="title class_">String</span>(byteArrayUTF8, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;=====&quot;</span>);</span><br><span class="line">				</span><br><span class="line">		<span class="comment">// 使用 MS950 互轉</span></span><br><span class="line">		<span class="type">byte</span>[] byteArrayMS950 = city.getBytes(<span class="string">&quot;MS950&quot;</span>);</span><br><span class="line">		System.out.println( <span class="keyword">new</span> <span class="title class_">String</span>(byteArrayMS950, <span class="string">&quot;MS950&quot;</span>));	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://openhome.cc/Gossip/Encoding/String.html">Java 的字串</a></li>
<li><a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/642854/#outline__8">從String.getBytes理解Java編碼和解碼</a></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java XML 解析 - JAXB API</title>
    <url>/2022/06/14/java-xml-parser-jaxb/</url>
    <content><![CDATA[<p>最近公司需求，有遇到 XML 解析的問題，公司有使用了 JAXB API，因此寫了範例紀錄一下.</p>
<span id="more"></span>

<ul>
<li>從 XML String 轉 Java Bean (使用 Unmarshaller 類別)</li>
<li>從 Java Bean 轉 XML String (使用 Marshaller 類別)</li>
<li>定義 Java Bean (使用 annotation)</li>
</ul>
<p>@XmlRootElement: xml 的 根元素 ex: <code>&lt;test&gt;</code><br>@XmlElement: xml 的 元素 ex: <code>&lt;req&gt;</code><br>@XmlAccessorType: 定義那些成員變數是可以被轉換的 ( ex: FIELD)<br>@XmlTransient: 用來解決 public method 的 名稱衝突<br>@XmlAttribute: 元素的屬性成員 ex: <code>&lt;req one=&quot;o1&quot;&gt;</code> 的 one</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">req</span> <span class="attr">one</span>=<span class="string">&quot;o1&quot;</span> <span class="attr">two</span>=<span class="string">&quot;t2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resp</span> <span class="attr">first</span>=<span class="string">&quot;f1&quot;</span> <span class="attr">second</span>=<span class="string">&quot;s1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="程式範例"><a href="#程式範例" class="headerlink" title="程式範例"></a>程式範例</h1><ul>
<li><p>定義 Java Bean (XML Root)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement(name = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@XmlElement</span></span><br><span class="line">	<span class="keyword">private</span> Req req;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@XmlElement</span></span><br><span class="line">	<span class="keyword">private</span> Resp resp;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@XmlTransient</span></span><br><span class="line">	<span class="keyword">public</span> Req <span class="title function_">getReq</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> req;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setReq</span><span class="params">(Req req)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.req = req;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@XmlTransient</span></span><br><span class="line">	<span class="keyword">public</span> Resp <span class="title function_">getResp</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> resp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResp</span><span class="params">(Resp resp)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.resp = resp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定義 Java Bean (XML 元素)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@XmlAccessorType(XmlAccessType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Req</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@XmlAttribute(name = &quot;one&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String one;</span><br><span class="line">		</span><br><span class="line">    <span class="meta">@XmlAttribute(name = &quot;two&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String two;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getOne</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> one;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOne</span><span class="params">(String one)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.one = one;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getTwo</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> two;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTwo</span><span class="params">(String two)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.two = two;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定義 Java Bean (XML 元素)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@XmlAccessorType(XmlAccessType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlAttribute(name = &quot;first&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String first;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@XmlAttribute(name = &quot;second&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String second;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> first;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirst</span><span class="params">(String first)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.first = first;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getSecond</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> second;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSecond</span><span class="params">(String second)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.second = second;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
<li><p>XML String 與 Java Bean 轉換</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析 XML 字串的方法 : JAXB</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年6月14日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> XMLStreamException, ParserConfigurationException, SAXException, IOException, JAXBException &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 從 XML String 轉成 Bean</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">xmlString</span> <span class="operator">=</span> <span class="string">&quot;&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27; standalone=\&quot;yes\&quot;?&gt;&lt;test&gt;&lt;req one=&#x27;one&#x27; two=&#x27;two2&#x27;/&gt;&lt;resp first=&#x27;first&#x27; second=&#x27;second2&#x27;/&gt;&lt;/test&gt;&quot;</span>;	</span><br><span class="line">		<span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> parseXmltoBeanByJAXB(xmlString, Test.class);</span><br><span class="line">		System.out.println(test.getReq().getOne());</span><br><span class="line">		System.out.println(test.getReq().getTwo());</span><br><span class="line">		System.out.println(test.getResp().getFirst());</span><br><span class="line">		System.out.println(test.getResp().getSecond());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 從 Bean 轉成 XML String</span></span><br><span class="line">		<span class="type">Test</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">		<span class="type">Req</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Req</span>();</span><br><span class="line">		req.setOne(<span class="string">&quot;o1&quot;</span>);</span><br><span class="line">		req.setTwo(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">		<span class="type">Resp</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resp</span>();</span><br><span class="line">		resp.setFirst(<span class="string">&quot;f1&quot;</span>);</span><br><span class="line">		resp.setSecond(<span class="string">&quot;s1&quot;</span>);</span><br><span class="line">		test2.setReq(req);</span><br><span class="line">		test2.setResp(resp);</span><br><span class="line">		</span><br><span class="line">		<span class="type">String</span> <span class="variable">resultXml</span> <span class="operator">=</span> parseBeantoXmlStringByJAXB(test2);</span><br><span class="line">		System.out.println(resultXml);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 從 XML String 轉成 Bean</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> xmlString</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> JAXBException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">parseXmltoBeanByJAXB</span><span class="params">(String xmlString, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> JAXBException &#123;</span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">targetStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(xmlString.getBytes());		</span><br><span class="line">		<span class="type">JAXBContext</span> <span class="variable">context</span> <span class="operator">=</span> JAXBContext.newInstance(clazz);</span><br><span class="line">		<span class="type">Unmarshaller</span> <span class="variable">unmarshaller</span> <span class="operator">=</span> context.createUnmarshaller();</span><br><span class="line">		<span class="keyword">return</span> (T) unmarshaller.unmarshal(targetStream);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 從 Bean 轉成 XML String</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> JAXBException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; String <span class="title function_">parseBeantoXmlStringByJAXB</span><span class="params">(T object)</span> <span class="keyword">throws</span> JAXBException &#123;</span><br><span class="line">		<span class="type">JAXBContext</span> <span class="variable">context</span> <span class="operator">=</span> JAXBContext.newInstance(object.getClass());</span><br><span class="line">		<span class="type">Marshaller</span> <span class="variable">marshaller</span> <span class="operator">=</span> context.createMarshaller();</span><br><span class="line">		<span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">		marshaller.marshal(object, sw);</span><br><span class="line">		<span class="keyword">return</span> sw.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="延伸議題"><a href="#延伸議題" class="headerlink" title="延伸議題"></a>延伸議題</h1><ol>
<li><p>使用 JAXB API時有遇到attribute 內的值如果長度太長會有問題:<br><font color=#ff0000>javax.xml.stream.XMLStreamException: Maximum attribute size limit (524288) exceeded</font></p>
<ul>
<li>目前自己處理的方法是使用<font color=#ff0000>字串處理</font>把過大的 attribute 額外處理</li>
<li>可以找相關套件去修改預設值，自己尚未實作，提供一個方向參考(Ref. 3)</li>
</ul>
</li>
<li><p>JAXB API 在 Java9 就已經棄用了，如果有使用比較新的Java版本，無法使用 (Ref. 4)</p>
</li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://www.baeldung.com/jaxb">Guide to JAXB</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10109119">使用JAXB-JAXBContext將POJO轉換成XML格式</a></li>
<li><a href="https://stackoverflow.com/questions/52879100/woodstox-via-simplexml-attribute-limits-how-to-set-them">Woodstox via SimpleXML attribute limits - how to set them?</a></li>
<li><a href="https://stackoverflow.com/questions/52502189/java-11-package-javax-xml-bind-does-not-exist">https://stackoverflow.com/questions/52502189/java-11-package-javax-xml-bind-does-not-exist</a></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item1 - 使用靜態工廠方法取代建構子</title>
    <url>/2022/05/19/effective-java-item1/</url>
    <content><![CDATA[<p>此為閱讀 Effective Java 3rd 所記錄的學習歷程<br>Item1 : 使用靜態工廠方法取代建構子</p>
<span id="more"></span>

<p>如果要產生一個實例，一般普遍的想法就是使用 public constructor 讓開發人員隨時需要即使用 <em>new</em> 的方式</p>
<p>但也有另外一種方式，使用靜態工廠方法來提供創造物件的服務</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="title function_">Job</span><span class="params">(String title)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Job <span class="title function_">from</span><span class="params">(String title)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Job</span>(title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用-靜態工廠方法的好處"><a href="#使用-靜態工廠方法的好處" class="headerlink" title="使用 靜態工廠方法的好處"></a>使用 靜態工廠方法的好處</h1><ol>
<li>有屬於自己的方法名稱，相較於建構子，可讀性高</li>
<li>避免每次呼叫時，都需要建立一個新的實例<br> -&gt; 可以自行決定需要給新的實例 或是 舊的 ( 設計模式 Singleton )</li>
<li>可以透過靜態工廠取得子類別實例，並可藉由不同參數，得到不同子類別<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Job <span class="title function_">newInstance</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(name.equals(<span class="string">&quot;doctor&quot;</span>)) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Doctor</span>();</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Doctor</span> <span class="keyword">extends</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>可以透過靜態工廠取得實作同一介面的實例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Discount <span class="title function_">getDiscount</span><span class="params">(String type)</span> &#123;</span><br><span class="line">		<span class="keyword">switch</span>(type) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;half&quot;</span>: <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HalfPriceDiscountImpl</span>();</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;limit&quot;</span>: <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TimeLimitDiscountImpl</span>();</span><br><span class="line">			<span class="keyword">default</span> :  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MemberDiscountImpl</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="使用-靜態工廠方法的缺點"><a href="#使用-靜態工廠方法的缺點" class="headerlink" title="使用 靜態工廠方法的缺點"></a>使用 靜態工廠方法的缺點</h1><ol>
<li>如 建構子為私有，則無法被繼承</li>
<li>與其他靜態方法無差別，很難在眾多方法中一點看出。</li>
</ol>
<p>-&gt; 可用慣用命名行為，使其容易辨認<br>EX: getInstance() : 取得實例<br>    newInstance() : 確保每次取得的實例皆為新的實例<br>    valueOf() : 類別轉換 Integer.valueOf(int i)</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://www.blogbrb.com/posts/book/effective-java-item1/">Effective Java Item1 以靜態工廠方法代替建構函式</a></li>
<li><a href="https://www.jyt0532.com/2017/09/20/static-factory-method/">Effective Java Item1 - 靜態工廠方法</a></li>
<li><a href="https://www.gushiciku.cn/pl/2Pkd/zh-tw">第一條建議：考慮用靜態工廠方法代替構造方法——《Effective Java》讀書筆記</a></li>
</ol>
]]></content>
      <categories>
        <category>effectiveJava</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effectiveJava</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item9 - 傾向使用 try-resources 優於 try-finally</title>
    <url>/2022/05/28/effective-java-item9/</url>
    <content><![CDATA[<p>此為閱讀 Effective Java 3rd 所記錄的學習歷程<br>Item9 : 傾向使用 try-resources 優於 try-finally </p>
<span id="more"></span>

<p>Java 有許多 lib 需要使用 close() 來手動關閉資源，像是 FileReader , BufferedReader … etc<br>但如果忘記釋放資源，就會造成 memory leak 的問題。</p>
<p>在 Java 7 以前，需要使用 try catch finally 處理，如果有多組資源，程式碼會變得冗長</p>
<h1 id="Before-Try-finally"><a href="#Before-Try-finally" class="headerlink" title="Before: Try-finally"></a>Before: Try-finally</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 字元組 讀檔 Reader</span></span><br><span class="line"><span class="comment">	 * BufferedReader 為 Reader 的擴充</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">			</span><br><span class="line">		<span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			</span><br><span class="line">			fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">			br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileReader);</span><br><span class="line">			</span><br><span class="line">			String line;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// readline() 會刪除每行結尾的換行然後回傳</span></span><br><span class="line">			<span class="keyword">while</span>( (line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">				System.out.println(line);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// 無法找到檔案</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// 讀檔異常</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">if</span> ( br != <span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					br.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					<span class="comment">// 關閉 bufferedReader 異常</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">if</span> ( fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					fileReader.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					<span class="comment">// 關閉 fileReader 異常</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="After-Try-with-Resources"><a href="#After-Try-with-Resources" class="headerlink" title="After: Try-with-Resources"></a>After: Try-with-Resources</h1><p>Java 7 之後，出現 try-with-resources 的語法，block 內的物件需要實作 <font color=#ff0000>AutoCloseable 介面 </font><br>在 Java 1.5 出現的 Closable 介面 已經繼承了 AutoCloseable，JVM 在 try 結束後會呼叫 AutoCloseable.close() 釋放資源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 字元組 讀檔 Reader</span></span><br><span class="line"><span class="comment">	 * BufferedReader 為 Reader 的擴充</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// try-with-resources</span></span><br><span class="line">		<span class="keyword">try</span>(</span><br><span class="line">			<span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">			<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader)</span><br><span class="line">			) &#123;</span><br><span class="line">									</span><br><span class="line">			String line;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// readline() 會刪除每行結尾的換行然後回傳</span></span><br><span class="line">			<span class="keyword">while</span>( (line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">				System.out.println(line);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// 找不到檔案處理</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// 讀檔錯誤處理</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>優點:</p>
<ul>
<li>使程式碼變得簡潔</li>
<li>避免開發人員忘記關閉資源，造成 memory leak</li>
</ul>
<p>以上就是 Effective Java Item9 的主要內容。</p>
<h1 id="try-with-resources延伸-Exception-Suppressed"><a href="#try-with-resources延伸-Exception-Suppressed" class="headerlink" title="try-with-resources延伸 ( Exception Suppressed )"></a>try-with-resources延伸 ( Exception Suppressed )</h1><p>使用 try-with-resources 語法時，如果 close() 的方法出現了例外，但 try block 內的邏輯也出現了例外，<br>我們發現只有出現邏輯的錯誤，java 優先捕捉到了 try block 的異常，但 close 的異常其實並沒有不見，<br>java 7 提供了 <font color=#ff0000>Throwable getSuppressed()</font> 可以用來取出被壓制的 exception</p>
<p>以下實作一個 AutoCloseable 的物件來實現上述的做法</p>
<ul>
<li>實作 AutoCloseable 的服務</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 實作 AutoCloseable ，使其可以使用 try-with-resources</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oscar51011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022年5月28日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoCloseableService</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;demo close exception&quot;</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;test close exception&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用其 服務，並在 try block 拋出 logic 錯誤</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoCloseableExceptionMain</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			AutoCloseableExceptionMain.test();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			 System.out.println(<span class="string">&quot;Logic Exception message:&quot;</span> + e);</span><br><span class="line">			 </span><br><span class="line">			Throwable[] throwables = e.getSuppressed();</span><br><span class="line">			<span class="keyword">for</span>(Throwable t : throwables) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Suppressed Exception message:&quot;</span> + t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="keyword">try</span>(<span class="type">DemoCloseableService</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DemoCloseableService</span>())&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;do service&quot;</span>);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;logic exception&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>來查看一下結果，除了 Logic Exception 之外，我們也可以查出 close() 發生的異常。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do service</span><br><span class="line">demo close exception</span><br><span class="line">Logic Exception message:java.lang.Exception: logic exception</span><br><span class="line">Suppressed Exception message:java.lang.Exception: test close exception</span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><ol>
<li><a href="https://matthung0807.blogspot.com/2020/04/java-try-with-resources-close-resource.html">Java 使用 try-with-resources 關閉資源</a></li>
<li><a href="https://www.baeldung.com/java-try-with-resources">Java – Try with Resources</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1298366902304801">廖雪峰的官方網站-Reader</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">The try-with-resources Statement</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10081449">Project Coin - try-with-resource 語法 完</a></li>
</ol>
]]></content>
      <categories>
        <category>effectiveJava</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effectiveJava</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item3 - 使用私有建構子或Enum類型實現Singleton</title>
    <url>/2022/05/22/effective-java-item3/</url>
    <content><![CDATA[<p>此為閱讀 Effective Java 3rd 所記錄的學習歷程<br>Item3 : 使用私有建構子或Enum類型實現Singleton</p>
<span id="more"></span>

<h1 id="使用-private-constructor-常見有兩種-x2F-附加一種優化作法"><a href="#使用-private-constructor-常見有兩種-x2F-附加一種優化作法" class="headerlink" title="使用 private constructor (常見有兩種&#x2F;附加一種優化作法)"></a>使用 private constructor (常見有兩種&#x2F;附加一種優化作法)</h1><ol>
<li>singleton with public final field</li>
</ol>
<ul>
<li>簡單易懂, 直接使用</li>
<li>field 為 <font color=#ff0000>public</font><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublicFieldSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">PublicFieldSingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PublicFieldSingleton</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">PublicFieldSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;PublicFieldSingleton demo.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>singleton with static factory</li>
</ol>
<ul>
<li>如果要調整其內容為 non-singleton , 可以不用改變API, 更改factory method實作即可 , 靈活度較高</li>
<li>field 為 <font color=#ff0000>private</font><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFactorySingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">StaticFactorySingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticFactorySingleton</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">StaticFactorySingleton</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> StaticFactorySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> INSTANCE;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;StaticFactorySingleton demo.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>因為上述兩種方法, static field 初始化的時機點在 class 載入時期<br>如果在程式執行時期根本沒有用到該singleton實例時, 若該實例建立時<br>成本昂貴的情況下, 就會造成無謂的浪費; 為了避免該情況, 就有了<br>lazy initialization (在第一次實際需要使用時才產生實例)<br>※ 此處就不多加討論多執行緒的情境<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFoctorylazySingleton</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> StaticFoctorylazySingleton INSTANCE;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> StaticFoctorylazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="literal">null</span> == INSTANCE ) &#123;</span><br><span class="line">			INSTANCE = <span class="keyword">new</span> <span class="title class_">StaticFoctorylazySingleton</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> INSTANCE;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;StaticFoctorylazySingleton demo.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="使用-Enum"><a href="#使用-Enum" class="headerlink" title="使用 Enum"></a>使用 Enum</h1><ol>
<li>enum singleton<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">	INSTANCE;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;EnumSingleton demo.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>enum 的 建構子為私有的，因此使用者無法在執行時期去產生新的實例</li>
<li>初始化時機為 class 載入時期，enum 會執行建構子<br>因此上述的寫法也可以看成<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">EnumSingleton</span> <span class="variable">INSTANCE</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnumSingleton</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;EnumSingleton demo.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
書上也在單一元素(single-element enum)情況下，使用 Enum 類型為實作 singleton 的最佳辦法。</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://dzone.com/articles/java-singletons-using-enum">Java Singletons Using Enum</a></li>
<li><a href="https://stackoverflow.com/questions/26285520/implementing-singleton-with-an-enum-in-java">Implementing Singleton with an Enum (in Java)</a></li>
<li><a href="https://www.jyt0532.com/2017/10/20/enforce-the-singleton-property-with-a-private-constructor-or-enum/">Effective Java Item3 - 用Enum實作Singleton</a></li>
<li><a href="https://riptutorial.com/java/example/5741/implement-singleton-pattern-with-a-single-element-enum">Implement Singleton pattern with a single-element enum</a></li>
</ol>
]]></content>
      <categories>
        <category>effectiveJava</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effectiveJava</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 jenkins 撰寫 multiBranch pipeline</title>
    <url>/2022/05/08/jenkins-multibranch-pipeline/</url>
    <content><![CDATA[<p>藉由之前的 <a href="https://oscar51011.github.io/2022/05/07/jenkins-pipeline">使用 jenkins 撰寫 pipeline 腳本完成 springboot 簡易自動化部署
</a> 已經知道怎麼撰寫一般的 pipeline<br>但是在實際應用的需求上，開發團隊會在不同的環境(ex: SIT, UAT)進行開發，這樣需要跟對各個分支撰寫腳本</p>
<p>因此本篇撰寫multibranch pipeline，可以使用一個腳本完成這件事<br>前一篇練習是使用 pipeline script 的方式來撰寫<br>這次也練習 jenkinsfile 的寫法(將 腳本內容 交由版本控制管理)</p>
<span id="more"></span>

<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ol>
<li>準備一台 VM 並使用 docker啟動一個 Jenkins</li>
<li>建置一個可運行的 springboot 專案</li>
</ol>
<h3 id="自動化流程"><a href="#自動化流程" class="headerlink" title="自動化流程"></a>自動化流程</h3><ol>
<li>清空該job的workspace</li>
<li>取得github上對應的repository</li>
<li>在jenkins主機上進行打包</li>
<li>通知流程 ( print 結束字樣)</li>
</ol>
<h3 id="建置-multiBranch-pipeline-流程"><a href="#建置-multiBranch-pipeline-流程" class="headerlink" title="建置 multiBranch pipeline 流程"></a>建置 multiBranch pipeline 流程</h3><ol>
<li>將 springboot 專案加上 Jenkinsfile 的檔案</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4m3EeoO8TA1ZQTerbt7_AxAciIrBF2FxiYy29MUrLLCCVbpCcNNGfJY-n8LnKcY-yBeqi9jzbL97tswNxE5_AsOOQBPBat7Q6YiFaIlYDEbFX5XelKH8VD3RyVpu2PO8IMeYwqTRezzHe-JarOFoHD-xi2RIYPMfh-AKQEDEuKinflIVrAn4NRpA1_izE9RKHd?width=963&height=456&cropmode=none" alt="add-jenkinsfile-to-repository.png"></p>
<ol start="2">
<li>建立 multiBranch pipeline<br>Dashboard &gt; 新增作業 &gt; Multibranch Pipeline</li>
</ol>
<ul>
<li>Add Sources 選擇 Git 並填入相關資訊</li>
</ul>
<ol start="3">
<li>專案建置完成後點選 Scan Multibranch Pipeline Now<br>它會去取得 repository 並檢查分支是否有異動過，有的話會執行一次作業<br>(如果有新分支產生也會同步顯示於UI頁面)，如果要個別執行單一分支可點選 branch name 進入各分支</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4m3F0mz8wMZJ8Wu3zHxuMKnZaVZuaeSZMv2jKBoheTbPwL6IArwYj9-MZJMZ-yQRTQDN04hVoxk5-9MmvmeyG2yAbNP5mk3uMLT0aWlK6DFfF3KIqCh4izon3DvjPZT5vQlS7hc_VdSoA0tWwjmvBlDOcPVOHTadl6JIBMbPvOyBgtBIevw4zSD4Y0z3DXcr6i?width=1024&height=541&cropmode=none" alt="multibranch-pipeline-scan.png"></p>
<h1 id="驗證結果"><a href="#驗證結果" class="headerlink" title="驗證結果"></a>驗證結果</h1><p>進入單一分支執行完後，也會跟撰寫一般的 pipeline 腳本有同樣的結果，如下圖:</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mBTFN1JdZ61A0t1F0wwmFApUDudAZ_NngMX8V90wBWrVgbI8TNkn0Baq1J1NmA3SqnTEZWBnZ-MMxjzE4pfuh4otcW3_YFKbmyH055Wu4Ha_JOvQ7z4fbc2cUcKPI9cuABtn3J-UVlozT5ESE08MuBVX5ph5N5n62UDzoBIoUXSMa4cguRYO7CTU-yc-rDXxJ?width=1024&height=357&cropmode=none" alt="multibranch-pipeline-result.png"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://stackoverflow.com/questions/44928459/is-it-possible-to-rename-default-declarative-checkout-scm-step">stackoverflow - Is it possible to rename default “Declarative: Checkout SCM” step?</a></li>
<li><a href="https://www.jenkins.io/doc/book/pipeline/jenkinsfile/">jenkins - Using a Jenkinsfile</a></li>
</ol>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item4 - 使用私有建構子來實現禁止實例化</title>
    <url>/2022/05/23/effective-java-item4/</url>
    <content><![CDATA[<p>此為閱讀 Effective Java 3rd 所記錄的學習歷程<br>Item4 : 使用私有建構子來實現禁止實例化</p>
<span id="more"></span>

<p>有時候在實作某些固定的邏輯時，會設計成 Utility Class，該類別只有包含 static 的方法 &amp; 變數<br>ex: java.lang.Math , java.util.Arrays</p>
<ul>
<li>此類別不需要有其他人去實例化它</li>
<li>如果不撰寫建構子，java 有預設的 無參數建構子</li>
</ul>
<p> 因此撰寫一個 <font color=#ff0000>private constructor</font>，不要讓 compiler 產生預設的 建構子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="comment">// 避免使用反射機制進行實例化</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>書中描述，如果將類別設計成抽象類別是否就可以不被實例化? (答案是無法避免的)</p>
<ul>
<li>類別可以被繼承，且子類可以實例化</li>
<li>有可能誤導developer，是否該類別是被設計成需要繼承的類別</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><ol>
<li><a href="https://www.blogbrb.com/posts/book/effective-java-item4/">Effective Java Item4 透過私有建構函式來禁止實例化</a></li>
<li><a href="https://biratkirat.medium.com/learning-effective-java-item-4-4bc457fc5674">Learning Effective Java — Item 4</a></li>
</ol>
]]></content>
      <categories>
        <category>effectiveJava</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effectiveJava</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 jenkins 撰寫 pipeline 腳本完成 springboot 簡易自動化部署</title>
    <url>/2022/05/07/jenkins-pipeline/</url>
    <content><![CDATA[<p>本篇記錄撰寫 pipeline 完成簡易 springboot 的打包部署流程<br>並記錄在官網中使用到的一些 pipeline syntax</p>
<span id="more"></span>

<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ol>
<li>準備兩台 VM (一台裝 jenkins VM, 一台用來部署VM)</li>
<li>使用 docker啟動一個 Jenkins </li>
<li>docker jenkins VM配置 ssh 設定使 主機跳轉時不用輸入帳號密碼<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">jenkins VM 建立 ssh key</span></span><br><span class="line">ssh-keygen -t rsa -b 4096</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">進入 docker jenkins 的 .ssh 資料夾</span></span><br><span class="line">cd /root/.ssh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">取得 public key</span> </span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure></li>
<li>部署 VM 進入 <code>.ssh</code> 資料夾下 建立 <code>authorized_keys</code> 檔案 , 並把上述 public key 複製<br>設定完後，從 docker jenkins ssh 進 部署VM 確認是否可以正常執行</li>
<li>建置一個可運行的 springboot 專案</li>
<li>使用 docker啟動一個 Jenkins </li>
<li>jenkins 安裝 maven plugin<br>Dashboard &gt; 管理 jenkins &gt; Global Tool Configuration &gt; 點擊 maven 安裝 (選擇版本&amp;勾選自動安裝)</li>
<li>jenkins credentials 配置連接 github 之設定</li>
</ol>
<h3 id="自動化流程"><a href="#自動化流程" class="headerlink" title="自動化流程"></a>自動化流程</h3><ol>
<li>清空該job的workspace</li>
<li>取得github上對應的repository</li>
<li>在jenkins主機上進行打包</li>
<li>使用 linux 指令將 springboot jar 檔送到部署主機上</li>
<li>通知流程 ( print 結束字樣)</li>
</ol>
<h1 id="Jenkins-pipeline-Code-撰寫"><a href="#Jenkins-pipeline-Code-撰寫" class="headerlink" title="Jenkins pipeline Code 撰寫"></a>Jenkins pipeline Code 撰寫</h1><ol>
<li>Jenkins 有提供 pipeline Syntax 產生器可以使用<br>Dashboard &gt; 自己開的 job &gt; Pipeline Syntax</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mlgGj36sPhIhYlEke5YQiOGEnHlVx5Yn6c7Gsta8LOTrDGCd1hJTDGDB9uuot5oCVL0tBt1parZEAJ4JKBLZyKUasat3v5WhTxqcqa9kEAgKvEIzowxE0IontSJPMYAXj_LMkSLpDNteYPU5_X6nREetiFiy9oKu7xXxQ-8IEdGRk2dDJzsB0iRxH2Y9jOj1u?width=1024&height=629&cropmode=none" alt="pipeline-syntax.png"></p>
<ol start="2">
<li><p>Jenkins 有提供 enviroment 可以設定系統參數 &amp; parameter 可以定義參數，讓user根據不同情境處理Job</p>
</li>
<li><p>新增作業 &gt; 選擇 Pipeline Job &gt; 點選組態 ( 開始撰寫自己的第一個 pipeline job)<br>pipeline Definition 有兩種，本篇使用 <font color=#ff0000>pipeline script</font></p>
</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    </span><br><span class="line">    environment &#123;</span><br><span class="line">        remoteUser = <span class="string">&#x27;填入部署VM帳號&#x27;</span></span><br><span class="line">        remoteIp = <span class="string">&#x27;填入部署VM IP&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parameters &#123;</span><br><span class="line">        choice(</span><br><span class="line">          <span class="symbol">description:</span> <span class="string">&#x27;你需要選擇哪個環境執行 ?&#x27;</span>,</span><br><span class="line">          <span class="symbol">name:</span> <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">          <span class="symbol">choices:</span> [<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;uat&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    stages &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 步驟1: 清空資料夾</span></span><br><span class="line">        stage(<span class="string">&#x27;deleteDir&#x27;</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                deleteDir()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 步驟2: checkout github code</span></span><br><span class="line">        stage(<span class="string">&#x27;checkout&#x27;</span>)&#123;</span><br><span class="line">           steps&#123;</span><br><span class="line">              checkout([<span class="attr">$class:</span> <span class="string">&#x27;GitSCM&#x27;</span>, <span class="attr">branches:</span> [[<span class="attr">name:</span> <span class="string">&#x27;*/master&#x27;</span>]], <span class="attr">extensions:</span> [], <span class="attr">userRemoteConfigs:</span> [[<span class="attr">credentialsId:</span> <span class="string">&#x27;VM_USER&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;填入需要取得之Git repository&#x27;</span>]]])</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 步驟3: 專案打包成jar</span></span><br><span class="line">        stage(<span class="string">&#x27;build&#x27;</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                withMaven(<span class="attr">maven:</span> <span class="string">&#x27;maven-3.3.9&#x27;</span>) &#123;</span><br><span class="line">                    sh <span class="string">&#x27;mvn clean package -DskipTests&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 步驟4: 專案部署到另一台server , 並啟動</span></span><br><span class="line">        stage(<span class="string">&#x27;deploy&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                </span><br><span class="line">                sh <span class="string">&quot;scp web/target/gameballWeb.jar $&#123;env.remoteUser&#125;@$&#123;env.remoteIp&#125;:/home/oscar51011/project&quot;</span></span><br><span class="line">                echo <span class="string">&#x27;執行環境: $&#123;profile&#125;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">&#x27;notify&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&quot;echo &#x27;job done!&#x27;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="驗證結果"><a href="#驗證結果" class="headerlink" title="驗證結果"></a>驗證結果</h1><ol>
<li>手動執行 Build</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mW9A3gzWWOuCD5IMKBvwWlZhxgpIOt3ABwb_JlX77O6G9qwifU9Aiy0JLBwJ9-zEd6mxPdA8k8hfLfdjtYh1AZgFctCq5P1a-y2ufGYafPxAwODxTPZ961aztqJFT2htszB_xJ7XfR20HohKm5M9pRx6bg8EFgP5ydOT0IOG-3xHpTF01KaIt6OS9QQseeyq1?width=660&height=306&cropmode=none" alt="pipeline-parameter.png"></p>
<ol start="2">
<li>執行完後即可看到 pipeline 的結果</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4muOlGasqRI4TNMjFnarl9n4OTtvqKbCcQjAE67pKYAaf8HHyHG4okSmxpm_Hk17--LBzeHRD8RFpTXrel9A0cghCIsGifcABGqxpx1R9bV50ojMDZN4yLzkjJLHW_sMpTcglls2VXQk82Bp3p3J17EoHXlOPrV3ch5PzhsUY1El00MKuy7_RrFWFc9uVcF1A1?width=1024&height=297&cropmode=none" alt="pipeline-result.png"></p>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>以上就是初步撰寫第一個 pipeline 腳本的流程，但本篇還有很多部分有進步空間，紀錄一下後續延伸方向。</p>
<ul>
<li>研究 pipeline script from SCM </li>
<li>研究 如果在背景執行 springboot 專案，且可以優雅的 shutdown</li>
<li>研究 單元測試，在 CICD 中單元測試也是重要的一環</li>
<li>研究 健康檢查機制(部署完成後，通常都會需要做健康檢查，確認專案是否有成功啟動)</li>
<li>備份舊版本資料，以利後續出問題時可以復原退回前版</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://www.baeldung.com/ops/jenkins-pipelines">Intro to Jenkins 2 and the Power of Pipelines</a></li>
<li><a href="https://www.jenkins.io/doc/book/pipeline/syntax/">Jenkins - Pipeline Syntax</a></li>
<li><a href="https://www.jenkins.io/doc/book/pipeline/getting-started/">Jenkins - Getting started with Pipeline</a></li>
</ol>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Jenkins 串接 github webhook</title>
    <url>/2022/05/01/jenkins-connect-github-webhook/</url>
    <content><![CDATA[<p>目的: 撰寫基本的 Job，連接 Git Repository 並附上測試結果</p>
<p>流程有兩種:</p>
<ul>
<li>主動詢問 ( polling )</li>
<li>Git Webhook 觸發</li>
</ul>
<p>前置作業:</p>
<ul>
<li>使用 VM + docker 建置 jenkins</li>
<li>擁有一個 Github 帳號</li>
</ul>
<p>步驟如下:</p>
<span id="more"></span>

<h3 id="SSH-KEY-設定"><a href="#SSH-KEY-設定" class="headerlink" title="SSH KEY 設定"></a>SSH KEY 設定</h3><ol>
<li>產生 SSH KEY</li>
</ol>
<ul>
<li>進入 Linux 產出 ssh key (因為測試的關係, 密碼部分直接 enter 略過)<br><code>ssh-keygen</code></li>
<li>取出 public key 放置於 Github<br><code>cat ~/.ssh/id_rsa.pub</code></li>
<li>取出 private key 放置於 Jenkins<br><code>cat ~/.ssh/id_rsa</code></li>
</ul>
<ol start="2">
<li>登入 Github 設定 SSH KEY</li>
</ol>
<ul>
<li>點選右上角 使用者 icon &gt; Settings &gt; 點選左排選單 SSH and GPG keys</li>
<li>Add New SSH key</li>
</ul>
<p><img src="https://bnz05pap002files.storage.live.com/y4m9dct9qTqIYmVF9AuQu3MFn93UnP8bBINcibxL2WedvEDyNl4EtIAqZRwmP91V9uwqm23kVXbjs30w__pzuTamytZM1poSqWBirlGxz2IM9_mpHGvfEkStnlENcd9dWO4G5hD0cK0U4p2g9TzWepeMeau20ozcRoukj6Tw8sgSwttR5iygAvazsCpKtnK1xae?width=660&height=348&cropmode=none" alt="github_add_ssh_key.png"></p>
<ol start="3">
<li>登入 Jenkins 設定 Credentails</li>
</ol>
<ul>
<li>點選 管理 Jenkins &gt; Security 的 Manage Credentials &gt; System &gt; Global credential(unrestricted)</li>
<li>點選 Add Credentials</li>
</ul>
<p><img src="https://bnz05pap002files.storage.live.com/y4mRUytICogBKzHJ-6tF19J84l246bEvlLJ-kt_HsfBgyizYqa2ppkfQrYt8FkCNG9MAhh1foUVw1wgeFT2vs7byr6DGbni5zy7xjxKp8bMxOHJW6D5yN4lW4XvHbLhXl2EicxqBtEYeYE4t-CzMpxv6-6dVzCukxZZNy7hpL6ylqrc4bGA0N3WqrdU8mkwkebe?width=1024&height=583&cropmode=none" alt="jenkins-ssh-credentials.png"></p>
<h3 id="輪詢-polling"><a href="#輪詢-polling" class="headerlink" title="輪詢 (polling)"></a>輪詢 (polling)</h3><p>Jenkins 新增作業 &gt; 建置Free-Style 軟體專案</p>
<ul>
<li>原始碼管理選擇 git repository ( Credentials 選擇 3. 所建立的 )</li>
<li>觸發建置程序 選擇 輪詢SCM</li>
</ul>
<p><img src="https://bnz05pap002files.storage.live.com/y4miEJ68U0Z2Vr66riZwUMoUSUqmUdHUMSF7HhfV_e5rv-GvK6130INTvB_Zpts0soq5MJAIbzSSy8jtelwI6gr_YIWQ0-KcBngIXG5Yh28ozKjyrLxQFFViVHSKcpaEtnCM_GbqveC0Dgn-HWKcEW1wJswZ8xmzlCcNe8JAomfOV39Kvlg8Qh7Ngb7-E5IH0Tl?width=1024&height=412&cropmode=none" alt="jenkins-polling.png"></p>
<ul>
<li>專案修改一個項目並 push 回 master 主線，使其輪詢發現其異動並觸發 Job</li>
</ul>
<p><img src="https://bnz05pap002files.storage.live.com/y4mWFZJQdCsCVuGf5uqi0vb2a6YIiI5k5zdcK4vKo4rJYXgQlgtcMkl5bt0WzPPSoSjTpx0B-cUjYC2j7GuDJt4hxRFdRxzp5xm2StrHypE-_d7l-wuvIsFNePY6iNLVevL2FFBgAlYT3aQ7Ptv8fXnckJgHt1LEanHK0uv81wxSwgrMVmAfaSwqT3FoSzfONWt?width=861&height=623&cropmode=none" alt="jenkins-polling-result.png"></p>
<h3 id="Git-Webhook"><a href="#Git-Webhook" class="headerlink" title="Git Webhook"></a>Git Webhook</h3><p>Jenkins 新增作業 &gt; 建置Free-Style 軟體專案</p>
<ul>
<li>原始碼管理選擇 git repository ( Credentials 選擇 3. 所建立的 )</li>
<li>觸發建置程序 選擇 輪詢SCM</li>
</ul>
<font color=#ff0000>
因為 Docker Jenkins 的 IP 是內網，Github Webhook 連不到 <br>
因此 要使用 ngrok 裝在 VM 裡面，使 Jenkins mapping 到 domain <br>
再讓 webhook 的 Payload URL 使用 ngrok 的服務串聯 <br>
</font>

<ol>
<li>安裝 Ngork 步驟如下:</li>
</ol>
<ul>
<li>官網安裝 NRORK - <a href="https://ngrok.com/download">點我前往</a></li>
<li>使用 SSH or FTP 方式丟進 VM 裡面</li>
<li>將服務丟到 &#x2F;usr&#x2F;bin 底下<br><code>sudo mv ngrok /usr/bin/.</code></li>
<li>如果權限不足，執行以下指令 (參考Ref. 7)<br><code>cd /usr/bin</code><br><code>chmod -x ngrok</code></li>
<li>執行 ngork ( 該 port 為 Jenkins 對外的 port 18080)<br><code>ngrok http &#123;port&#125;</code></li>
</ul>
<p>執行後如下圖:</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4m6RLUneOV_aQFmdKmX6jl-rgHsNbTJLNgtFYwfjCFH4-ZkchOSKugXIqAtCwBEnlYeBTi-MrwkYmxhJ84QFztIQGruqKxSVxZWMSqX5q91etGfX7qDYlFITHO-HRB2_enWAvWnkdx0q1GqYKt5H15bweHxqjsMi_Ds1QK2daWkqbErDcjeuh-nbHgLDmMA8Zn?width=1024&height=391&cropmode=none" alt="ngrok-terminal.png"></p>
<ol start="2">
<li>專案設置 Webhook</li>
</ol>
<ul>
<li>Github Custom Repository &gt; Settings &gt; Webhooks 點選右上角 Add webhook</li>
<li>將上述 ngork 的 domain + &#x2F;github-webhook&#x2F; 加入至 payload URL</li>
</ul>
<p>配置如下圖:</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4mcEaj5tX2cpp9BNtHlizGZ2w1ioEy4nbf-Mi4eq0OPgagTip-iGYOP9ShthkoWPfaLerfLSTEXotUTlT6P_K5Dt0d3op99NaTcra_jlRC_21mXnvKr82u14WB8exnihsLqIUY2N5vdfS_bLX2of29KZ7GPIOXXEWGJa2mWBHS_Pch6q7CdGhh7-va-sRm8no2?width=1024&height=629&cropmode=none" alt="github-webhook.png"></p>
<ol start="3">
<li>專案修改一個項目並 push 回 master 主線，Webhook 會發送 API 給 Jenkins並觸發 Job</li>
</ol>
<p><img src="https://bnz05pap002files.storage.live.com/y4mg6VDt0rMBaEGLE9bV6ATXN58YIhr7BMCZyuBhanEFecN9NcqunvadP0voKRIb-Mu1Efoi82AKwPQs4qxMfYkj1eho9BMLC9dOh20f42PAumVx9uRq0sDOKQNkIK5UKtb5F1z_WYoFVmuhk38CTxkH8rd4nZXO3gTI-PAykxcvi-UZ96-BFUvn3zL9xaGuwEO?width=933&height=735&cropmode=none" alt="jenkins-webhook-result.png"></p>
<p>以上就是此次的流程紀錄</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://www.jianshu.com/p/07b60b788088">Jenkins+Github实现自动触发构建</a></li>
<li><a href="https://www.youtube.com/watch?v=MIP3WTW8ylM&ab_channel=edureka!">Webhooks in Jenkins | Integrating Jenkins with Github | DevOps Training | Edureka</a></li>
<li><a href="https://zoejoyuliao.medium.com/%E9%80%8F%E9%81%8E-github-webhook-%E8%A7%B8%E7%99%BC%E6%9C%AC%E5%9C%B0-jenkins-pipeline-%E8%AE%93%E4%BD%A0-push-code-%E5%88%B0-github-%E5%B0%B1%E6%9C%83%E8%87%AA%E5%8B%95%E8%B7%91-ci-cd-7c4bd7a22446">透過 GitHub Webhook 讓你 push code 到 Github 就會自動觸發本地 Jenkins Pipeline</a></li>
<li><a href="https://www.jenkins.io/doc/book/using/using-credentials/">Jenkins - Using credentials</a></li>
<li><a href="https://zoejoyuliao.medium.com/%E9%80%8F%E9%81%8E-github-webhook-%E8%A7%B8%E7%99%BC%E6%9C%AC%E5%9C%B0-jenkins-pipeline-%E8%AE%93%E4%BD%A0-push-code-%E5%88%B0-github-%E5%B0%B1%E6%9C%83%E8%87%AA%E5%8B%95%E8%B7%91-ci-cd-7c4bd7a22446">透過 GitHub Webhook 讓你 push code 到 Github 就會自動觸發本地 Jenkins Pipeline</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10227428">Ngrok：讓本機測試時也能有 HTTPS 憑證</a></li>
<li><a href="https://stackoverflow.com/questions/52744044/how-do-i-fix-ngrok-permission-denied">How do I fix ngrok permission denied?</a></li>
</ol>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>ngork</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS學習之旅(1) - 雲服務</title>
    <url>/2023/05/06/aws-cloud-computing/</url>
    <content><![CDATA[<p>最近被各種的雲端資訊燒到，因此買了Udemy開了相關課程開始學習，並將資訊記錄下來，以利後續回想可以快速回憶<br>課程為 Stephane Maarek 的 Udemy- [NEW] Ultimate AWS Certified Cloud Practitioner - 2023 課程</p>
<span id="more"></span>

<h1 id="傳統與雲端差異"><a href="#傳統與雲端差異" class="headerlink" title="傳統與雲端差異"></a>傳統與雲端差異</h1><p>傳統的主機架設需要有以下的考量:</p>
<ul>
<li>租借 data center 存放 server</li>
<li>需要花費電力</li>
<li>需要購買機器 ( 需要先估計好使用的量，擴充沒有辦法即時 )</li>
<li>需要花人力去建置監控維運</li>
</ul>
<p>轉換雲端後有有以下優點:</p>
<ul>
<li>有需求才使用服務 ( computer power &#x2F; database storage &#x2F; appliction ..etc )</li>
<li>方便簡易的 web 操作介面</li>
<li>節省基礎建設的成本</li>
<li>快速使用提升業務的擴展 &amp; 增加靈活性</li>
</ul>
<h1 id="基本服務模式有三種"><a href="#基本服務模式有三種" class="headerlink" title="基本服務模式有三種:"></a>基本服務模式有三種:</h1><ol>
<li>laaS : 提供主機、儲存空間、網路等基礎建設，用戶管理從OS建置、執行環境到應用程式開發都自己管理 ex: EC2</li>
<li>PaaS : 提供託管環境，用戶可以直接開發並管理應用程式 ex: Elastic Beanstalk</li>
<li>SaaS : 提供網路應用服務直接使用 ex: Dropbox</li>
</ol>
<h1 id="AWS雲服務的計費方式"><a href="#AWS雲服務的計費方式" class="headerlink" title="AWS雲服務的計費方式:"></a>AWS雲服務的計費方式:</h1><ol>
<li>使用流量</li>
<li>儲存空間</li>
<li>資料從雲端拿出時收費</li>
</ol>
<h1 id="Regions"><a href="#Regions" class="headerlink" title="Regions"></a>Regions</h1><p>為獨立的地理區域，底下有最少3個，最多6的Availability Zones(AZ)<br>選擇 Regions 的標準:</p>
<ul>
<li>法規</li>
<li>延遲</li>
<li>有些 regions 無法提供特定的服務</li>
<li>不同區域價格不同</li>
</ul>
<h1 id="彼此分擔責任"><a href="#彼此分擔責任" class="headerlink" title="彼此分擔責任"></a>彼此分擔責任</h1><p>AWS 與 User 基於 The Shared Responibility Model 定義彼此負擔的責任<br>AWS負責雲端本身的安全；User負責 雲端內部安全(應用程式&amp;防火牆…etc)<br>細節詳見於Ref.3</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://www.udemy.com/course/aws-certified-cloud-practitioner-new/">Udemy - [NEW] Ultimate AWS Certified Cloud Practitioner - 2023</a></li>
<li><a href="https://zh.oosga.com/briefings/iaas-paas-saas-difference/">IaaS, PaaS, SaaS之間的差異為何？有哪些案例？</a></li>
<li><a href="https://aws.amazon.com/tw/compliance/shared-responsibility-model/">AWS - shared-responsibility-model</a></li>
</ol>
]]></content>
      <categories>
        <category>aws</category>
      </categories>
      <tags>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS學習之旅(4) - Instance storage</title>
    <url>/2023/05/14/aws-instance-storage/</url>
    <content><![CDATA[<p>以下列出 AWS 常用的 Instance storage &amp; 建立 instance template 來自動化快速產出部署 </p>
<span id="more"></span>

<h1 id="Amazon-Machine-Image-AMI"><a href="#Amazon-Machine-Image-AMI" class="headerlink" title="Amazon Machine Image (AMI)"></a>Amazon Machine Image (AMI)</h1><p>一種客製化的EC2 instance,如同一個樣板,可以快速建立部署</p>
<p>步驟:</p>
<ol>
<li>啟動一個 EC2 instance, 配置設定&amp;安裝需要使用之軟體</li>
<li>關閉 EC2 instance &amp; build AMI &#x3D;&gt; 為一個 EBS snapshot</li>
<li>launch instace 時選擇使用 步驟2 做出來的 AMI</li>
</ol>
<h1 id="EC2-image-builder"><a href="#EC2-image-builder" class="headerlink" title="EC2 image builder"></a>EC2 image builder</h1><ul>
<li>一個AWS比較初始的功能, 該服務免費, 只有產出的EC2 instance &amp; 對應的 AMI 服務需要收費</li>
<li>提供一個自動建立、更新、驗證、測試AMI的流程</li>
</ul>
<h1 id="EC2-Instance-Store"><a href="#EC2-Instance-Store" class="headerlink" title="EC2 Instance Store"></a>EC2 Instance Store</h1><ul>
<li>又稱為ephemeral storage(臨時儲存), 在EC2關閉時資料就會消失</li>
<li>直接連到物理機器硬碟, I&#x2F;O效能比較高</li>
<li>用途: cache&#x2F;buffer&#x2F;臨時儲存的資料…etc</li>
</ul>
<h1 id="Elastic-Block-Storage-EBS"><a href="#Elastic-Block-Storage-EBS" class="headerlink" title="Elastic Block Storage (EBS)"></a>Elastic Block Storage (EBS)</h1><p>一個外接的儲存空間(network device), 叫做EBS Volume,它不會隨著EC2 instace結束而消失,適用用來放置永久資料</p>
<ul>
<li>EC2 instace &amp; EBS 要在同一個 AZ 上面才能使用</li>
<li>EBS Volume可以備份,其功能叫做 EBS snapshot(可以做到跨區備援)<ul>
<li>EBS snapshot archieve: 可以把不常用的 EBS snapshot 存放於此 ( 費用比較便宜 , 約75%)<br>  &#x3D;&gt; 但把其從 archieve 移出需要 24-72 小時的時間</li>
<li>提供 Recycle Bin for EBS snapshot: 可以設定一個規則(from 1 day to 1 year), 讓刪除的snapshot可以救回</li>
</ul>
</li>
<li>在 EC2 選擇 storage 時,EBS Volumes提供一個參數 <code>Delete on termination</code><ul>
<li>root EBS : enableld (EC2建立時產生的EBS, 預設關閉時會銷毀)</li>
<li>other EBS : disabled (其他的EBS, 預設是不會被銷毀的)<br>  &#x3D;&gt; 在設置時需要注意這個參數</li>
</ul>
</li>
<li>因為受限是network device, 因此效能會比較差一點</li>
</ul>
<h1 id="Elastic-File-System-EFS"><a href="#Elastic-File-System-EFS" class="headerlink" title="Elastic File System (EFS)"></a>Elastic File System (EFS)</h1><ul>
<li>可乘載100個以上的EC2 instances</li>
<li>僅適用於Linux EC2 instance 且可以跨多個AZ</li>
<li>性能好但價格昂貴(依照儲存資料大小付費)</li>
<li>AWS有針對不常使用的檔案做優化處理EFS Infrequent Access(EFS-IA)<br>&#x3D;&gt; 可設定lifecycle policy將不常用的檔案丟到EFS-IA(可以省下92%的開銷)</li>
</ul>
<h1 id="Amazion-FSx"><a href="#Amazion-FSx" class="headerlink" title="Amazion FSx"></a>Amazion FSx</h1><ul>
<li>第三方高性能檔案系統(全託管服務)<ul>
<li>FSx for Windows File System: 基於Window 環境</li>
<li>FSx for Lustre: 高性能且可擴展 High Performance Computing(HPC)<br>  &#x3D;&gt; 命名由 Linux + cluster 組合成的</li>
</ul>
</li>
</ul>
<h1 id="整理的-overview"><a href="#整理的-overview" class="headerlink" title="整理的 overview"></a>整理的 overview</h1><p><img src="https://bnz05pap002files.storage.live.com/y4miZjeMVWHdj9uJs2xDhhRUz7NQ5HnUPYLC_uwRnBgn37hXZh7nMbZBdrqnsmKoPKipZ13DUbt3j-orvrn1H9OdSWAsqY71bvWft27C8y31O_Pc9jkJXonRdhkLSgcdt3pOTtOlhNdb_DGxSKXfmK5E772zuxTwdl1QIK_AgF45BwdQsR2hZzDEAJ9IkeZY3Bc?width=561&height=651&cropmode=none" alt="aws-instance-storage-overview.png"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://www.udemy.com/course/aws-certified-cloud-practitioner-new/">Udemy - [NEW] Ultimate AWS Certified Cloud Practitioner - 2023</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10264261">Day 10 運算寶石：EC2 儲存資源 Instance Store vs Elastic Block Storage (EBS)</a></li>
</ol>
]]></content>
      <categories>
        <category>aws</category>
      </categories>
      <tags>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS學習之旅(5) - 負載均衡&amp;自動擴展</title>
    <url>/2023/05/17/aws-load-balance-and-auto-scale/</url>
    <content><![CDATA[<p>討論AWS如何做到<br>1.高可用性(High Availability): 可以分佈在至少2個AZ，可以做異地備援(防災disaster)<br>2.可擴展性(Scalability): 提供更大負載能力<br>    - 分成垂直(Vertical)擴展 : 加大 instance 的等級(但終究有硬體限制)<br>    - 水平(Horizontal)擴展: 加多 instance 的數量<br>3.彈性(Elasticity): 意味著可自動擴展<br>4.敏捷性(Agility): 可快速獲得資源</p>
<span id="more"></span>

<h1 id="Elastic-Load-Balancer-ELB"><a href="#Elastic-Load-Balancer-ELB" class="headerlink" title="Elastic Load Balancer (ELB)"></a>Elastic Load Balancer (ELB)</h1><ul>
<li>為 managed load Balancer，AWS提供以下三點服務:<ul>
<li>確保可運行的環境</li>
<li>會自動升級跟維護</li>
<li>只需要少量的配置</li>
</ul>
</li>
<li>ELB的種類目前有 4 種<ul>
<li>Application Load Balancer: Http&#x2F;Https&#x2F;gRPC (Layer 7)<br>  &#x3D;&gt; 可提供static DNS(URL)</li>
<li>Network Load Balancer: TCP&#x2F;UDP (Layer 4)<br>  &#x3D;&gt; 若有高效能的需求可以使用它<br>  &#x3D;&gt; 可提供static IP</li>
<li>Gateway Load Balacner: 監聽封包，並轉傳流量 (Layer 3)<br>  &#x3D;&gt; 可作為3rd party security virtual appliances 來作封包檢查</li>
</ul>
</li>
</ul>
<h1 id="Auto-Scaling-Group-ASG"><a href="#Auto-Scaling-Group-ASG" class="headerlink" title="Auto Scaling Group (ASG)"></a>Auto Scaling Group (ASG)</h1><ul>
<li>可自動新增&#x2F;刪減 EC2 instance 數量</li>
<li>可以檢查&#x2F;替換 不堪使用的 EC2</li>
</ul>
<p>步驟:</p>
<ol>
<li>建立 EC2 templates</li>
<li>綁定 Load Balancer</li>
</ol>
<p>擴展的策略有4種:</p>
<ol>
<li>manual Scaling: 手動配置需要多少EC2</li>
<li>Dynamic Scaling:<ul>
<li>simple&#x2F;step Scaling: 用 CloudWatch 監控若超過&#x2F;低於threshold則新增&#x2F;刪減instance數量</li>
<li>target tracking scaling: 檢查在 ASG 內平均的CPU量超過threshold則新增instance數量</li>
</ul>
</li>
<li>Scheduled Scaling: 特定活動 (EX: 雙11購物節)</li>
<li>Predictive Scaling: 使用Machine Learning來預測流量 (time-based pattern)</li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://www.udemy.com/course/aws-certified-cloud-practitioner-new/">Udemy - [NEW] Ultimate AWS Certified Cloud Practitioner - 2023</a></li>
</ol>
]]></content>
      <categories>
        <category>aws</category>
      </categories>
      <tags>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>服務部署tomcat運行發生Out Of Memory時的處理方法</title>
    <url>/2023/05/21/java-outOfMemory-tomcat/</url>
    <content><![CDATA[<p>最近公司的測試環境，時不時就會一直緩慢甚至無法登入，調出log一看就發現Out Of Memory<br>有鑑於之前的處理方式總是重啟治百病，趁這個機會學習一下怎麼調出dump file並進一步找到原因。</p>
<span id="more"></span>

<h1 id="復現異常"><a href="#復現異常" class="headerlink" title="復現異常"></a>復現異常</h1><p>步驟1: 準備一台VM，並安裝 tomcat<br>步驟2: 準備一個Servlet，並撰寫一個無窮迴圈(讓其一直堆疊記憶體直至吃光記憶體) (參考Ref. 1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    map.put(r.nextInt(), <span class="string">&quot;value&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>步驟3: 配置tomcat的設定<br>    tomcat 的啟動為 <code>bin</code> 底下有 <code>startup.sh</code> 會去呼叫 <code>catclina.sh</code><br>    預設是不會有 <code>setenv.sh</code>，但 <code>catalina.sh</code> 裡面有撰寫相關指令可以將 JAVA 的配置檔獨立撰寫<br>    所以我們要新增一個 <code>setenv.sh</code> 讓其配置</p>
<pre><code>給予一個極小的記憶體空間 &amp; 給對應的路徑去產出 OOM 的 dump file
</code></pre>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">&quot;-server -Dfile.encoding=UTF-8 -Xmx12m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/tomcat/apache-tomcat-9.0.75/logs/oom&quot;</span></span><br></pre></td></tr></table></figure>

<p>步驟4: 啟動 tomcat server 並去運行網頁，接著就可以去 <code>logs\catalina.out</code> 查看是否有復現 OOM 且是否對應有產檔</p>
<p><img src="https://bnz05pap002files.storage.live.com/y4md9oaTKdfT5DlNpGGIUC1-3wn_Q7ucDSJ5hIqyEYINb0XMoNz81IVbbsws_oGnveJGXHGEkFrjOIRkTBGQ9lrx5OfHmxOtYWULDJurCYrrerpaGB4syA_NCl7Iz0_O1jMTQawDN3h5Q9Wn1RD3e6Jmhpy4K2JRqwQ8gPG6Iopxe1wAWj-QnsFoURtnm4cynkT?width=1024&height=248&cropmode=none" alt="tomcat-oom-catalina.png"></p>
<h1 id="利用VisualVM-檢查原因"><a href="#利用VisualVM-檢查原因" class="headerlink" title="利用VisualVM 檢查原因"></a>利用VisualVM 檢查原因</h1><ol>
<li>安裝 VisualVM</li>
<li>load 產出的 hprof 檔</li>
</ol>
<p>接著就可以看到原因</p>
<ul>
<li>用 thread 看是哪個流程出了問題</li>
</ul>
<p><img src="https://bnz05pap002files.storage.live.com/y4mkka-ks2JRXJsF9PQpcshfjnvyvyQJ7joczA4oe4bMNIxJD0JdGfniKpHJUirEb-CfxNjj3c3JDKCjeIMRqubKwYf9gmk1njMiiEWL6AXX-q9FI2bf4ckc67pT4lnXLsct86Gr66JR7E-zuPBW_Fxb0HN1BD9LJo2BWWB16FI-GU4vQ6VnslUWYBIVcn3SflK?width=1024&height=302&cropmode=none" alt="thread-heap-dump.png"></p>
<ul>
<li>用 Object 看是哪個實例佔了大部分的記憶體&amp;檢查程式是否需要調整</li>
</ul>
<p><img src="https://bnz05pap002files.storage.live.com/y4mKR9e8wb6aUxgeOj6P42kXJneo0YGQnavYL2t1QJV6JKCL1OglpODUOyadfiIe_DAM3J-OfliQoYQuRQd8HNEPcWkYKwlxhtCZTURnIqUOnX2BFCynyu8gixA7RgjuRHg7m48FLThI-3ifJkDxDZglHoLW_1uHXVbmrDpu_-MKpWASRKYkxhGsXe1va3kUqyP?width=1024&height=401&cropmode=none" alt="object-headp-dump.png"></p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>OOM常常發生在一些小細節上，此為純粹紀錄盤查流程<br>在JDK1.8以前也會出現 <code>Permgen space</code>(公司有些專案還沒到Java8，還是會碰到)<br>&#x3D;&gt; 這種情況通常為 class數量太多或size太大<br>雖然Java8把其空間轉到了Metaspace，但記憶體還是有機會會吃滿，仍然需要小心注意</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://yu-jack.github.io/2020/02/24/java-oom/">java.lang.OutOfMemoryError Java heap space? 怎麼解?</a></li>
<li><a href="https://tomcat.apache.org/">tomcat org</a></li>
<li><a href="https://visualvm.github.io/">visualVM</a></li>
<li><a href="https://www.51cto.com/article/620488.html">教你写Bug，常见的 OOM 异常分析</a></li>
</ol>
]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot3整合swagger3產出API開發文件</title>
    <url>/2023/02/28/springboot3-swagger-api/</url>
    <content><![CDATA[<p>最近開始學習使用 Springboot3 的版本, 搭配以往的 Swagger 工具來產出對應的 API 文件時, 報出了錯誤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Springfox Type javax.servlet.http.HttpServletRequest not present</span><br></pre></td></tr></table></figure>

<p>之前在使用Swagger2.x是引用springfox, 但其不支援 springboot3 所使用之 jakartaEE.</p>
<p>因此我們改用 springdoc 套件來實作 springboot</p>
<p>以下為基本使用方法:</p>
<span id="more"></span>

<ol>
<li>引入 springdoc 的 dependencies:</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入後一個基本的導入就已經完成了, 接著我們可以用以下的 URL 去測試是否有成功<br>Swagger UI page: <code>http://server:port/context-path/swagger-ui.html</code><br>OpenAPI description: <code>http://server:port/context-path/v3/api-docs</code><br>server &#x2F; port &#x2F; context-path 可以在 application.properties 設定</p>
<ol start="2">
<li>介面配置:</li>
</ol>
<ul>
<li>如同swagger一樣可撰寫設定去更改介面顯示</li>
<li>如有不同功能需要做分卷區分的時候可以使用 <code>GroupedOpenApi</code> 針對不同的條件做分類<br>(如以下範例就是使用 不同的 url 的路徑做區分)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Swagger3的配置</span><br><span class="line"> * </span><br><span class="line"> * @author oscar51011</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class HospitalSwagger3Config &#123;</span><br><span class="line"></span><br><span class="line">	@Bean</span><br><span class="line">	public OpenAPI openAPIconfig() &#123;</span><br><span class="line">		return new OpenAPI().info(new Info().title(&quot;醫院服務&quot;).description(&quot;處理醫院模組功能&quot;));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">	public GroupedOpenApi publicApi() &#123;</span><br><span class="line">		return GroupedOpenApi.builder().group(&quot;hospital&quot;).pathsToMatch(&quot;/hospital/**&quot;).build();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Bean</span><br><span class="line">	public GroupedOpenApi adminApi() &#123;</span><br><span class="line">		return GroupedOpenApi.builder().group(&quot;hospital2&quot;).pathsToMatch(&quot;/hospital2/**&quot;).build();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bnz05pap002files.storage.live.com/y4mriB5Apzx4JcQsqYFcxktT8GOycIwl4qDyajThcruNY_7aQgdKnqJxWFVAJ-hqeBv-wdhhcybUXSAt882PiHxBnqtPo8XPqkvEk4c5lBb3C6xnh7mGQJ-rpUEd4qKLs0jnoTw1LKchuDNvyer97u-m06bvnQr-JwcsCaI9WqQUwTg04zl3uALyeea9er4R7d8?width=660&height=329&cropmode=none" alt="swagger3-ui-page.png"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><ol>
<li><a href="https://cwiki.apache.org/confluence/display/GEODE/Migration+from+springfox+to+springdoc">Migration from springfox to springdoc</a></li>
<li><a href="https://springdoc.org/v2/#spring-webmvc-support">springdoc-openapi v2.0.2</a></li>
<li><a href="https://springdoc.org/v2/#migrating-from-springfox">Migrating from SpringFox</a></li>
<li><a href="https://www.cnblogs.com/xiao2shiqi/p/16383896.html">springdoc-openapi的基本使用</a></li>
</ol>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Item27 - 消除非受檢的警告</title>
    <url>/2022/07/10/effective-java-item27/</url>
    <content><![CDATA[<p>此為閱讀 Effective Java 3rd 所記錄的學習歷程<br>Item27 : 消除非受檢的警告<br>以下範例參考書中說明.</p>
<p>盡可能消除每一個非受檢警告, 避免運行時出現 Class-Cast-Exception 異常</p>
<span id="more"></span>

<h1 id="使用泛型編譯器警告"><a href="#使用泛型編譯器警告" class="headerlink" title="使用泛型編譯器警告"></a>使用泛型編譯器警告</h1><p>在使用泛型時會遇到許多編譯器警告:</p>
<ul>
<li>非受檢強制轉換警告 ( unchecked cast waring )</li>
<li>非受檢方法調用警告 ( unchecked method invocation warnings     )</li>
<li>非受檢參數化可變參數類型警告 ( unchecked parameterized varag type warnings )</li>
<li>非受檢轉換警告 ( unchecked conversion warnings )</li>
</ul>
<h1 id="簡易警告排除"><a href="#簡易警告排除" class="headerlink" title="簡易警告排除"></a>簡易警告排除</h1><p>有些非受檢警告容易處理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Lark&gt; exaltation = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br></pre></td></tr></table></figure>
<p>此時編譯器會噴出警告:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Type safety: The expression of type HashSet needs unchecked conversion to conform to Set&lt;Foo&gt;</span><br></pre></td></tr></table></figure>
<p>此時加上 <code>&lt;&gt;</code> 即可解決這個警告</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Lark&gt; exaltation = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h1 id="使用註解禁止警告"><a href="#使用註解禁止警告" class="headerlink" title="使用註解禁止警告"></a>使用註解禁止警告</h1><p>如果無法消除警告, 在確認且可證明發出警告的程式是正常的,<br>可以使用<code>@SuppressWarings(&quot;unchecked&quot;)</code> 註解來禁止這條警告</p>
<ul>
<li>盡量在範圍越小的地方使用該註解(不要在class level上使用該 annotation)</li>
</ul>
<p>以之前練習將 XML String 轉換成 物件的程式為例:<br>我需要將 XML String 轉換成外部自定義的DTO格式, 因此使用了泛型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">parseXmltoBeanByJAXB</span><span class="params">(String xmlString, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> JAXBException &#123;</span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">targetStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(xmlString.getBytes());		</span><br><span class="line">		<span class="type">JAXBContext</span> <span class="variable">context</span> <span class="operator">=</span> JAXBContext.newInstance(clazz);</span><br><span class="line">		<span class="type">Unmarshaller</span> <span class="variable">unmarshaller</span> <span class="operator">=</span> context.createUnmarshaller();</span><br><span class="line">		<span class="keyword">return</span> (T) unmarshaller.unmarshal(targetStream);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>編譯器會發出以下警告:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Type safety: Unchecked cast from Object to T</span><br></pre></td></tr></table></figure>
<p>但編譯器認為這樣的轉型是有風險的, 既然我們認為沒有問題, 因此就加上 <code>@SuppressWarings(&quot;unchecked&quot;)</code></p>
<p>可惜不能夠直接在 return 語句加上該annotation, 因此我們可以使用一個區域變數來裝載 需要回傳的物件, 並加上 annotation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">parseXmltoBeanByJAXB</span><span class="params">(String xmlString, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> JAXBException &#123;</span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">targetStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(xmlString.getBytes());		</span><br><span class="line">		<span class="type">JAXBContext</span> <span class="variable">context</span> <span class="operator">=</span> JAXBContext.newInstance(clazz);</span><br><span class="line">		<span class="type">Unmarshaller</span> <span class="variable">unmarshaller</span> <span class="operator">=</span> context.createUnmarshaller();</span><br><span class="line">		<span class="comment">// adding local variable to reduce scope of SuppressWarnings</span></span><br><span class="line">		<span class="comment">// 我們希望將JAXB轉換回的物件轉型成自訂義DTO</span></span><br><span class="line">		<span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T) unmarshaller.unmarshal(targetStream);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>以上為這篇的筆記內容</p>
]]></content>
      <categories>
        <category>effectiveJava</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effectiveJava</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java - Enum 撰寫優化 - part1</title>
    <url>/2022/07/24/effective-java-Enum-part1/</url>
    <content><![CDATA[<p>此為閱讀 Effective Java 3rd 所記錄的學習歷程<br>Item34 : 使用 Enum 取代 int 常數<br>Item35 : 使用 instance parameter 取代 enum ordinal() 方法<br>Item37 : 使用 EnumMap 取代 ordinal indexing</p>
<p>以下範例參考書中說明.</p>
<span id="more"></span>

<h1 id="使用-instance-fields-取代-ordinals"><a href="#使用-instance-fields-取代-ordinals" class="headerlink" title="使用 instance fields 取代 ordinals"></a>使用 instance fields 取代 ordinals</h1><p>Enum 本身就會自帶一個 <code>int</code> 變數, 其有一個 <code>ordinal()</code> 方法可以取得該變數的排列順序，<br>盡量不要使用該參數在業務邏輯中，會造成維護上的困難，如果加入一個新的參數可能會改變原本的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Enumable</span> &#123;</span><br><span class="line">	NEW ,SOLO, DUET, TRIO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumableNew</span> &#123;</span><br><span class="line">	NEW(<span class="number">3</span>),SOLE(<span class="number">0</span>), DUET(<span class="number">1</span>), TRIO(<span class="number">2</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> number;</span><br><span class="line">	</span><br><span class="line">	EnumableNew(<span class="type">int</span> number)&#123;</span><br><span class="line">		<span class="built_in">this</span>.number = number;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> number;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用印出值的方式，可以發現，加入新的參數 NEW 後，原本的 SOLO 值就被影響到了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Before add Enumable <span class="keyword">new</span> <span class="title class_">item</span> - SOLO value:<span class="number">0</span></span><br><span class="line">Before add EnumableNew <span class="keyword">new</span> <span class="title class_">item</span> - SOLO value:<span class="number">0</span></span><br><span class="line">After add Enumable <span class="keyword">new</span> <span class="title class_">item</span> - SOLO value:<span class="number">1</span></span><br><span class="line">After add Enumable <span class="keyword">new</span> <span class="title class_">item</span> - SOLO value:<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h1 id="使用-Enum-取代-int-常數"><a href="#使用-Enum-取代-int-常數" class="headerlink" title="使用 Enum 取代 int 常數"></a>使用 Enum 取代 int 常數</h1><ul>
<li>提供安全性(提供編譯時期型別檢查)</li>
<li>提供可讀性(因為當java程式編譯後，常數會被轉成數字，而使用Enum後，就算編譯後也是會顯示對應的屬性名稱)</li>
</ul>
<ol>
<li>使用兩種方式定義參數:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitConstant</span> &#123;</span><br><span class="line">	<span class="comment">// APPLE</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">APPLE_FUJI</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">APPLE_PIPPIN</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">	<span class="comment">// ORANGE</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ORANGE_NAVEL</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ORANGE_TEMPLE</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定義蘋果類型&amp;價格</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line">	FUJI(<span class="number">10</span>), PIPPIN(<span class="number">20</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> price;</span><br><span class="line">	</span><br><span class="line">	Apple(<span class="type">int</span> price)&#123;</span><br><span class="line">		<span class="built_in">this</span>.price = price;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> price;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定義橙類型&amp;價格</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Orange</span> &#123;</span><br><span class="line">	NAVEL(<span class="number">50</span>), TEMPLE(<span class="number">60</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> price;</span><br><span class="line">	</span><br><span class="line">	Orange(<span class="type">int</span> price)&#123;</span><br><span class="line">		<span class="built_in">this</span>.price = price;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> price;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>提供服務:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Service &#123;</span><br><span class="line">	public static int addTwoOrangePriceByEnumInput(Orange orange1,Orange orange2) &#123;</span><br><span class="line">		return orange1.getPrice() + orange2.getPrice();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static int addTwoOrangePriceByIntInput(int orange1, int orange2) &#123;</span><br><span class="line">		return orange1 + orange2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>測試結果<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 編譯時期不報錯，但業務邏輯是錯誤的 (將蘋果的參數丟進橙的方法)</span></span><br><span class="line">System.out.println(<span class="string">&quot;Orange Price - constant value:&quot;</span> + Service.addTwoOrangePriceByIntInput(FruitConstant.APPLE_FUJI, FruitConstant.ORANGE_NAVEL));</span><br><span class="line"><span class="comment">// 編譯時期不報錯，但業務邏輯是正確的</span></span><br><span class="line">System.out.println(<span class="string">&quot;Orange Price - Enum:&quot;</span> + Service.addTwoOrangePriceByEnumInput(Orange.NAVEL, Orange.TEMPLE));</span><br><span class="line"><span class="comment">// 編譯時期報錯，因為業務邏輯是錯誤的</span></span><br><span class="line">System.out.println(<span class="string">&quot;Orange Price - Enum:&quot;</span> + Service.addTwoOrangePriceByEnumInput(Apple.FUJI, Orange.TEMPLE));</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="使用-EnumMap-取代-ordinal-indexing"><a href="#使用-EnumMap-取代-ordinal-indexing" class="headerlink" title="使用 EnumMap 取代 ordinal indexing"></a>使用 EnumMap 取代 ordinal indexing</h1><p>有時候會使用 <code>ordinal()</code> 來對 Array 或 List 做迴圈，以下列範例為例:<br>一個公司在招募員工，根據其不同的職務內容進行分類:</p>
<ol>
<li><p>員工物件 &amp; 職務類別Enum</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EngineerLevel</span> &#123;</span><br><span class="line">	STAFF,INTERN, JUNIOR, SENIOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Engineer</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> EngineerLevel level;</span><br><span class="line">	</span><br><span class="line">	Engineer(String name, EngineerLevel level) &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.level = level;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> EngineerLevel <span class="title function_">getLevel</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> level;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLevel</span><span class="params">(EngineerLevel level)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.level = level;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用 Array + ordinal() 的方式處理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Engineer&gt; engineers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">engineers.add(<span class="keyword">new</span> <span class="title class_">Engineer</span>(<span class="string">&quot;Tom&quot;</span>, EngineerLevel.INTERN));</span><br><span class="line">engineers.add(<span class="keyword">new</span> <span class="title class_">Engineer</span>(<span class="string">&quot;John&quot;</span>, EngineerLevel.JUNIOR));</span><br><span class="line">engineers.add(<span class="keyword">new</span> <span class="title class_">Engineer</span>(<span class="string">&quot;Terry&quot;</span>, EngineerLevel.JUNIOR));</span><br><span class="line">engineers.add(<span class="keyword">new</span> <span class="title class_">Engineer</span>(<span class="string">&quot;Oscar&quot;</span>, EngineerLevel.SENIOR));</span><br><span class="line"></span><br><span class="line">Set&lt;Engineer&gt;[] devTeams2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>[EngineerLevel.values().length];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt; devTeams2.length; i++)</span><br><span class="line">  devTeams2[i] = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Engineer engineer : engineers) &#123;</span><br><span class="line">  devTeams2[engineer.getLevel().ordinal()].add(engineer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出數量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ; i &lt; devTeams2.length ; i++) &#123;</span><br><span class="line">  System.out.println( EngineerLevel.values()[i] + <span class="string">&quot;:&quot;</span> + devTeams2[i].size() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣的做法可以解決需求，但是 Array 的 index 對應到的職務類別，使用上需要明確知道對應關係，<br>不然很有可能容易出錯，如果有新增一個職務類別的話，ordinal() 可能會有可能變動而造成影響，<br>因此有另一種方式可以達到同樣的效果。</p>
</li>
<li><p>使用 <code>EnumMap</code> 來改寫，可以使程式越簡潔清楚:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Engineer&gt; engineers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">engineers.add(<span class="keyword">new</span> <span class="title class_">Engineer</span>(<span class="string">&quot;Tom&quot;</span>, EngineerLevel.INTERN));</span><br><span class="line">engineers.add(<span class="keyword">new</span> <span class="title class_">Engineer</span>(<span class="string">&quot;John&quot;</span>, EngineerLevel.JUNIOR));</span><br><span class="line">engineers.add(<span class="keyword">new</span> <span class="title class_">Engineer</span>(<span class="string">&quot;Terry&quot;</span>, EngineerLevel.JUNIOR));</span><br><span class="line">engineers.add(<span class="keyword">new</span> <span class="title class_">Engineer</span>(<span class="string">&quot;Oscar&quot;</span>, EngineerLevel.SENIOR));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">Map&lt;EngineerLevel, Set&lt;Engineer&gt;&gt; devTeams  =<span class="keyword">new</span> <span class="title class_">EnumMap</span>&lt;&gt;(EngineerLevel.class);</span><br><span class="line"><span class="keyword">for</span>(EngineerLevel levelgroup : EngineerLevel.values()) &#123;</span><br><span class="line">  devTeams.put(levelgroup, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 員工分級</span></span><br><span class="line"><span class="keyword">for</span>(Engineer engineer : engineers) &#123;</span><br><span class="line">  devTeams.get(engineer.getLevel()).add(engineer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取出數量</span></span><br><span class="line"><span class="keyword">for</span>(EngineerLevel level : devTeams.keySet()) &#123;</span><br><span class="line">  System.out.println( level.toString() + <span class="string">&quot;:&quot;</span> + devTeams.get(level).size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>本篇總結: 在使用 Enum 時，盡量不要使用 <code>ordinal()</code> 進行處理。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://www.cnblogs.com/liuyonglong/p/3561581.html">java之类型安全的枚举</a></li>
<li><a href="https://ahdak.github.io/blog/effective-java-part-5/">Effective Java - 3rd Edition - Enums and Annotations</a></li>
</ol>
]]></content>
      <categories>
        <category>effectiveJava</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effectiveJava</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java Ite26 - 使用泛型時, 不要使用原生類別</title>
    <url>/2022/07/09/effective-java-item26/</url>
    <content><![CDATA[<p>此為閱讀 Effective Java 3rd 所記錄的學習歷程<br>Item26 : 使用泛型時, 不要使用原生類別<br>以下範例參考書中說明.</p>
<span id="more"></span>
<h1 id="使用泛型前"><a href="#使用泛型前" class="headerlink" title="使用泛型前"></a>使用泛型前</h1><p>在 java 新增泛型之前, 我們會使用這樣的寫法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">List</span> <span class="variable">nameList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	nameList.add(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">	nameList.add(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">	<span class="comment">// 如果加入此行, 在運行時期才會發現出錯</span></span><br><span class="line">	nameList.add(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">i</span> <span class="operator">=</span> nameList.iterator(); i.hasNext();)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)i.next();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣的寫法在編譯時期是會通過的, 但如果不小心把數字型別的資料加入該集合,<br>在編譯時期依然可以通過, 但只有在執行時期去呼叫使用時, 才會報出錯誤.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Tom</span><br><span class="line">John</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span><br><span class="line">	at EffectiveJava.rule26.Main.main(Main.java:<span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<h1 id="使用泛型後"><a href="#使用泛型後" class="headerlink" title="使用泛型後"></a>使用泛型後</h1><p>有了泛型之後, 我們會改用以下的寫法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	List&lt;String&gt; nameList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	nameList.add(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">	nameList.add(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">	<span class="comment">// 如果加入此行, 編譯時期就會發現出錯</span></span><br><span class="line">	nameList.add(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">i</span> <span class="operator">=</span> nameList.iterator(); i.hasNext();)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)i.next();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>List</code>介面多了參數<code>String</code>可以使編譯器在編譯時期檢查型別, 查看是否合法.</p>
<h1 id="允許任意型別"><a href="#允許任意型別" class="headerlink" title="允許任意型別"></a>允許任意型別</h1><p>Java 保留了原生類型是為了向下兼容 java5 以前的程式可以通用, 但仍不建議使用<br>如果需要插入任意物件, 可以使用 <code>List&lt;Object&gt;</code>, 以下述而言:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	unsafeAdd(list, Integer.valueOf(<span class="number">42</span>));</span><br><span class="line">	<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unsafeAdd</span><span class="params">(List list, Object o)</span> &#123;</span><br><span class="line">	list.add(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述方法使用了 <code>List</code> 去接收傳進來的參數, 但忽略了泛型檢查, 如果我傳遞了一個數字類型,<br>依然只會在執行時期才會發現轉型錯誤, 因此我們會改成以下寫法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	unsafeAdd(list, Integer.valueOf(<span class="number">42</span>));</span><br><span class="line">	<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unsafeAdd</span><span class="params">(List&lt;Object&gt; list, Object o)</span> &#123;</span><br><span class="line">	list.add(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此時編譯器就會直接拋錯, 因為 <code>List&lt;String&gt;</code> 是 <code>List</code> 的子類別, 但不能傳給 <code>List&lt;Object&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">The method <span class="title function_">unsafeAdd</span><span class="params">(List&lt;Object&gt;, Object)</span> in the type Main is not applicable <span class="keyword">for</span> the <span class="title function_">arguments</span> <span class="params">(List&lt;String&gt;, Integer)</span></span><br></pre></td></tr></table></figure>

<h1 id="不確定-or-不在意元素類別"><a href="#不確定-or-不在意元素類別" class="headerlink" title="不確定 or 不在意元素類別"></a>不確定 or 不在意元素類別</h1><p>在不確定傳入方法的類別時, 可以使用萬用字元(?) 來處理; 如果使用原生類別時可以隨意將資料放進集合內,<br>很容易破壞規則, 但使用 <code>Collection&lt;?&gt;</code> 時, 除了 <code>null</code> 之外, 無法將其他資料塞進集合中.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">numElementsInCommon</span><span class="params">(Set&lt;?&gt; s1, Set&lt;?&gt; s2)</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (Object o1 : s1)</span><br><span class="line">    <span class="keyword">if</span> (s2.contains(o1))</span><br><span class="line">      result++;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="需使用原生型別的例外"><a href="#需使用原生型別的例外" class="headerlink" title="需使用原生型別的例外"></a>需使用原生型別的例外</h1><p>Java 在幾種情況底下可以使用 原生型別:</p>
<ol>
<li><p>class iteral:<br> 合法: <code>List.class</code> , <code>String[].calss</code> , <code>int.class</code><br> 不合法: <code>List&lt;String&gt;.class</code> , <code>List&lt;?&gt;.class</code></p>
</li>
<li><p>instanceof:<br>若使用 <code>Set&lt;String&gt;</code> 會報出 <code>Cannot perform instanceof check against parameterized type</code><br>若使用萬用元(?) 並不會影響結果, 因此使用元生類型即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(o <span class="keyword">instanceof</span> Set) &#123;</span><br><span class="line">    Set&lt;?&gt; s = (Set&lt;?&gt;) o; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><ol>
<li><a href="https://www.796t.com/content/1559318586.html">Java泛型(T)與萬用字元？</a></li>
<li><a href="https://www.jyt0532.com/2018/12/02/dont-use-raw-types/">Effective Java Item26 - 不要使用原始類型</a></li>
<li><a href="https://www.blogbrb.com/posts/book/effective-java-item26/">Effective Java Item26 不要使用原型類型</a></li>
</ol>
]]></content>
      <categories>
        <category>effectiveJava</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>effectiveJava</tag>
      </tags>
  </entry>
</search>
